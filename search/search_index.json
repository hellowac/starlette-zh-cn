{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\u7b80\u4ecb","text":"<p> \u2728 \u95ea\u4eae\u7684\u5c0f ASGI \u6846\u67b6. \u2728 </p> <p> </p> <p>\u6587\u6863: \u82f1\u6587 - \u4e2d\u6587</p> <p>\u6e90\u7801: https://github.com/encode/starlette</p>"},{"location":"#starlette","title":"Starlette","text":"<p>Starlette \u662f\u4e00\u4e2a\u8f7b\u91cf\u7ea7\u7684 ASGI \u6846\u67b6/\u5de5\u5177\u5305\uff0c\u975e\u5e38\u9002\u5408\u7528\u4e8e\u6784\u5efa Python \u5f02\u6b65 Web \u670d\u52a1\u3002</p> <p>\u5b83\u5df2\u7ecf\u8fbe\u5230\u751f\u4ea7\u7ea7\u522b\uff0c\u5e76\u63d0\u4f9b\u4ee5\u4e0b\u529f\u80fd\uff1a</p> <ul> <li>\u4e00\u4e2a\u8f7b\u91cf\u3001\u4f4e\u590d\u6742\u5ea6\u7684 HTTP Web \u6846\u67b6\u3002</li> <li>WebSocket \u652f\u6301\u3002</li> <li>\u8fdb\u7a0b\u5185\u540e\u53f0\u4efb\u52a1\u3002</li> <li>\u542f\u52a8\u548c\u5173\u95ed\u4e8b\u4ef6\u652f\u6301\u3002</li> <li>\u57fa\u4e8e <code>httpx</code> \u7684\u6d4b\u8bd5\u5ba2\u6237\u7aef\u3002</li> <li>\u63d0\u4f9b CORS\u3001GZip\u3001\u9759\u6001\u6587\u4ef6\u3001\u6d41\u5f0f\u54cd\u5e94\u652f\u6301\u3002</li> <li>\u4f1a\u8bdd\u548c Cookie \u652f\u6301\u3002</li> <li>100% \u6d4b\u8bd5\u8986\u76d6\u7387\u3002</li> <li>100% \u7c7b\u578b\u6ce8\u89e3\u4ee3\u7801\u5e93\u3002</li> <li>\u5f88\u5c11\u7684\u786c\u6027\u4f9d\u8d56\u3002</li> <li>\u517c\u5bb9 <code>asyncio</code> \u548c <code>trio</code> \u540e\u7aef\u3002</li> <li>\u5728 \u72ec\u7acb\u57fa\u51c6\u6d4b\u8bd5 \u4e2d\u8868\u73b0\u4f18\u79c0\u3002</li> </ul>"},{"location":"#_1","title":"\u5b89\u88c5","text":"<pre><code>$ pip install starlette\n</code></pre> <p>\u60a8\u8fd8\u9700\u8981\u5b89\u88c5\u4e00\u4e2a ASGI \u670d\u52a1\u5668\uff0c\u4f8b\u5982 uvicorn\u3001daphne \u6216 hypercorn\u3002</p> <pre><code>$ pip install uvicorn\n</code></pre>"},{"location":"#_2","title":"\u793a\u4f8b","text":"example.py<pre><code>from starlette.applications import Starlette\nfrom starlette.responses import JSONResponse\nfrom starlette.routing import Route\n\n\nasync def homepage(request):\n    return JSONResponse({'hello': 'world'})\n\nroutes = [\n    Route(\"/\", endpoint=homepage)\n]\n\napp = Starlette(debug=True, routes=routes)\n</code></pre> <p>\u7136\u540e\u4f7f\u7528 Uvicorn \u8fd0\u884c\u8be5\u5e94\u7528\uff1a</p> <pre><code>$ uvicorn example:app\n</code></pre> <p>\u5982\u9700\u66f4\u5b8c\u6574\u7684\u793a\u4f8b\uff0c\u8bf7\u53c2\u8003 encode/starlette-example\u3002</p>"},{"location":"#_3","title":"\u4f9d\u8d56","text":"<p>Starlette \u4ec5\u9700\u8981 <code>anyio</code> \u4f5c\u4e3a\u5fc5\u9700\u4f9d\u8d56\uff0c\u4ee5\u4e0b\u662f\u53ef\u9009\u4f9d\u8d56\uff1a</p> <ul> <li><code>httpx</code> - \u5982\u679c\u60a8\u9700\u8981\u4f7f\u7528 <code>TestClient</code>\u3002</li> <li><code>jinja2</code> - \u5982\u679c\u60a8\u9700\u8981\u4f7f\u7528 <code>Jinja2Templates</code>\u3002</li> <li><code>python-multipart</code> - \u5982\u679c\u60a8\u9700\u8981\u652f\u6301\u8868\u5355\u89e3\u6790\uff08\u901a\u8fc7 <code>request.form()</code>\uff09\u3002</li> <li><code>itsdangerous</code> - \u5982\u679c\u60a8\u9700\u8981\u652f\u6301 <code>SessionMiddleware</code>\u3002</li> <li><code>pyyaml</code> - \u5982\u679c\u60a8\u9700\u8981\u652f\u6301 <code>SchemaGenerator</code>\u3002</li> </ul> <p>\u60a8\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u547d\u4ee4\u4e00\u6b21\u6027\u5b89\u88c5\u6240\u6709\u8fd9\u4e9b\u4f9d\u8d56\u9879\uff1a</p> <pre><code>$ pip install starlette[full]\n</code></pre>"},{"location":"#_4","title":"\u6846\u67b6\u8fd8\u662f\u5de5\u5177\u5305","text":"<p>Starlette \u88ab\u8bbe\u8ba1\u4e3a\u65e2\u53ef\u4ee5\u4f5c\u4e3a\u5b8c\u6574\u7684\u6846\u67b6\u4f7f\u7528\uff0c\u4e5f\u53ef\u4ee5\u4f5c\u4e3a ASGI \u5de5\u5177\u5305\u4f7f\u7528\u3002\u5b83\u7684\u4efb\u4f55\u7ec4\u4ef6\u90fd\u53ef\u4ee5\u72ec\u7acb\u4f7f\u7528\u3002</p> <pre><code>from starlette.responses import PlainTextResponse\n\n\nasync def app(scope, receive, send):\n    assert scope['type'] == 'http'\n    response = PlainTextResponse('Hello, world!')\n    await response(scope, receive, send)\n</code></pre> <p>\u5728 <code>example.py</code> \u6587\u4ef6\u4e2d\u8fd0\u884c <code>app</code> \u5e94\u7528\uff1a</p> <pre><code>$ uvicorn example:app\nINFO: Started server process [11509]\nINFO: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)\n</code></pre> <p>\u4f7f\u7528 <code>--reload</code> \u9009\u9879\u8fd0\u884c uvicorn\uff0c\u53ef\u4ee5\u5728\u4ee3\u7801\u66f4\u6539\u65f6\u81ea\u52a8\u91cd\u8f7d\u3002</p>"},{"location":"#_5","title":"\u6a21\u5757\u5316","text":"<p>Starlette \u7684\u6a21\u5757\u5316\u8bbe\u8ba1\u9f13\u52b1\u6784\u5efa\u53ef\u590d\u7528\u7684\u7ec4\u4ef6\uff0c\u8fd9\u4e9b\u7ec4\u4ef6\u53ef\u4ee5\u5728\u4efb\u4f55 ASGI \u6846\u67b6\u4e4b\u95f4\u5171\u4eab\u3002\u8fd9\u79cd\u8bbe\u8ba1\u5e94\u5f53\u80fd\u591f\u50ac\u751f\u4e00\u4e2a\u5171\u4eab\u4e2d\u95f4\u4ef6\u548c\u53ef\u6302\u8f7d\u5e94\u7528\u7684\u751f\u6001\u7cfb\u7edf\u3002</p> <p>\u6e05\u6670\u7684 API \u5206\u79bb\u8fd8\u610f\u5473\u7740\u66f4\u5bb9\u6613\u5355\u72ec\u7406\u89e3\u6bcf\u4e2a\u7ec4\u4ef6\u7684\u529f\u80fd\u3002</p> <p>Starlette is BSD licensed code.Designed &amp; crafted with care.\u2014 \u2b50\ufe0f \u2014</p>"},{"location":"applications/","title":"\u5e94\u7528","text":"<p>Starlette \u5305\u542b\u4e00\u4e2a\u5e94\u7528\u7c7b <code>Starlette</code>\uff0c\u5c06\u5176\u548c\u5176\u4ed6\u529f\u80fd\u4f18\u96c5\u5730\u7ed3\u5408\u5728\u4e00\u8d77\u3002</p> <pre><code>from contextlib import asynccontextmanager\n\nfrom starlette.applications import Starlette\nfrom starlette.responses import PlainTextResponse\nfrom starlette.routing import Route, Mount, WebSocketRoute\nfrom starlette.staticfiles import StaticFiles\n\n\ndef homepage(request):\n    return PlainTextResponse('Hello, world!')\n\ndef user_me(request):\n    username = \"John Doe\"\n    return PlainTextResponse('Hello, %s!' % username)\n\ndef user(request):\n    username = request.path_params['username']\n    return PlainTextResponse('Hello, %s!' % username)\n\nasync def websocket_endpoint(websocket):\n    await websocket.accept()\n    await websocket.send_text('Hello, websocket!')\n    await websocket.close()\n\n@asynccontextmanager\nasync def lifespan(app):\n    print('Startup')\n    yield\n    print('Shutdown')\n\n\nroutes = [\n    Route('/', homepage),\n    Route('/user/me', user_me),\n    Route('/user/{username}', user),\n    WebSocketRoute('/ws', websocket_endpoint),\n    Mount('/static', StaticFiles(directory=\"static\")),\n]\n\napp = Starlette(debug=True, routes=routes, lifespan=lifespan)\n</code></pre>"},{"location":"applications/#_1","title":"\u5b9e\u4f8b\u5316\u5e94\u7528","text":"<p>Instantiating the application</p> class <code>starlette.applications.Starlette</code>(debug=False, routes=None, middleware=None, exception_handlers=None, on_startup=None, on_shutdown=None, lifespan=None) <p>Creates an application instance.</p> <p>Parameters:</p> <ul> <li>debug - Boolean indicating if debug tracebacks should be returned on errors.</li> <li>routes - A list of routes to serve incoming HTTP and WebSocket requests.</li> <li>middleware - A list of middleware to run for every request. A starlette application will always automatically include two middleware classes. <code>ServerErrorMiddleware</code> is added as the very outermost middleware, to handle any uncaught errors occurring anywhere in the entire stack. <code>ExceptionMiddleware</code> is added as the very innermost middleware, to deal with handled exception cases occurring in the routing or endpoints.</li> <li>exception_handlers - A mapping of either integer status codes, or exception class types onto callables which handle the exceptions. Exception handler callables should be of the form <code>handler(request, exc) -&gt; response</code> and may be be either standard functions, or async functions.</li> <li>on_startup - A list of callables to run on application startup. Startup handler callables do not take any arguments, and may be be either standard functions, or async functions.</li> <li>on_shutdown - A list of callables to run on application shutdown. Shutdown handler callables do not take any arguments, and may be be either standard functions, or async functions.</li> <li>lifespan - A lifespan context function, which can be used to perform startup and shutdown tasks. This is a newer style that replaces the <code>on_startup</code> and <code>on_shutdown</code> handlers. Use one or the other, not both.</li> </ul>"},{"location":"applications/#_2","title":"\u5728\u5e94\u7528\u5b9e\u4f8b\u4e0a\u5b58\u50a8\u72b6\u6001","text":"<p>\u60a8\u53ef\u4ee5\u4f7f\u7528\u901a\u7528\u7684 <code>app.state</code> \u5c5e\u6027\u5728\u5e94\u7528\u5b9e\u4f8b\u4e0a\u5b58\u50a8\u4efb\u610f\u989d\u5916\u72b6\u6001\u3002</p> <p>\u4f8b\u5982\uff1a</p> <pre><code>app.state.ADMIN_EMAIL = 'admin@example.org'\n</code></pre>"},{"location":"applications/#_3","title":"\u8bbf\u95ee\u5e94\u7528\u5b9e\u4f8b","text":"<p>\u5f53\u6709 <code>request</code> \u53ef\u7528\u65f6\uff08\u4f8b\u5982\u5728\u7aef\u70b9\u548c\u4e2d\u95f4\u4ef6\u4e2d\uff09\uff0c\u53ef\u4ee5\u901a\u8fc7 <code>request.app</code> \u8bbf\u95ee\u5e94\u7528\u5b9e\u4f8b\u3002</p>"},{"location":"authentication/","title":"\u8ba4\u8bc1","text":"<p>Starlette \u63d0\u4f9b\u4e86\u4e00\u4e2a\u7b80\u5355\u4f46\u5f3a\u5927\u7684\u63a5\u53e3\uff0c\u7528\u4e8e\u5904\u7406\u8eab\u4efd\u9a8c\u8bc1\u548c\u6743\u9650\u63a7\u5236\u3002\u5b89\u88c5\u4e86\u9002\u5f53\u7684\u8eab\u4efd\u9a8c\u8bc1\u540e\u7aef\u7684 <code>AuthenticationMiddleware</code> \u540e\uff0c<code>request.user</code> \u548c <code>request.auth</code> \u63a5\u53e3\u5c06\u5728\u60a8\u7684\u7aef\u70b9\u4e2d\u53ef\u7528\u3002</p> <pre><code>from starlette.applications import Starlette\nfrom starlette.authentication import (\n    AuthCredentials, AuthenticationBackend, AuthenticationError, SimpleUser\n)\nfrom starlette.middleware import Middleware\nfrom starlette.middleware.authentication import AuthenticationMiddleware\nfrom starlette.responses import PlainTextResponse\nfrom starlette.routing import Route\nimport base64\nimport binascii\n\n\nclass BasicAuthBackend(AuthenticationBackend):\n    async def authenticate(self, conn):\n        if \"Authorization\" not in conn.headers:\n            return\n\n        auth = conn.headers[\"Authorization\"]\n        try:\n            scheme, credentials = auth.split()\n            if scheme.lower() != 'basic':\n                return\n            decoded = base64.b64decode(credentials).decode(\"ascii\")\n        except (ValueError, UnicodeDecodeError, binascii.Error) as exc:\n            raise AuthenticationError('Invalid basic auth credentials')\n\n        username, _, password = decoded.partition(\":\")\n        # TODO: \u5728\u8fd9\u91cc\u9a8c\u8bc1\u7528\u6237\u540d\u548c\u5bc6\u7801\n        return AuthCredentials([\"authenticated\"]), SimpleUser(username)\n\n\nasync def homepage(request):\n    if request.user.is_authenticated:\n        return PlainTextResponse('Hello, ' + request.user.display_name)\n    return PlainTextResponse('Hello, you')\n\nroutes = [\n    Route(\"/\", endpoint=homepage)\n]\n\nmiddleware = [\n    Middleware(AuthenticationMiddleware, backend=BasicAuthBackend())\n]\n\napp = Starlette(routes=routes, middleware=middleware)\n</code></pre>"},{"location":"authentication/#_1","title":"\u7528\u6237","text":"<p>\u5b89\u88c5\u4e86 <code>AuthenticationMiddleware</code> \u540e\uff0c<code>request.user</code> \u63a5\u53e3\u5c06\u53ef\u7528\u4e8e\u7aef\u70b9\u6216\u5176\u4ed6\u4e2d\u95f4\u4ef6\u3002</p> <p>\u8be5\u63a5\u53e3\u5e94\u7ee7\u627f\u81ea <code>BaseUser</code>\uff0c\u63d0\u4f9b\u4e24\u4e2a\u5c5e\u6027\uff0c\u4ee5\u53ca\u7528\u6237\u6a21\u578b\u5305\u542b\u7684\u5176\u4ed6\u4fe1\u606f\uff1a</p> <ul> <li><code>.is_authenticated</code></li> <li><code>.display_name</code></li> </ul> <p>Starlette \u63d0\u4f9b\u4e86\u4e24\u79cd\u5185\u7f6e\u7684\u7528\u6237\u5b9e\u73b0\uff1a<code>UnauthenticatedUser()</code> \u548c <code>SimpleUser(username)</code>\u3002</p>"},{"location":"authentication/#authcredentials","title":"AuthCredentials","text":"<p>\u91cd\u8981\u7684\u662f\uff0c\u8eab\u4efd\u9a8c\u8bc1\u51ed\u636e\u5e94\u4e0e\u7528\u6237\u4f5c\u4e3a\u72ec\u7acb\u7684\u6982\u5ff5\u8fdb\u884c\u5904\u7406\u3002\u8eab\u4efd\u9a8c\u8bc1\u65b9\u6848\u5e94\u8be5\u80fd\u591f\u72ec\u7acb\u4e8e\u7528\u6237\u8eab\u4efd\uff0c\u9650\u5236\u6216\u6388\u4e88\u7279\u5b9a\u7684\u6743\u9650\u3002</p> <p><code>AuthCredentials</code> \u7c7b\u63d0\u4f9b\u4e86 <code>request.auth</code> \u66b4\u9732\u7684\u57fa\u672c\u63a5\u53e3\uff1a</p> <ul> <li><code>.scopes</code></li> </ul>"},{"location":"authentication/#_2","title":"\u6743\u9650","text":"<p>\u6743\u9650\u901a\u8fc7\u7aef\u70b9\u88c5\u9970\u5668\u5b9e\u73b0\uff0c\u8be5\u88c5\u9970\u5668\u5f3a\u5236\u8981\u6c42\u4f20\u5165\u7684\u8bf7\u6c42\u5305\u542b\u6240\u9700\u7684\u8eab\u4efd\u9a8c\u8bc1\u4f5c\u7528\u57df\u3002</p> <pre><code>from starlette.authentication import requires\n\n\n@requires('authenticated')\nasync def dashboard(request):\n    ...\n</code></pre> <p>\u60a8\u53ef\u4ee5\u5305\u542b\u4e00\u4e2a\u6216\u591a\u4e2a\u6240\u9700\u7684\u4f5c\u7528\u57df\uff1a</p> <pre><code>from starlette.authentication import requires\n\n\n@requires(['authenticated', 'admin'])\nasync def dashboard(request):\n    ...\n</code></pre> <p>\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u5f53\u6743\u9650\u672a\u88ab\u6388\u4e88\u65f6\uff0c\u5c06\u8fd4\u56de 403 \u54cd\u5e94\u3002\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u60a8\u53ef\u80fd\u5e0c\u671b\u81ea\u5b9a\u4e49\u8fd9\u4e00\u884c\u4e3a\uff0c\u4f8b\u5982\uff0c\u5411\u672a\u8ba4\u8bc1\u7684\u7528\u6237\u9690\u85cf\u6709\u5173 URL \u5e03\u5c40\u7684\u4fe1\u606f\u3002</p> <pre><code>from starlette.authentication import requires\n\n\n@requires(['authenticated', 'admin'], status_code=404)\nasync def dashboard(request):\n    ...\n</code></pre> <p>\u6ce8\u610f</p> <p><code>status_code</code> \u53c2\u6570\u5728 WebSocket \u4e2d\u4e0d\u88ab\u652f\u6301\uff0c\u5bf9\u4e8e WebSocket\uff0c\u59cb\u7ec8\u4f1a\u4f7f\u7528 403\uff08\u7981\u6b62\uff09\u72b6\u6001\u7801\u3002</p> <p>\u53e6\u5916\uff0c\u60a8\u53ef\u80fd\u5e0c\u671b\u5c06\u672a\u8ba4\u8bc1\u7684\u7528\u6237\u91cd\u5b9a\u5411\u5230\u5176\u4ed6\u9875\u9762\u3002</p> <pre><code>from starlette.authentication import requires\n\n\nasync def homepage(request):\n    ...\n\n\n@requires('authenticated', redirect='homepage')\nasync def dashboard(request):\n    ...\n</code></pre> <p>\u5728\u91cd\u5b9a\u5411\u7528\u6237\u65f6\uff0c\u60a8\u91cd\u5b9a\u5411\u7684\u9875\u9762\u5c06\u5305\u542b\u7528\u6237\u6700\u521d\u8bf7\u6c42\u7684 URL\uff0c\u4f5c\u4e3a <code>next</code> \u67e5\u8be2\u53c2\u6570\uff1a</p> <pre><code>from starlette.authentication import requires\nfrom starlette.responses import RedirectResponse\n\n\n@requires('authenticated', redirect='login')\nasync def admin(request):\n    ...\n\n\nasync def login(request):\n    if request.method == \"POST\":\n        # \u73b0\u5728\u7528\u6237\u5df2\u8ba4\u8bc1\uff0c\n        # \u6211\u4eec\u53ef\u4ee5\u5c06\u4ed6\u4eec\u91cd\u5b9a\u5411\u5230\u539f\u59cb\u8bf7\u6c42\u7684\u76ee\u6807\n        if request.user.is_authenticated:\n            next_url = request.query_params.get(\"next\")\n            if next_url:\n                return RedirectResponse(next_url)\n            return RedirectResponse(\"/\")\n</code></pre> <p>\u5bf9\u4e8e\u57fa\u4e8e\u7c7b\u7684\u7aef\u70b9\uff0c\u60a8\u5e94\u8be5\u5c06\u88c5\u9970\u5668\u5e94\u7528\u4e8e\u7c7b\u4e2d\u7684\u65b9\u6cd5\u3002</p> <pre><code>from starlette.authentication import requires\nfrom starlette.endpoints import HTTPEndpoint\n\n\nclass Dashboard(HTTPEndpoint):\n    @requires(\"authenticated\")\n    async def get(self, request):\n        ...\n</code></pre>"},{"location":"authentication/#_3","title":"\u81ea\u5b9a\u4e49\u8eab\u4efd\u9a8c\u8bc1\u9519\u8bef\u54cd\u5e94","text":"<p>\u5f53\u8eab\u4efd\u9a8c\u8bc1\u540e\u7aef\u5f15\u53d1 <code>AuthenticationError</code> \u65f6\uff0c\u60a8\u53ef\u4ee5\u81ea\u5b9a\u4e49\u53d1\u9001\u7684\u9519\u8bef\u54cd\u5e94\uff1a</p> <pre><code>from starlette.applications import Starlette\nfrom starlette.middleware import Middleware\nfrom starlette.middleware.authentication import AuthenticationMiddleware\nfrom starlette.requests import Request\nfrom starlette.responses import JSONResponse\n\n\ndef on_auth_error(request: Request, exc: Exception):\n    return JSONResponse({\"error\": str(exc)}, status_code=401)\n\napp = Starlette(\n    middleware=[\n        Middleware(AuthenticationMiddleware, backend=BasicAuthBackend(), on_error=on_auth_error),\n    ],\n)\n</code></pre>"},{"location":"background/","title":"\u540e\u53f0\u4efb\u52a1","text":"<p>Starlette \u5305\u542b\u4e00\u4e2a <code>BackgroundTask</code> \u7c7b\uff0c\u7528\u4e8e\u5904\u7406\u8fdb\u7a0b\u5185\u7684\u540e\u53f0\u4efb\u52a1\u3002</p> <p>\u540e\u53f0\u4efb\u52a1\u5e94\u9644\u52a0\u5230\u54cd\u5e94\u4e0a\uff0c\u53ea\u6709\u5728\u54cd\u5e94\u53d1\u9001\u540e\uff0c\u540e\u53f0\u4efb\u52a1\u624d\u4f1a\u8fd0\u884c\u3002</p>"},{"location":"background/#_1","title":"\u540e\u53f0\u4efb\u52a1","text":"<p>\u7528\u4e8e\u5411\u54cd\u5e94\u6dfb\u52a0\u4e00\u4e2a\u540e\u53f0\u4efb\u52a1\u3002</p> <p>\u7b7e\u540d\uff1a<code>BackgroundTask(func, *args, **kwargs)</code></p> <pre><code>from starlette.applications import Starlette\nfrom starlette.responses import JSONResponse\nfrom starlette.routing import Route\nfrom starlette.background import BackgroundTask\n\n\n...\n\nasync def signup(request):\n    data = await request.json()\n    username = data['username']\n    email = data['email']\n    task = BackgroundTask(send_welcome_email, to_address=email)\n    message = {'status': 'Signup successful'}\n    return JSONResponse(message, background=task)\n\nasync def send_welcome_email(to_address):\n    ...\n\n\nroutes = [\n    ...\n    Route('/user/signup', endpoint=signup, methods=['POST'])\n]\n\napp = Starlette(routes=routes)\n</code></pre>"},{"location":"background/#_2","title":"\u540e\u53f0\u4efb\u52a1\u5217\u8868","text":"<p>\u7528\u4e8e\u5411\u54cd\u5e94\u6dfb\u52a0\u591a\u4e2a\u540e\u53f0\u4efb\u52a1\u3002</p> <p>\u7b7e\u540d\uff1a<code>BackgroundTasks(tasks=[])</code></p> <pre><code>from starlette.applications import Starlette\nfrom starlette.responses import JSONResponse\nfrom starlette.background import BackgroundTasks\n\nasync def signup(request):\n    data = await request.json()\n    username = data['username']\n    email = data['email']\n    tasks = BackgroundTasks()\n    tasks.add_task(send_welcome_email, to_address=email)\n    tasks.add_task(send_admin_notification, username=username)\n    message = {'status': 'Signup successful'}\n    return JSONResponse(message, background=tasks)\n\nasync def send_welcome_email(to_address):\n    ...\n\nasync def send_admin_notification(username):\n    ...\n\nroutes = [\n    Route('/user/signup', endpoint=signup, methods=['POST'])\n]\n\napp = Starlette(routes=routes)\n</code></pre> <p>Important</p> <p>\u4efb\u52a1\u6309\u987a\u5e8f\u6267\u884c\u3002\u5982\u679c\u5176\u4e2d\u4e00\u4e2a\u4efb\u52a1\u5f15\u53d1\u5f02\u5e38\uff0c\u540e\u7eed\u7684\u4efb\u52a1\u5c06\u65e0\u6cd5\u6267\u884c\u3002</p>"},{"location":"config/","title":"\u914d\u7f6e","text":"<p>Starlette \u9f13\u52b1\u5c06\u914d\u7f6e\u4e0e\u4ee3\u7801\u4e25\u683c\u5206\u79bb\uff0c\u9075\u5faa \u5341\u4e8c\u56e0\u7d20\u5e94\u7528\u6a21\u5f0f.</p> <p>\u914d\u7f6e\u5e94\u5b58\u50a8\u5728\u73af\u5883\u53d8\u91cf\u4e2d\uff0c\u6216\u8005\u5728\u4e00\u4e2a\u4e0d\u63d0\u4ea4\u5230\u6e90\u4ee3\u7801\u7ba1\u7406\u7684 <code>.env</code> \u6587\u4ef6\u4e2d\u3002</p> main.py<pre><code>from sqlalchemy import create_engine\nfrom starlette.applications import Starlette\nfrom starlette.config import Config\nfrom starlette.datastructures import CommaSeparatedStrings, Secret\n\n# \u914d\u7f6e\u5c06\u4ece\u73af\u5883\u53d8\u91cf\u548c/\u6216 \".env\" \u6587\u4ef6\u4e2d\u8bfb\u53d6\u3002\nconfig = Config(\".env\")\n\nDEBUG = config('DEBUG', cast=bool, default=False)\nDATABASE_URL = config('DATABASE_URL')\nSECRET_KEY = config('SECRET_KEY', cast=Secret)\nALLOWED_HOSTS = config('ALLOWED_HOSTS', cast=CommaSeparatedStrings)\n\napp = Starlette(debug=DEBUG)\nengine = create_engine(DATABASE_URL)\n...\n</code></pre> .env<pre><code># \u8bf7\u4e0d\u8981\u5c06\u6b64\u6587\u4ef6\u63d0\u4ea4\u5230\u6e90\u4ee3\u7801\u7ba1\u7406\u4e2d\u3002\n# \u4f8b\u5982\uff0c\u5c06 \".env\" \u5305\u542b\u5728 `.gitignore` \u6587\u4ef6\u4e2d\u3002\nDEBUG=True\nDATABASE_URL=postgresql://user:password@localhost:5432/database\nSECRET_KEY=43n080musdfjt54t-09sdgr\nALLOWED_HOSTS=127.0.0.1, localhost\n</code></pre>"},{"location":"config/#_1","title":"\u914d\u7f6e\u4f18\u5148\u7ea7","text":"<p>\u914d\u7f6e\u503c\u8bfb\u53d6\u7684\u987a\u5e8f\u5982\u4e0b\uff1a</p> <ul> <li>\u4ece\u73af\u5883\u53d8\u91cf\u4e2d\u8bfb\u53d6\u3002</li> <li>\u4ece <code>.env</code> \u6587\u4ef6\u4e2d\u8bfb\u53d6\u3002</li> <li>\u4ece <code>config</code> \u4e2d\u7ed9\u51fa\u7684\u9ed8\u8ba4\u503c\u8bfb\u53d6\u3002</li> </ul> <p>\u5982\u679c\u8fd9\u4e9b\u90fd\u6ca1\u6709\u5339\u914d\u5230\uff0c<code>config(...)</code> \u4f1a\u5f15\u53d1\u9519\u8bef\u3002</p>"},{"location":"config/#_2","title":"\u79d8\u5bc6","text":"<p>\u5bf9\u4e8e\u654f\u611f\u5bc6\u94a5\uff0c<code>Secret</code> \u7c7b\u975e\u5e38\u6709\u7528\uff0c\u56e0\u4e3a\u5b83\u6709\u52a9\u4e8e\u51cf\u5c11\u503c\u5728\u56de\u6eaf\u6216\u5176\u4ed6\u4ee3\u7801 introspection \u65f6\u6cc4\u6f0f\u7684\u673a\u4f1a\u3002</p> <p>\u8981\u83b7\u53d6 <code>Secret</code> \u5b9e\u4f8b\u7684\u503c\uff0c\u60a8\u5fc5\u987b\u663e\u5f0f\u5c06\u5176\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\u3002\u5e94\u8be5\u4ec5\u5728\u4f7f\u7528\u8be5\u503c\u7684\u5730\u65b9\u8fdb\u884c\u8f6c\u6362\u3002</p> <pre><code>&gt;&gt;&gt; from myproject import settings\n&gt;&gt;&gt; settings.SECRET_KEY\nSecret('**********')\n&gt;&gt;&gt; str(settings.SECRET_KEY)\n'98n349$%8b8-7yjn0n8y93T$23r'\n</code></pre> <p>\u63d0\u793a</p> <p>\u60a8\u53ef\u4ee5\u4f7f\u7528 <code>databases</code> \u5305\u4e2d\u7684 <code>DatabaseURL</code> \u8fd9\u91cc \u6765\u5b58\u50a8\u6570\u636e\u5e93 URL\uff0c\u5e76\u907f\u514d\u5b83\u4eec\u5728\u65e5\u5fd7\u4e2d\u6cc4\u6f0f\u3002</p>"},{"location":"config/#commaseparatedstrings","title":"CommaSeparatedStrings","text":"<p>\u5bf9\u4e8e\u5728\u5355\u4e2a\u914d\u7f6e\u952e\u4e2d\u5b58\u50a8\u591a\u4e2a\u503c\uff0c<code>CommaSeparatedStrings</code> \u7c7b\u578b\u975e\u5e38\u6709\u7528\u3002</p> <pre><code>&gt;&gt;&gt; from myproject import settings\n&gt;&gt;&gt; print(settings.ALLOWED_HOSTS)\nCommaSeparatedStrings(['127.0.0.1', 'localhost'])\n&gt;&gt;&gt; print(list(settings.ALLOWED_HOSTS))\n['127.0.0.1', 'localhost']\n&gt;&gt;&gt; print(len(settings.ALLOWED_HOSTS))\n2\n&gt;&gt;&gt; print(settings.ALLOWED_HOSTS[0])\n'127.0.0.1'\n</code></pre>"},{"location":"config/#_3","title":"\u8bfb\u53d6\u6216\u4fee\u6539\u73af\u5883\u53d8\u91cf","text":"<p>\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u60a8\u53ef\u80fd\u9700\u8981\u4ee5\u7f16\u7a0b\u65b9\u5f0f\u8bfb\u53d6\u6216\u4fee\u6539\u73af\u5883\u53d8\u91cf\u3002\u8fd9\u5728\u6d4b\u8bd5\u4e2d\u5c24\u5176\u6709\u7528\uff0c\u60a8\u53ef\u80fd\u5e0c\u671b\u8986\u76d6\u73af\u5883\u4e2d\u7684\u67d0\u4e9b\u952e\u3002</p> <p>\u4e0e\u5176\u76f4\u63a5\u4ece <code>os.environ</code> \u8bfb\u53d6\u6216\u5199\u5165\uff0c\u60a8\u5e94\u4f7f\u7528 Starlette \u7684 <code>environ</code> \u5b9e\u4f8b\u3002\u8fd9\u4e2a\u5b9e\u4f8b\u662f\u5bf9\u6807\u51c6 <code>os.environ</code> \u7684\u6620\u5c04\uff0c\u5b83\u901a\u8fc7\u5728\u8bfb\u53d6\u914d\u7f6e\u540e\u5982\u679c\u6709\u4efb\u4f55\u73af\u5883\u53d8\u91cf\u88ab\u8bbe\u7f6e\u65f6\u629b\u51fa\u9519\u8bef\uff0c\u989d\u5916\u4e3a\u60a8\u63d0\u4f9b\u4fdd\u62a4\u3002</p> <p>\u5982\u679c\u60a8\u6b63\u5728\u4f7f\u7528 <code>pytest</code>\uff0c\u5219\u53ef\u4ee5\u5728 <code>tests/conftest.py</code> \u4e2d\u8bbe\u7f6e\u4efb\u4f55\u521d\u59cb\u73af\u5883\u3002</p> tests/conftest.py<pre><code>from starlette.config import environ\n\nenviron['DEBUG'] = 'TRUE'\n</code></pre>"},{"location":"config/#_4","title":"\u8bfb\u53d6\u5e26\u524d\u7f00\u7684\u73af\u5883\u53d8\u91cf","text":"<p>\u60a8\u53ef\u4ee5\u901a\u8fc7\u8bbe\u7f6e <code>env_prefix</code> \u53c2\u6570\u6765\u4e3a\u73af\u5883\u53d8\u91cf\u6307\u5b9a\u547d\u540d\u7a7a\u95f4\u3002</p> myproject/settings.py<pre><code>import os\n\nfrom starlette.config import Config\n\nos.environ['APP_DEBUG'] = 'yes'\nos.environ['ENVIRONMENT'] = 'dev'\n\nconfig = Config(env_prefix='APP_')\n\nDEBUG = config('DEBUG')  # \u67e5\u627e APP_DEBUG\uff0c\u8fd4\u56de \"yes\"\nENVIRONMENT = config('ENVIRONMENT')  # \u67e5\u627e APP_ENVIRONMENT\uff0c\u629b\u51fa KeyError\uff0c\u56e0\u4e3a\u53d8\u91cf\u672a\u5b9a\u4e49\n</code></pre>"},{"location":"config/#_5","title":"\u5b8c\u6574\u793a\u4f8b","text":"<p>\u6784\u5efa\u5927\u578b\u5e94\u7528\u7a0b\u5e8f\u53ef\u80fd\u5f88\u590d\u6742\u3002\u60a8\u9700\u8981\u9002\u5f53\u5206\u79bb\u914d\u7f6e\u548c\u4ee3\u7801\u3001\u5728\u6d4b\u8bd5\u671f\u95f4\u8fdb\u884c\u6570\u636e\u5e93\u9694\u79bb\u3001\u5206\u5f00\u6d4b\u8bd5\u548c\u751f\u4ea7\u6570\u636e\u5e93\u7b49...</p> <p>\u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u5c06\u5c55\u793a\u4e00\u4e2a\u5b8c\u6574\u7684\u793a\u4f8b\uff0c\u6f14\u793a\u5982\u4f55\u5f00\u59cb\u6784\u5efa\u5e94\u7528\u7a0b\u5e8f\u7684\u7ed3\u6784\u3002</p> <p>\u9996\u5148\uff0c\u8ba9\u6211\u4eec\u5c06\u8bbe\u7f6e\u3001\u6570\u636e\u5e93\u8868\u5b9a\u4e49\u548c\u5e94\u7528\u7a0b\u5e8f\u903b\u8f91\u5206\u5f00\uff1a</p> myproject/settings.py<pre><code>from starlette.config import Config\nfrom starlette.datastructures import Secret\n\nconfig = Config(\".env\")\n\nDEBUG = config('DEBUG', cast=bool, default=False)\nSECRET_KEY = config('SECRET_KEY', cast=Secret)\n\nDATABASE_URL = config('DATABASE_URL')\n</code></pre> myproject/tables.py<pre><code>import sqlalchemy\n\n# \u6570\u636e\u5e93\u8868\u5b9a\u4e49\nmetadata = sqlalchemy.MetaData()\n\norganisations = sqlalchemy.Table(\n    ...\n)\n</code></pre> myproject/app.py<pre><code>from starlette.applications import Starlette\nfrom starlette.middleware import Middleware\nfrom starlette.middleware.sessions import SessionMiddleware\nfrom starlette.routing import Route\n\nfrom myproject import settings\n\n\nasync def homepage(request):\n    ...\n\nroutes = [\n    Route(\"/\", endpoint=homepage)\n]\n\nmiddleware = [\n    Middleware(\n        SessionMiddleware,\n        secret_key=settings.SECRET_KEY,\n    )\n]\n\napp = Starlette(debug=settings.DEBUG, routes=routes, middleware=middleware)\n</code></pre> <p>\u63a5\u4e0b\u6765\u5904\u7406\u6211\u4eec\u7684\u6d4b\u8bd5\u914d\u7f6e\u3002 \u6211\u4eec\u5e0c\u671b\u5728\u6bcf\u6b21\u8fd0\u884c\u6d4b\u8bd5\u5957\u4ef6\u65f6\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u6d4b\u8bd5\u6570\u636e\u5e93\uff0c\u5e76\u5728\u6d4b\u8bd5\u5b8c\u6210\u540e\u5220\u9664\u5b83\u3002\u6211\u4eec\u8fd8\u5e0c\u671b\u786e\u4fdd\uff1a</p> tests/conftest.py<pre><code>from starlette.config import environ\nfrom starlette.testclient import TestClient\nfrom sqlalchemy import create_engine\nfrom sqlalchemy_utils import create_database, database_exists, drop_database\n\n# \u5982\u679c\u5728\u5bfc\u5165 'settings' \u540e\u4f7f\u7528\u8fd9\u884c\u4ee3\u7801\uff0c\u5b83\u5c06\u629b\u51fa\u9519\u8bef\u3002\nenviron['DEBUG'] = 'TRUE'\n\nfrom myproject import settings\nfrom myproject.app import app\nfrom myproject.tables import metadata\n\n\n@pytest.fixture(autouse=True, scope=\"session\")\ndef setup_test_database():\n    \"\"\"\n    \u6bcf\u6b21\u8fd0\u884c\u6d4b\u8bd5\u65f6\u521b\u5efa\u4e00\u4e2a\u5e72\u51c0\u7684\u6d4b\u8bd5\u6570\u636e\u5e93\u3002\n    \"\"\"\n    url = settings.DATABASE_URL\n    engine = create_engine(url)\n    assert not database_exists(url), '\u6d4b\u8bd5\u6570\u636e\u5e93\u5df2\u7ecf\u5b58\u5728\uff0c\u7ec8\u6b62\u6d4b\u8bd5\u3002'\n    create_database(url)             # \u521b\u5efa\u6d4b\u8bd5\u6570\u636e\u5e93\u3002\n    metadata.create_all(engine)      # \u521b\u5efa\u8868\u3002\n    yield                            # \u8fd0\u884c\u6d4b\u8bd5\u3002\n    drop_database(url)               # \u5220\u9664\u6d4b\u8bd5\u6570\u636e\u5e93\u3002\n\n\n@pytest.fixture()\ndef client():\n    \"\"\"\n    \u4e3a\u6d4b\u8bd5\u7528\u4f8b\u63d0\u4f9b\u4e00\u4e2a 'client' \u56fa\u5b9a\u88c5\u7f6e\u3002\n    \"\"\"\n    # \u6211\u4eec\u7684\u56fa\u5b9a\u88c5\u7f6e\u5728\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u5185\u521b\u5efa\u3002\u8fd9\u786e\u4fdd\u4e86\n    # \u5e94\u7528\u7a0b\u5e8f\u7684\u751f\u547d\u5468\u671f\u5728\u6bcf\u4e2a\u6d4b\u8bd5\u7528\u4f8b\u4e2d\u90fd\u4f1a\u8fd0\u884c\u3002\n    with TestClient(app) as test_client:\n        yield test_client\n</code></pre>"},{"location":"contributing/","title":"\u8d21\u732e\u6307\u5357","text":"<p>\u611f\u8c22\u60a8\u5bf9\u53c2\u4e0e Starlette \u5f00\u53d1\u7684\u5174\u8da3\uff01 \u4ee5\u4e0b\u662f\u60a8\u53ef\u4ee5\u4e3a\u8be5\u9879\u76ee\u8d21\u732e\u7684\u591a\u79cd\u65b9\u5f0f\uff1a</p> <ul> <li>\u5c1d\u8bd5\u4f7f\u7528 Starlette\uff0c\u5e76\u62a5\u544a\u60a8\u53d1\u73b0\u7684\u9519\u8bef/\u95ee\u9898</li> <li>\u5b9e\u73b0\u65b0\u529f\u80fd</li> <li>\u5ba1\u67e5\u4ed6\u4eba\u7684\u62c9\u53d6\u8bf7\u6c42 (Pull Requests)</li> <li>\u7f16\u5199\u6587\u6863</li> <li>\u53c2\u4e0e\u8ba8\u8bba</li> </ul>"},{"location":"contributing/#_2","title":"\u62a5\u544a\u9519\u8bef\u6216\u5176\u4ed6\u95ee\u9898","text":"<p>\u53d1\u73b0 Starlette \u5e94\u8be5\u652f\u6301\u7684\u529f\u80fd\uff1f \u9047\u5230\u4e86\u4e00\u4e9b\u610f\u5916\u7684\u884c\u4e3a\uff1f  </p> <p>\u8d21\u732e\u901a\u5e38\u5e94\u4ece\u8ba8\u8bba\u5f00\u59cb\u3002 \u53ef\u80fd\u7684\u9519\u8bef\u53ef\u4ee5\u4f5c\u4e3a\u201c\u6f5c\u5728\u95ee\u9898\u201d\u8ba8\u8bba\u63d0\u51fa\uff0c\u529f\u80fd\u8bf7\u6c42\u53ef\u4ee5\u4f5c\u4e3a\u201c\u521b\u610f\u201d\u8ba8\u8bba\u63d0\u51fa\u3002\u4e4b\u540e\uff0c\u6211\u4eec\u5c06\u5224\u65ad\u662f\u5426\u9700\u8981\u5c06\u8ba8\u8bba\u5347\u7ea7\u4e3a\u201c\u95ee\u9898\u201d\uff0c\u6216\u8005\u662f\u5426\u8003\u8651\u76f4\u63a5\u63d0\u4ea4\u62c9\u53d6\u8bf7\u6c42\u3002</p> <p>\u8bf7\u5c3d\u91cf\u8be6\u7ec6\u63cf\u8ff0\u95ee\u9898\u3002\u5982\u679c\u662f\u9519\u8bef\u62a5\u544a\uff0c\u8bf7\u63d0\u4f9b\u5c3d\u53ef\u80fd\u591a\u7684\u4fe1\u606f\uff0c\u4f8b\u5982\uff1a</p> <ul> <li>\u64cd\u4f5c\u7cfb\u7edf\u5e73\u53f0</li> <li>Python \u7248\u672c</li> <li>\u5b89\u88c5\u7684\u4f9d\u8d56\u5305\u53ca\u7248\u672c\uff08\u4f7f\u7528 <code>python -m pip freeze</code> \u547d\u4ee4\uff09</li> <li>\u76f8\u5173\u4ee3\u7801\u7247\u6bb5</li> <li>\u9519\u8bef\u56de\u6eaf\u4fe1\u606f</li> </ul> <p>\u8bf7\u52a1\u5fc5\u5c3d\u91cf\u7b80\u5316\u793a\u4f8b\u4ee3\u7801\uff0c\u4ec5\u4fdd\u7559\u6700\u5c0f\u53ef\u590d\u73b0\u95ee\u9898\u7684\u90e8\u5206\u3002</p>"},{"location":"contributing/#_3","title":"\u5f00\u53d1","text":"<p>\u8981\u5f00\u59cb\u5f00\u53d1 Starlette\uff0c\u8bf7\u5148\u5728 GitHub \u4e0a\u521b\u5efa\u4e00\u4e2a\u5206\u53c9 (fork)\uff0c\u6e90\u4ed3\u5e93\u5730\u5740\u4e3a\uff1aStarlette \u4ed3\u5e93\u3002  </p> <p>\u7136\u540e\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u514b\u9686\u60a8\u7684\u5206\u53c9\u7248\u672c\uff08\u5c06 <code>YOUR-USERNAME</code> \u66ff\u6362\u4e3a\u60a8\u7684 GitHub \u7528\u6237\u540d\uff09\uff1a</p> <pre><code>$ git clone https://github.com/YOUR-USERNAME/starlette\n</code></pre> <p>\u514b\u9686\u5b8c\u6210\u540e\uff0c\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u5b89\u88c5\u9879\u76ee\u53ca\u5176\u4f9d\u8d56\uff1a</p> <pre><code>$ cd starlette\n$ scripts/install\n</code></pre>"},{"location":"contributing/#_4","title":"\u6d4b\u8bd5\u4e0e\u4ee3\u7801\u68c0\u67e5","text":"<p>\u6211\u4eec\u4f7f\u7528\u81ea\u5b9a\u4e49\u7684 shell \u811a\u672c\u6765\u81ea\u52a8\u5316\u6d4b\u8bd5\u3001\u4ee3\u7801\u68c0\u67e5\u548c\u6587\u6863\u751f\u6210\u6d41\u7a0b\u3002</p> <p>\u8fd0\u884c\u6d4b\u8bd5\u7528\u4f8b\u7684\u547d\u4ee4\u4e3a\uff1a</p> <pre><code>$ scripts/test\n</code></pre> <p>\u4efb\u4f55\u989d\u5916\u7684\u53c2\u6570\u90fd\u4f1a\u4f20\u9012\u7ed9 <code>pytest</code>\u3002\u6709\u5173\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u8003 pytest \u6587\u6863\u3002</p> <p>\u4f8b\u5982\uff0c\u8fd0\u884c\u5355\u4e2a\u6d4b\u8bd5\u811a\u672c\uff1a</p> <pre><code>$ scripts/test tests/test_application.py\n</code></pre> <p>\u8fd0\u884c\u4ee3\u7801\u81ea\u52a8\u683c\u5f0f\u5316\uff1a</p> <pre><code>$ scripts/lint\n</code></pre> <p>\u5982\u679c\u60f3\u5355\u72ec\u8fd0\u884c\u4ee3\u7801\u68c0\u67e5\uff08\u5b83\u4eec\u4e5f\u4f1a\u4f5c\u4e3a <code>scripts/test</code> \u7684\u4e00\u90e8\u5206\u6267\u884c\uff09\uff0c\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\uff1a</p> <pre><code>$ scripts/check\n</code></pre>"},{"location":"contributing/#_5","title":"\u6587\u6863\u7f16\u5199","text":"<p>\u6587\u6863\u9875\u9762\u4f4d\u4e8e <code>docs/</code> \u6587\u4ef6\u5939\u4e0b\u3002</p> <p>\u5982\u679c\u9700\u8981\u672c\u5730\u8fd0\u884c\u6587\u6863\u7f51\u7ad9\uff08\u4fbf\u4e8e\u9884\u89c8\u4fee\u6539\u5185\u5bb9\uff09\uff0c\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\uff1a</p> <pre><code>$ scripts/docs\n</code></pre>"},{"location":"contributing/#ci","title":"\u89e3\u51b3\u6784\u5efa/CI \u5931\u8d25","text":"<p>\u63d0\u4ea4\u62c9\u53d6\u8bf7\u6c42\u540e\uff0c\u6d4b\u8bd5\u5957\u4ef6\u4f1a\u81ea\u52a8\u8fd0\u884c\uff0c\u5176\u7ed3\u679c\u5c06\u5728 GitHub \u4e0a\u663e\u793a\u3002 \u5982\u679c\u6d4b\u8bd5\u5957\u4ef6\u5931\u8d25\uff0c\u70b9\u51fb\u201cDetails\u201d\u94fe\u63a5\uff0c\u5c1d\u8bd5\u5b9a\u4f4d\u5931\u8d25\u539f\u56e0\u3002</p> <p> </p> <p>\u4ee5\u4e0b\u662f\u4e00\u4e9b\u5e38\u89c1\u7684\u6d4b\u8bd5\u5931\u8d25\u60c5\u51b5\uff1a</p>"},{"location":"contributing/#_6","title":"\u68c0\u67e5\u4efb\u52a1\u5931\u8d25","text":"<p>\u5982\u679c\u6b64\u4efb\u52a1\u5931\u8d25\uff0c\u8868\u793a\u5b58\u5728\u4ee3\u7801\u683c\u5f0f\u95ee\u9898\u6216\u7c7b\u578b\u6ce8\u89e3\u95ee\u9898\u3002 \u53ef\u4ee5\u901a\u8fc7\u4efb\u52a1\u8f93\u51fa\u65e5\u5fd7\u67e5\u770b\u5931\u8d25\u539f\u56e0\uff0c\u6216\u8005\u5728\u7ec8\u7aef\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\u68c0\u67e5\u95ee\u9898\uff1a</p> <pre><code>$ scripts/check\n</code></pre> <p>\u5efa\u8bae\u8fd0\u884c <code>$ scripts/lint</code> \u5c1d\u8bd5\u81ea\u52a8\u683c\u5f0f\u5316\u4ee3\u7801\u3002\u5982\u679c\u683c\u5f0f\u5316\u6210\u529f\uff0c\u5219\u63d0\u4ea4\u76f8\u5173\u66f4\u6539\u3002</p>"},{"location":"contributing/#_7","title":"\u6587\u6863\u4efb\u52a1\u5931\u8d25","text":"<p>\u5982\u679c\u6b64\u4efb\u52a1\u5931\u8d25\uff0c\u8868\u793a\u6587\u6863\u672a\u80fd\u6210\u529f\u751f\u6210\u3002\u8fd9\u53ef\u80fd\u662f\u56e0\u4e3a\u65e0\u6548\u7684 Markdown \u6216 <code>mkdocs.yml</code> \u914d\u7f6e\u7f3a\u5931\u7b49\u539f\u56e0\u3002</p>"},{"location":"contributing/#python-3x","title":"Python 3.X \u4efb\u52a1\u5931\u8d25","text":"<p>\u5982\u679c\u6b64\u4efb\u52a1\u5931\u8d25\uff0c\u53ef\u80fd\u662f\u5355\u5143\u6d4b\u8bd5\u672a\u901a\u8fc7\uff0c\u6216\u8005\u672a\u8986\u76d6\u6240\u6709\u4ee3\u7801\u8def\u5f84\u3002</p> <ul> <li> <p>\u5982\u679c\u6d4b\u8bd5\u5931\u8d25\uff0c\u8986\u76d6\u7387\u62a5\u544a\u4e2d\u4f1a\u663e\u793a\u4ee5\u4e0b\u4fe1\u606f\uff1a</p> <p><code>=== 1 failed, 435 passed, 1 skipped, 1 xfailed in 11.09s ===</code></p> </li> <li> <p>\u5982\u679c\u6d4b\u8bd5\u901a\u8fc7\u4f46\u8986\u76d6\u7387\u672a\u8fbe\u5230\u8981\u6c42\u7684\u9608\u503c\uff0c\u62a5\u544a\u4e2d\u4f1a\u663e\u793a\uff1a</p> <p><code>FAIL Required test coverage of 100% not reached. Total coverage: 99.00%</code></p> </li> </ul>"},{"location":"contributing/#_8","title":"\u53d1\u5e03\u7248\u672c","text":"<p>\u6b64\u90e8\u5206\u4ec5\u9002\u7528\u4e8e Starlette \u7ef4\u62a4\u8005\u3002</p> <p>\u53d1\u5e03\u65b0\u7248\u672c\u524d\uff0c\u8bf7\u521b\u5efa\u4e00\u4e2a\u5305\u542b\u4ee5\u4e0b\u5185\u5bb9\u7684\u62c9\u53d6\u8bf7\u6c42\uff1a</p> <ol> <li>\u66f4\u65b0\u53d8\u66f4\u65e5\u5fd7\uff1a<ul> <li>\u9075\u5faa keepachangelog \u683c\u5f0f\u3002</li> <li>\u4f7f\u7528 \u6bd4\u8f83\u5de5\u5177 \u5c06 <code>master</code> \u4e0e\u6700\u65b0\u53d1\u5e03\u7684\u6807\u7b7e\u8fdb\u884c\u5bf9\u6bd4\uff0c\u5217\u51fa\u7528\u6237\u611f\u5174\u8da3\u7684\u6240\u6709\u66f4\u6539\uff1a<ul> <li>\u5fc5\u987b\u5305\u542b\uff1a\u65b0\u589e\u3001\u66f4\u6539\u3001\u5f03\u7528\u6216\u79fb\u9664\u7684\u529f\u80fd\uff0c\u4ee5\u53ca\u9519\u8bef\u4fee\u590d\u3002</li> <li>\u4e0d\u5e94\u5305\u542b\uff1a\u6587\u6863\u3001\u6d4b\u8bd5\u6216\u5de5\u5177\u76f8\u5173\u7684\u66f4\u6539\u3002</li> <li>\u6309\u5f71\u54cd/\u91cd\u8981\u6027\u964d\u5e8f\u6392\u5e8f\u6761\u76ee\u3002</li> <li>\u5185\u5bb9\u7b80\u6d01\u660e\u4e86\uff0c\u76f4\u51fb\u91cd\u70b9 \ud83c\udfaf\u3002</li> </ul> </li> </ul> </li> <li> <p>\u7248\u672c\u53f7\u66f4\u65b0\uff1a\u4fee\u6539 <code>__version__.py</code> \u6587\u4ef6\u3002</p> <p>\u793a\u4f8b\u89c1 #1600\u3002</p> </li> </ol> <p>\u62c9\u53d6\u8bf7\u6c42\u5408\u5e76\u540e\uff0c\u521b\u5efa\u4e00\u4e2a \u65b0\u7248\u672c\u53d1\u5e03\uff0c\u5305\u62ec\uff1a</p> <ul> <li>\u6807\u7b7e\u7248\u672c\uff1a\u5982 <code>0.13.3</code></li> <li>\u53d1\u5e03\u6807\u9898\uff1a<code>Version 0.13.3</code></li> <li>\u4ece\u53d8\u66f4\u65e5\u5fd7\u590d\u5236\u7684\u63cf\u8ff0\u5185\u5bb9\u3002</li> </ul> <p>\u521b\u5efa\u540e\uff0c\u8be5\u7248\u672c\u4f1a\u81ea\u52a8\u4e0a\u4f20\u5230 PyPI\u3002</p> <p>\u5982\u679c PyPI \u53d1\u5e03\u4efb\u52a1\u5931\u8d25\uff0c\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u547d\u4ee4\u624b\u52a8\u53d1\u5e03\uff1a</p> <pre><code>$ scripts/publish\n</code></pre>"},{"location":"database/","title":"\u6570\u636e\u5e93","text":"<p>Starlette \u5e76\u4e0d\u4e25\u683c\u4f9d\u8d56\u4e8e\u4efb\u4f55\u7279\u5b9a\u7684\u6570\u636e\u5e93\u5b9e\u73b0\u3002</p> <p>\u60a8\u53ef\u4ee5\u5c06\u5b83\u4e0e\u5f02\u6b65 ORM\uff08\u4f8b\u5982 GINO\uff09\u4e00\u8d77\u4f7f\u7528\uff0c\u6216\u8005\u4f7f\u7528\u5e38\u89c4\u7684\u975e\u5f02\u6b65\u7aef\u70b9\uff0c\u5e76\u4e0e SQLAlchemy \u96c6\u6210\u3002</p> <p>\u5728\u672c\u6307\u5357\u4e2d\uff0c\u6211\u4eec\u5c06\u5c55\u793a\u5982\u4f55\u4e0e <code>databases</code> \u5305 \u96c6\u6210\uff0c<code>databases</code> \u5305\u63d0\u4f9b\u4e86 SQLAlchemy \u6838\u5fc3\u652f\u6301\uff0c\u80fd\u591f\u4e0e\u591a\u79cd\u4e0d\u540c\u7684\u6570\u636e\u5e93\u9a71\u52a8\u7a0b\u5e8f\u517c\u5bb9\u3002</p> <p>\u4ee5\u4e0b\u662f\u4e00\u4e2a\u5b8c\u6574\u7684\u793a\u4f8b\uff0c\u5305\u542b\u8868\u5b9a\u4e49\u3001\u914d\u7f6e <code>database.Database</code> \u5b9e\u4f8b\uff0c\u4ee5\u53ca\u4e0e\u6570\u636e\u5e93\u4ea4\u4e92\u7684\u51e0\u4e2a\u7aef\u70b9\u3002</p> <p>.env</p> <pre><code>DATABASE_URL=sqlite:///test.db\n</code></pre> <p>app.py</p> <pre><code>import contextlib\n\nimport databases\nimport sqlalchemy\nfrom starlette.applications import Starlette\nfrom starlette.config import Config\nfrom starlette.responses import JSONResponse\nfrom starlette.routing import Route\n\n\n# \u4ece\u73af\u5883\u53d8\u91cf\u6216 '.env' \u6587\u4ef6\u4e2d\u52a0\u8f7d\u914d\u7f6e\u3002\nconfig = Config('.env')\nDATABASE_URL = config('DATABASE_URL')\n\n\n# \u6570\u636e\u5e93\u8868\u5b9a\u4e49\u3002\nmetadata = sqlalchemy.MetaData()\n\nnotes = sqlalchemy.Table(\n    \"notes\",\n    metadata,\n    sqlalchemy.Column(\"id\", sqlalchemy.Integer, primary_key=True),\n    sqlalchemy.Column(\"text\", sqlalchemy.String),\n    sqlalchemy.Column(\"completed\", sqlalchemy.Boolean),\n)\n\ndatabase = databases.Database(DATABASE_URL)\n\n@contextlib.asynccontextmanager\nasync def lifespan(app):\n    await database.connect()\n    yield\n    await database.disconnect()\n\n# \u4e3b\u8981\u5e94\u7528\u4ee3\u7801\u3002\nasync def list_notes(request):\n    query = notes.select()\n    results = await database.fetch_all(query)\n    content = [\n        {\n            \"text\": result[\"text\"],\n            \"completed\": result[\"completed\"]\n        }\n        for result in results\n    ]\n    return JSONResponse(content)\n\nasync def add_note(request):\n    data = await request.json()\n    query = notes.insert().values(\n       text=data[\"text\"],\n       completed=data[\"completed\"]\n    )\n    await database.execute(query)\n    return JSONResponse({\n        \"text\": data[\"text\"],\n        \"completed\": data[\"completed\"]\n    })\n\nroutes = [\n    Route(\"/notes\", endpoint=list_notes, methods=[\"GET\"]),\n    Route(\"/notes\", endpoint=add_note, methods=[\"POST\"]),\n]\n\napp = Starlette(\n    routes=routes,\n    lifespan=lifespan,\n)\n</code></pre> <p>\u6700\u540e\uff0c\u60a8\u9700\u8981\u521b\u5efa\u6570\u636e\u5e93\u8868\u3002\u63a8\u8350\u4f7f\u7528 Alembic\uff0c\u5173\u4e8e\u5b83\u7684\u5185\u5bb9\u6211\u4eec\u4f1a\u5728 \u8fc1\u79fb \u90e8\u5206\u505a\u7b80\u8981\u4ecb\u7ecd\u3002</p>"},{"location":"database/#_1","title":"\u67e5\u8be2","text":"<p>\u67e5\u8be2\u53ef\u4ee5\u901a\u8fc7 SQLAlchemy Core \u67e5\u8be2 \u6765\u6267\u884c\u3002</p> <p>\u4ee5\u4e0b\u65b9\u6cd5\u53d7\u652f\u6301\uff1a</p> <ul> <li><code>rows = await database.fetch_all(query)</code></li> <li><code>row = await database.fetch_one(query)</code></li> <li><code>async for row in database.iterate(query)</code></li> <li><code>await database.execute(query)</code></li> <li><code>await database.execute_many(query)</code></li> </ul>"},{"location":"database/#_2","title":"\u4e8b\u52a1","text":"<p>\u6570\u636e\u5e93\u4e8b\u52a1\u53ef\u4ee5\u901a\u8fc7\u88c5\u9970\u5668\u3001\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u6216\u4f4e\u7ea7 API \u4f7f\u7528\u3002</p> <p>\u4f7f\u7528\u88c5\u9970\u5668\u5728\u7aef\u70b9\u4e0a\uff1a</p> <pre><code>@database.transaction()\nasync def populate_note(request):\n    # \u6b64\u6570\u636e\u5e93\u63d2\u5165\u64cd\u4f5c\u5728\u4e8b\u52a1\u4e2d\u6267\u884c\u3002\n    # \u5b83\u5c06\u88ab `RuntimeError` \u56de\u6eda\u3002\n    query = notes.insert().values(text=\"\u4f60\u770b\u4e0d\u5230\u6211\", completed=True)\n    await database.execute(query)\n    raise RuntimeError()\n</code></pre> <p>\u4f7f\u7528\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\uff1a</p> <pre><code>async def populate_note(request):\n    async with database.transaction():\n        # \u6b64\u6570\u636e\u5e93\u63d2\u5165\u64cd\u4f5c\u5728\u4e8b\u52a1\u4e2d\u6267\u884c\u3002\n        # \u5b83\u5c06\u88ab `RuntimeError` \u56de\u6eda\u3002\n        query = notes.insert().values(text=\"\u4f60\u770b\u4e0d\u5230\u6211\", completed=True)\n        await request.database.execute(query)\n        raise RuntimeError()\n</code></pre> <p>\u4f7f\u7528\u4f4e\u7ea7 API\uff1a</p> <pre><code>async def populate_note(request):\n    transaction = await database.transaction()\n    try:\n        # \u6b64\u6570\u636e\u5e93\u63d2\u5165\u64cd\u4f5c\u5728\u4e8b\u52a1\u4e2d\u6267\u884c\u3002\n        # \u5b83\u5c06\u88ab `RuntimeError` \u56de\u6eda\u3002\n        query = notes.insert().values(text=\"\u4f60\u770b\u4e0d\u5230\u6211\", completed=True)\n        await database.execute(query)\n        raise RuntimeError()\n    except:\n        await transaction.rollback()\n        raise\n    else:\n        await transaction.commit()\n</code></pre>"},{"location":"database/#_3","title":"\u6d4b\u8bd5\u9694\u79bb","text":"<p>\u5728\u5bf9\u4f7f\u7528\u6570\u636e\u5e93\u7684\u670d\u52a1\u8fdb\u884c\u6d4b\u8bd5\u65f6\uff0c\u6211\u4eec\u9700\u8981\u786e\u4fdd\u4e00\u4e9b\u4e8b\u9879\u3002\u6211\u4eec\u7684\u8981\u6c42\u5e94\u5f53\u662f\uff1a</p> <ul> <li>\u4f7f\u7528\u4e00\u4e2a\u72ec\u7acb\u7684\u6570\u636e\u5e93\u8fdb\u884c\u6d4b\u8bd5\u3002</li> <li>\u6bcf\u6b21\u8fd0\u884c\u6d4b\u8bd5\u65f6\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u6d4b\u8bd5\u6570\u636e\u5e93\u3002</li> <li>\u786e\u4fdd\u6bcf\u4e2a\u6d4b\u8bd5\u7528\u4f8b\u4e4b\u95f4\u6570\u636e\u5e93\u7684\u72b6\u6001\u662f\u9694\u79bb\u7684\u3002</li> </ul> <p>\u4ee5\u4e0b\u662f\u5982\u4f55\u7ec4\u7ec7\u5e94\u7528\u7a0b\u5e8f\u548c\u6d4b\u8bd5\uff0c\u4ee5\u6ee1\u8db3\u8fd9\u4e9b\u8981\u6c42\uff1a</p> <pre><code>from starlette.applications import Starlette\nfrom starlette.config import Config\nimport databases\n\nconfig = Config(\".env\")\n\nTESTING = config('TESTING', cast=bool, default=False)\nDATABASE_URL = config('DATABASE_URL', cast=databases.DatabaseURL)\nTEST_DATABASE_URL = DATABASE_URL.replace(database='test_' + DATABASE_URL.database)\n\n# \u5728\u6d4b\u8bd5\u671f\u95f4\u4f7f\u7528 'force_rollback'\uff0c\u786e\u4fdd\u5728\u6bcf\u4e2a\u6d4b\u8bd5\u7528\u4f8b\u4e4b\u95f4\u4e0d\u6301\u4e45\u5316\u6570\u636e\u5e93\u66f4\u6539\u3002\nif TESTING:\n    database = databases.Database(TEST_DATABASE_URL, force_rollback=True)\nelse:\n    database = databases.Database(DATABASE_URL)\n</code></pre> <p>\u6211\u4eec\u4ecd\u7136\u9700\u8981\u5728\u6d4b\u8bd5\u8fd0\u884c\u671f\u95f4\u8bbe\u7f6e <code>TESTING</code>\uff0c\u5e76\u8bbe\u7f6e\u6d4b\u8bd5\u6570\u636e\u5e93\u3002\u5047\u8bbe\u6211\u4eec\u4f7f\u7528 <code>py.test</code>\uff0c\u4ee5\u4e0b\u662f\u6211\u4eec\u7684 <code>conftest.py</code> \u53ef\u80fd\u7684\u7ed3\u6784\uff1a</p> <pre><code>import pytest\nfrom starlette.config import environ\nfrom starlette.testclient import TestClient\nfrom sqlalchemy import create_engine\nfrom sqlalchemy_utils import database_exists, create_database, drop_database\n\n# \u8fd9\u4f1a\u8bbe\u7f6e `os.environ`\uff0c\u4f46\u63d0\u4f9b\u4e86\u4e00\u4e9b\u989d\u5916\u7684\u4fdd\u62a4\u3002\n# \u5982\u679c\u6211\u4eec\u5c06\u5176\u653e\u5728\u5e94\u7528\u7a0b\u5e8f\u5bfc\u5165\u4e4b\u540e\uff0c\u5b83\u4f1a\u5f15\u53d1\u9519\u8bef\uff0c\n# \u63d0\u793a 'TESTING' \u5df2\u7ecf\u4ece\u73af\u5883\u4e2d\u8bfb\u53d6\u3002\nenviron['TESTING'] = 'True'\n\nimport app\n\n\n@pytest.fixture(scope=\"session\", autouse=True)\ndef create_test_database():\n  \"\"\"\n  \u6bcf\u4e2a\u6d4b\u8bd5\u7528\u4f8b\u521b\u5efa\u4e00\u4e2a\u5e72\u51c0\u7684\u6570\u636e\u5e93\u3002\n  \u4e3a\u4e86\u5b89\u5168\uff0c\u5982\u679c\u6570\u636e\u5e93\u5df2\u7ecf\u5b58\u5728\uff0c\u6211\u4eec\u5e94\u5f53\u4e2d\u6b62\u6d4b\u8bd5\u3002\n\n  \u6211\u4eec\u5728\u8fd9\u91cc\u4f7f\u7528 `sqlalchemy_utils` \u5305\uff0c\u63d0\u4f9b\u4e00\u4e9b\u5e2e\u52a9\u51fd\u6570\n  \u6765\u4e00\u81f4\u5730\u521b\u5efa\u548c\u5220\u9664\u6570\u636e\u5e93\u3002\n  \"\"\"\n  url = str(app.TEST_DATABASE_URL)\n  engine = create_engine(url)\n  assert not database_exists(url), '\u6d4b\u8bd5\u6570\u636e\u5e93\u5df2\u7ecf\u5b58\u5728\uff0c\u6b63\u5728\u4e2d\u6b62\u6d4b\u8bd5\u3002'\n  create_database(url)             # \u521b\u5efa\u6d4b\u8bd5\u6570\u636e\u5e93\u3002\n  metadata.create_all(engine)      # \u521b\u5efa\u8868\u683c\u3002\n  yield                            # \u8fd0\u884c\u6d4b\u8bd5\u3002\n  drop_database(url)               # \u5220\u9664\u6d4b\u8bd5\u6570\u636e\u5e93\u3002\n\n\n@pytest.fixture()\ndef client():\n    \"\"\"\n    \u5f53\u5728\u6d4b\u8bd5\u7528\u4f8b\u4e2d\u4f7f\u7528 'client' fixture \u65f6\uff0c\u6211\u4eec\u5c06\u786e\u4fdd\u6bcf\u4e2a\u6d4b\u8bd5\u7528\u4f8b\u4e4b\u95f4\n    \u5b8c\u6210\u6570\u636e\u5e93\u56de\u6eda\uff1a\n\n    def test_homepage(client):\n        url = app.url_path_for('homepage')\n        response = client.get(url)\n        assert response.status_code == 200\n    \"\"\"\n    with TestClient(app) as client:\n        yield client\n</code></pre>"},{"location":"database/#_4","title":"\u6570\u636e\u5e93\u8fc1\u79fb","text":"<p>\u51e0\u4e4e\u53ef\u4ee5\u80af\u5b9a\uff0c\u60a8\u9700\u8981\u4f7f\u7528\u6570\u636e\u5e93\u8fc1\u79fb\u6765\u7ba1\u7406\u6570\u636e\u5e93\u7684\u589e\u91cf\u66f4\u6539\u3002\u4e3a\u6b64\uff0c\u6211\u4eec\u5f3a\u70c8\u63a8\u8350\u4f7f\u7528 Alembic\uff0c\u5b83\u662f\u7531 SQLAlchemy \u7684\u4f5c\u8005\u7f16\u5199\u7684\u3002</p> <pre><code>$ pip install alembic\n$ alembic init migrations\n</code></pre> <p>\u73b0\u5728\uff0c\u60a8\u9700\u8981\u8bbe\u7f6e Alembic \u4ee5\u5f15\u7528\u914d\u7f6e\u7684 <code>DATABASE_URL</code> \u5e76\u4f7f\u7528\u60a8\u7684\u8868\u683c\u5143\u6570\u636e\u3002</p> <p>\u5728 <code>alembic.ini</code> \u4e2d\uff0c\u5220\u9664\u4ee5\u4e0b\u884c\uff1a</p> <pre><code>sqlalchemy.url = driver://user:pass@localhost/dbname\n</code></pre> <p>\u5728 <code>migrations/env.py</code> \u4e2d\uff0c\u60a8\u9700\u8981\u8bbe\u7f6e <code>'sqlalchemy.url'</code> \u914d\u7f6e\u9879\u548c <code>target_metadata</code> \u53d8\u91cf\u3002\u5b83\u5e94\u8be5\u50cf\u8fd9\u6837\uff1a</p> <pre><code># Alembic \u914d\u7f6e\u5bf9\u8c61\nconfig = context.config\n\n# \u914d\u7f6e Alembic \u4f7f\u7528\u6211\u4eec\u7684 DATABASE_URL \u548c\u8868\u683c\u5b9a\u4e49...\nimport app\nconfig.set_main_option('sqlalchemy.url', str(app.DATABASE_URL))\ntarget_metadata = app.metadata\n\n...\n</code></pre> <p>\u7136\u540e\uff0c\u4f7f\u7528\u6211\u4eec\u4e0a\u9762\u7684\u7b14\u8bb0\u793a\u4f8b\uff0c\u521b\u5efa\u521d\u59cb\u4fee\u8ba2\u7248\u672c\uff1a</p> <pre><code>alembic revision -m \"Create notes table\"\n</code></pre> <p>\u5e76\u5728\u65b0\u6587\u4ef6\uff08\u5728 <code>migrations/versions</code> \u76ee\u5f55\u4e0b\uff09\u4e2d\u586b\u5145\u5fc5\u8981\u7684\u6307\u4ee4\uff1a</p> <pre><code>def upgrade():\n    op.create_table(\n        'notes',\n        sqlalchemy.Column(\"id\", sqlalchemy.Integer, primary_key=True),\n        sqlalchemy.Column(\"text\", sqlalchemy.String),\n        sqlalchemy.Column(\"completed\", sqlalchemy.Boolean),\n    )\n\ndef downgrade():\n    op.drop_table('notes')\n</code></pre> <p>\u7136\u540e\u8fd0\u884c\u60a8\u7684\u7b2c\u4e00\u6b21\u8fc1\u79fb\u3002\u6211\u4eec\u7684\u7b14\u8bb0\u5e94\u7528\u73b0\u5728\u53ef\u4ee5\u8fd0\u884c\u4e86\uff01</p> <pre><code>alembic upgrade head\n</code></pre> <p>\u5728\u6d4b\u8bd5\u671f\u95f4\u8fd0\u884c\u8fc1\u79fb</p> <p>\u786e\u4fdd\u6bcf\u6b21\u521b\u5efa\u6d4b\u8bd5\u6570\u636e\u5e93\u65f6\u90fd\u8fd0\u884c\u6570\u636e\u5e93\u8fc1\u79fb\u662f\u4e00\u4e2a\u826f\u597d\u7684\u505a\u6cd5\u3002\u8fd9\u6709\u52a9\u4e8e\u6355\u6349\u8fc1\u79fb\u811a\u672c\u4e2d\u7684\u4efb\u4f55\u95ee\u9898\uff0c\u5e76\u786e\u4fdd\u6d4b\u8bd5\u5728\u4e0e\u751f\u4ea7\u6570\u636e\u5e93\u4e00\u81f4\u7684\u6570\u636e\u5e93\u72b6\u6001\u4e0b\u8fd0\u884c\u3002</p> <p>\u6211\u4eec\u53ef\u4ee5\u7a0d\u5fae\u8c03\u6574 <code>create_test_database</code> fixture\uff1a</p> <pre><code>from alembic import command\nfrom alembic.config import Config\nimport app\n\n...\n\n@pytest.fixture(scope=\"session\", autouse=True)\ndef create_test_database():\n    url = str(app.DATABASE_URL)\n    engine = create_engine(url)\n    assert not database_exists(url), '\u6d4b\u8bd5\u6570\u636e\u5e93\u5df2\u7ecf\u5b58\u5728\uff0c\u6b63\u5728\u4e2d\u6b62\u6d4b\u8bd5\u3002'\n    create_database(url)             # \u521b\u5efa\u6d4b\u8bd5\u6570\u636e\u5e93\u3002\n    config = Config(\"alembic.ini\")   # \u8fd0\u884c\u8fc1\u79fb\u3002\n    command.upgrade(config, \"head\")\n    yield                            # \u8fd0\u884c\u6d4b\u8bd5\u3002\n    drop_database(url)               # \u5220\u9664\u6d4b\u8bd5\u6570\u636e\u5e93\u3002\n</code></pre>"},{"location":"endpoints/","title":"\u7aef\u70b9","text":"<p>Starlette \u5305\u542b\u4e86 <code>HTTPEndpoint</code> \u548c <code>WebSocketEndpoint</code> \u7c7b\uff0c\u5b83\u4eec\u4e3a\u5904\u7406 HTTP \u65b9\u6cd5\u5206\u53d1\u548c WebSocket \u4f1a\u8bdd\u63d0\u4f9b\u4e86\u57fa\u4e8e\u7c7b\u7684\u89c6\u56fe\u6a21\u5f0f\u3002</p>"},{"location":"endpoints/#httpendpoint","title":"HTTPEndpoint","text":"<p><code>HTTPEndpoint</code> \u7c7b\u53ef\u4ee5\u4f5c\u4e3a\u4e00\u4e2a ASGI \u5e94\u7528\u6765\u4f7f\u7528\uff1a</p> <pre><code>from starlette.responses import PlainTextResponse\nfrom starlette.endpoints import HTTPEndpoint\n\n\nclass App(HTTPEndpoint):\n    async def get(self, request):\n        return PlainTextResponse(f\"Hello, world!\")\n</code></pre> <p>\u5982\u679c\u4f60\u4f7f\u7528 Starlette \u5e94\u7528\u5b9e\u4f8b\u6765\u5904\u7406\u8def\u7531\uff0c\u53ef\u4ee5\u5c06\u8bf7\u6c42\u5206\u53d1\u5230 <code>HTTPEndpoint</code> \u7c7b\u3002\u786e\u4fdd\u5206\u53d1\u5230\u7c7b\u672c\u8eab\uff0c\u800c\u4e0d\u662f\u7c7b\u7684\u5b9e\u4f8b\uff1a</p> <pre><code>from starlette.applications import Starlette\nfrom starlette.responses import PlainTextResponse\nfrom starlette.endpoints import HTTPEndpoint\nfrom starlette.routing import Route\n\n\nclass Homepage(HTTPEndpoint):\n    async def get(self, request):\n        return PlainTextResponse(f\"Hello, world!\")\n\n\nclass User(HTTPEndpoint):\n    async def get(self, request):\n        username = request.path_params['username']\n        return PlainTextResponse(f\"Hello, {username}\")\n\nroutes = [\n    Route(\"/\", Homepage),\n    Route(\"/{username}\", User)\n]\n\napp = Starlette(routes=routes)\n</code></pre> <p>HTTP \u7aef\u70b9\u7c7b\u5bf9\u4e8e\u4efb\u4f55\u6ca1\u6709\u5bf9\u5e94\u5904\u7406\u5668\u7684\u8bf7\u6c42\u65b9\u6cd5\uff0c\u5c06\u4f1a\u8fd4\u56de \"405 Method not allowed\" \u54cd\u5e94\u3002</p>"},{"location":"endpoints/#websocketendpoint","title":"WebSocketEndpoint","text":"<p><code>WebSocketEndpoint</code> \u7c7b\u662f\u4e00\u4e2a ASGI \u5e94\u7528\uff0c\u63d0\u4f9b\u4e86\u4e00\u4e2a\u5305\u88c5\u5668\uff0c\u5c01\u88c5\u4e86 <code>WebSocket</code> \u5b9e\u4f8b\u7684\u529f\u80fd\u3002</p> <p>\u53ef\u4ee5\u901a\u8fc7 <code>.scope</code> \u5728\u7aef\u70b9\u5b9e\u4f8b\u4e2d\u8bbf\u95ee ASGI \u8fde\u63a5\u8303\u56f4\uff0c\u5e76\u4e14\u5b83\u6709\u4e00\u4e2a <code>encoding</code> \u5c5e\u6027\uff0c\u60a8\u53ef\u4ee5\u9009\u62e9\u8bbe\u7f6e\u6b64\u5c5e\u6027\uff0c\u4ee5\u4fbf\u5728 <code>on_receive</code> \u65b9\u6cd5\u4e2d\u9a8c\u8bc1\u9884\u671f\u7684 WebSocket \u6570\u636e\u3002</p> <p>\u652f\u6301\u7684\u7f16\u7801\u7c7b\u578b\u6709\uff1a</p> <ul> <li><code>'json'</code></li> <li><code>'bytes'</code></li> <li><code>'text'</code></li> </ul> <p>\u6709\u4e09\u4e2a\u53ef\u91cd\u5199\u7684\u65b9\u6cd5\u6765\u5904\u7406\u7279\u5b9a\u7684 ASGI WebSocket \u6d88\u606f\u7c7b\u578b\uff1a</p> <ul> <li><code>async def on_connect(websocket, **kwargs)</code></li> <li><code>async def on_receive(websocket, data)</code></li> <li><code>async def on_disconnect(websocket, close_code)</code></li> </ul> <pre><code>from starlette.endpoints import WebSocketEndpoint\n\n\nclass App(WebSocketEndpoint):\n    encoding = 'bytes'\n\n    async def on_connect(self, websocket):\n        await websocket.accept()\n\n    async def on_receive(self, websocket, data):\n        await websocket.send_bytes(b\"Message: \" + data)\n\n    async def on_disconnect(self, websocket, close_code):\n        pass\n</code></pre> <p><code>WebSocketEndpoint</code> \u4e5f\u53ef\u4ee5\u4e0e <code>Starlette</code> \u5e94\u7528\u7c7b\u4e00\u8d77\u4f7f\u7528\uff1a</p> <pre><code>import uvicorn\nfrom starlette.applications import Starlette\nfrom starlette.endpoints import WebSocketEndpoint, HTTPEndpoint\nfrom starlette.responses import HTMLResponse\nfrom starlette.routing import Route, WebSocketRoute\n\n\nhtml = \"\"\"\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Chat&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;h1&gt;WebSocket Chat&lt;/h1&gt;\n        &lt;form action=\"\" onsubmit=\"sendMessage(event)\"&gt;\n            &lt;input type=\"text\" id=\"messageText\" autocomplete=\"off\"/&gt;\n            &lt;button&gt;Send&lt;/button&gt;\n        &lt;/form&gt;\n        &lt;ul id='messages'&gt;\n        &lt;/ul&gt;\n        &lt;script&gt;\n            var ws = new WebSocket(\"ws://localhost:8000/ws\");\n            ws.onmessage = function(event) {\n                var messages = document.getElementById('messages')\n                var message = document.createElement('li')\n                var content = document.createTextNode(event.data)\n                message.appendChild(content)\n                messages.appendChild(message)\n            };\n            function sendMessage(event) {\n                var input = document.getElementById(\"messageText\")\n                ws.send(input.value)\n                input.value = ''\n                event.preventDefault()\n            }\n        &lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n\"\"\"\n\nclass Homepage(HTTPEndpoint):\n    async def get(self, request):\n        return HTMLResponse(html)\n\nclass Echo(WebSocketEndpoint):\n    encoding = \"text\"\n\n    async def on_receive(self, websocket, data):\n        await websocket.send_text(f\"Message text was: {data}\")\n\nroutes = [\n    Route(\"/\", Homepage),\n    WebSocketRoute(\"/ws\", Echo)\n]\n\napp = Starlette(routes=routes)\n</code></pre>"},{"location":"exceptions/","title":"\u5f02\u5e38","text":"<p>Starlette \u5141\u8bb8\u60a8\u5b89\u88c5\u81ea\u5b9a\u4e49\u5f02\u5e38\u5904\u7406\u5668\u6765\u5904\u7406\u53d1\u751f\u9519\u8bef\u6216\u5df2\u5904\u7406\u5f02\u5e38\u65f6\u8fd4\u56de\u54cd\u5e94\u7684\u65b9\u5f0f\u3002</p> <pre><code>from starlette.applications import Starlette\nfrom starlette.exceptions import HTTPException\nfrom starlette.requests import Request\nfrom starlette.responses import HTMLResponse\n\n\nHTML_404_PAGE = ...\nHTML_500_PAGE = ...\n\n\nasync def not_found(request: Request, exc: HTTPException):\n    return HTMLResponse(content=HTML_404_PAGE, status_code=exc.status_code)\n\nasync def server_error(request: Request, exc: HTTPException):\n    return HTMLResponse(content=HTML_500_PAGE, status_code=exc.status_code)\n\n\nexception_handlers = {\n    404: not_found,\n    500: server_error\n}\n\napp = Starlette(routes=routes, exception_handlers=exception_handlers)\n</code></pre> <p>\u5982\u679c\u542f\u7528\u4e86 <code>debug</code> \u6a21\u5f0f\u5e76\u53d1\u751f\u9519\u8bef\uff0c\u5219 Starlette \u4f1a\u54cd\u5e94\u56de\u6eaf\u4fe1\u606f\uff0c\u800c\u4e0d\u662f\u4f7f\u7528\u5df2\u5b89\u88c5\u7684 500 \u9519\u8bef\u5904\u7406\u5668\u3002</p> <pre><code>app = Starlette(debug=True, routes=routes, exception_handlers=exception_handlers)\n</code></pre> <p>\u9664\u4e86\u4e3a\u7279\u5b9a\u7684\u72b6\u6001\u7801\u6ce8\u518c\u5904\u7406\u5668\u5916\uff0c\u60a8\u8fd8\u53ef\u4ee5\u4e3a\u5f02\u5e38\u7c7b\u522b\u6ce8\u518c\u5904\u7406\u5668\u3002</p> <p>\u7279\u522b\u662f\uff0c\u60a8\u53ef\u80fd\u5e0c\u671b\u91cd\u5199\u5982\u4f55\u5904\u7406\u5185\u7f6e\u7684 <code>HTTPException</code> \u7c7b\u3002\u4f8b\u5982\uff0c\u4f7f\u7528 JSON \u6837\u5f0f\u7684\u54cd\u5e94\uff1a</p> <pre><code>async def http_exception(request: Request, exc: HTTPException):\n    return JSONResponse({\"detail\": exc.detail}, status_code=exc.status_code)\n\nexception_handlers = {\n    HTTPException: http_exception\n}\n</code></pre> <p><code>HTTPException</code> \u8fd8\u5e26\u6709 <code>headers</code> \u53c2\u6570\uff0c\u5141\u8bb8\u5c06\u5934\u4fe1\u606f\u4f20\u9012\u7ed9\u54cd\u5e94\u7c7b\uff1a</p> <pre><code>async def http_exception(request: Request, exc: HTTPException):\n    return JSONResponse(\n        {\"detail\": exc.detail},\n        status_code=exc.status_code,\n        headers=exc.headers\n    )\n</code></pre> <p>\u60a8\u8fd8\u53ef\u80fd\u60f3\u8981\u91cd\u5199 <code>WebSocketException</code> \u7684\u5904\u7406\u65b9\u5f0f\uff1a</p> <pre><code>async def websocket_exception(websocket: WebSocket, exc: WebSocketException):\n    await websocket.close(code=1008)\n\nexception_handlers = {\n    WebSocketException: websocket_exception\n}\n</code></pre>"},{"location":"exceptions/#_1","title":"\u9519\u8bef\u548c\u5df2\u5904\u7406\u5f02\u5e38","text":"<p>\u533a\u5206\u5df2\u5904\u7406\u5f02\u5e38\u548c\u9519\u8bef\u662f\u975e\u5e38\u91cd\u8981\u7684\u3002</p> <p>\u5df2\u5904\u7406\u5f02\u5e38\u5e76\u4e0d\u8868\u793a\u9519\u8bef\u60c5\u51b5\u3002\u5b83\u4eec\u4f1a\u88ab\u8f6c\u6362\u4e3a\u9002\u5f53\u7684 HTTP \u54cd\u5e94\uff0c\u5e76\u901a\u8fc7\u6807\u51c6\u7684\u4e2d\u95f4\u4ef6\u6808\u53d1\u9001\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c<code>HTTPException</code> \u7c7b\u7528\u4e8e\u7ba1\u7406\u6240\u6709\u5df2\u5904\u7406\u7684\u5f02\u5e38\u3002</p> <p>\u9519\u8bef\u662f\u5e94\u7528\u7a0b\u5e8f\u4e2d\u53d1\u751f\u7684\u5176\u4ed6\u4efb\u4f55\u5f02\u5e38\u3002\u8fd9\u4e9b\u5f02\u5e38\u5e94\u8be5\u6cbf\u7740\u6574\u4e2a\u4e2d\u95f4\u4ef6\u6808\u4f20\u64ad\u4f5c\u4e3a\u5f02\u5e38\u3002\u4efb\u4f55\u9519\u8bef\u65e5\u5fd7\u4e2d\u95f4\u4ef6\u5e94\u786e\u4fdd\u5c06\u5f02\u5e38\u91cd\u65b0\u629b\u51fa\uff0c\u76f4\u5230\u670d\u52a1\u5668\u3002</p> <p>\u5728\u5b9e\u9645\u64cd\u4f5c\u4e2d\uff0c\u9519\u8bef\u5904\u7406\u5668\u4f7f\u7528\u7684\u662f <code>exception_handler[500]</code> \u6216 <code>exception_handler[Exception]</code>\u3002\u8fd9\u4e24\u4e2a\u952e\u90fd\u53ef\u4ee5\u4f7f\u7528\uff0c\u89c1\u4e0b\u4f8b\uff1a</p> <pre><code>async def handle_error(request: Request, exc: HTTPException):\n    # \u6267\u884c\u4e00\u4e9b\u903b\u8f91\n    return JSONResponse({\"detail\": exc.detail}, status_code=exc.status_code)\n\nexception_handlers = {\n    Exception: handle_error  # \u6216 \"500: handle_error\"\n}\n</code></pre> <p>\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5982\u679c <code>BackgroundTask</code> \u5f15\u53d1\u5f02\u5e38\uff0c\u5b83\u5c06\u7531 <code>handle_error</code> \u51fd\u6570\u5904\u7406\uff0c\u4f46\u6b64\u65f6\u54cd\u5e94\u5df2\u7ecf\u53d1\u9001\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c<code>handle_error</code> \u521b\u5efa\u7684\u54cd\u5e94\u5c06\u88ab\u4e22\u5f03\u3002\u5982\u679c\u9519\u8bef\u53d1\u751f\u5728\u54cd\u5e94\u53d1\u9001\u4e4b\u524d\uff0c\u5b83\u5c06\u4f7f\u7528\u54cd\u5e94\u5bf9\u8c61\u2014\u2014\u5728\u4e0a\u8ff0\u793a\u4f8b\u4e2d\u8fd4\u56de\u7684 <code>JSONResponse</code>\u3002</p> <p>\u4e3a\u4e86\u6b63\u786e\u5904\u7406\u8fd9\u79cd\u884c\u4e3a\uff0c<code>Starlette</code> \u5e94\u7528\u7a0b\u5e8f\u7684\u4e2d\u95f4\u4ef6\u6808\u914d\u7f6e\u5982\u4e0b\uff1a</p> <ul> <li><code>ServerErrorMiddleware</code> - \u5f53\u53d1\u751f\u670d\u52a1\u5668\u9519\u8bef\u65f6\u8fd4\u56de 500 \u54cd\u5e94\u3002</li> <li>\u5b89\u88c5\u7684\u4e2d\u95f4\u4ef6(Installed middleware)</li> <li><code>ExceptionMiddleware</code> - \u5904\u7406\u5df2\u5904\u7406\u7684\u5f02\u5e38\u5e76\u8fd4\u56de\u54cd\u5e94\u3002</li> <li>\u8def\u7531\u5668(Router)</li> <li>\u7aef\u70b9(Endpoints)</li> </ul>"},{"location":"exceptions/#httpexception","title":"HTTPException","text":"<p><code>HTTPException</code> \u7c7b\u63d0\u4f9b\u4e86\u4e00\u4e2a\u57fa\u7840\u7c7b\uff0c\u60a8\u53ef\u4ee5\u7528\u4e8e\u5904\u7406\u4efb\u4f55\u5df2\u5904\u7406\u7684\u5f02\u5e38\u3002<code>ExceptionMiddleware</code> \u5b9e\u73b0\u9ed8\u8ba4\u5c06\u4e3a\u4efb\u4f55 <code>HTTPException</code> \u8fd4\u56de\u7eaf\u6587\u672c HTTP \u54cd\u5e94\u3002</p> <ul> <li><code>HTTPException(status_code, detail=None, headers=None)</code></li> </ul> <p>\u60a8\u5e94\u8be5\u53ea\u5728\u8def\u7531\u6216\u7aef\u70b9\u4e2d\u5f15\u53d1 <code>HTTPException</code>\u3002\u4e2d\u95f4\u4ef6\u7c7b\u5e94\u76f4\u63a5\u8fd4\u56de\u9002\u5f53\u7684\u54cd\u5e94\uff0c\u800c\u4e0d\u662f\u5f15\u53d1\u5f02\u5e38\u3002</p> <p>\u5982\u679c\u5728 <code>websocket.accept()</code> \u4e4b\u524d\u5f15\u53d1 <code>HTTPException</code>\uff0c\u5219\u53ef\u4ee5\u5728 WebSocket \u7aef\u70b9\u4e2d\u4f7f\u7528\u8be5\u5f02\u5e38\u3002\u8fde\u63a5\u4e0d\u4f1a\u5347\u7ea7\u4e3a WebSocket \u8fde\u63a5\uff0c\u800c\u662f\u8fd4\u56de\u9002\u5f53\u7684 HTTP \u54cd\u5e94\u3002</p> <pre><code>from starlette.applications import Starlette\nfrom starlette.exceptions import HTTPException\nfrom starlette.routing import WebSocketRoute\nfrom starlette.websockets import WebSocket\n\n\nasync def websocket_endpoint(websocket: WebSocket):\n    raise HTTPException(status_code=400, detail=\"Bad request\")\n\n\napp = Starlette(routes=[WebSocketRoute(\"/ws\", websocket_endpoint)])\n</code></pre>"},{"location":"exceptions/#websocketexception","title":"WebSocketException","text":"<p>\u60a8\u53ef\u4ee5\u4f7f\u7528 <code>WebSocketException</code> \u7c7b\u5728 WebSocket \u7aef\u70b9\u4e2d\u5f15\u53d1\u9519\u8bef\u3002</p> <ul> <li><code>WebSocketException(code=1008, reason=None)</code></li> </ul> <p>\u60a8\u53ef\u4ee5\u8bbe\u7f6e\u4efb\u4f55\u6709\u6548\u7684\u4ee3\u7801\uff0c\u5177\u4f53\u8bf7\u53c2\u89c1 \u89c4\u8303 \u4e2d\u7684\u5b9a\u4e49\u3002</p>"},{"location":"graphql/","title":"GraphQL","text":"<p>Starlette \u5728 0.15.0 \u7248\u672c\u4e2d\u5f03\u7528\u4e86\u5bf9 GraphQL \u7684\u652f\u6301\uff0c\u5e76\u5728 0.17.0 \u7248\u672c\u4e2d\u79fb\u9664\u4e86\u8be5\u529f\u80fd\u3002</p> <p>\u5c3d\u7ba1 Starlette \u4e0d\u518d\u5185\u7f6e\u5bf9 GraphQL \u7684\u652f\u6301\uff0c\u60a8\u4ecd\u7136\u53ef\u4ee5\u901a\u8fc7\u7b2c\u4e09\u65b9\u5e93\u5728 Starlette \u4e2d\u4f7f\u7528 GraphQL\u3002\u8fd9\u4e9b\u5e93\u90fd\u63d0\u4f9b\u4e86\u9488\u5bf9 Starlette \u7684\u4e13\u95e8\u6307\u5357\uff0c\u5e2e\u52a9\u60a8\u5b9e\u73b0\u8fd9\u4e00\u529f\u80fd\uff1a</p> <ul> <li>Ariadne</li> <li><code>starlette-graphene3</code></li> <li>Strawberry</li> <li><code>tartiflette-asgi</code></li> </ul>"},{"location":"lifespan/","title":"\u751f\u547d\u5468\u671f","text":"<p>Starlette \u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u6ce8\u518c\u4e00\u4e2a\u751f\u547d\u5468\u671f\u5904\u7406\u5668\uff0c\u7528\u4e8e\u5904\u7406\u5728\u5e94\u7528\u7a0b\u5e8f\u542f\u52a8\u4e4b\u524d\u6216\u5e94\u7528\u7a0b\u5e8f\u5173\u95ed\u65f6\u9700\u8981\u8fd0\u884c\u7684\u4ee3\u7801\u3002</p> <pre><code>import contextlib\n\nfrom starlette.applications import Starlette\n\n\n@contextlib.asynccontextmanager\nasync def lifespan(app):\n    async with some_async_resource():\n        print(\"\u5728\u542f\u52a8\u65f6\u8fd0\u884c\uff01\")\n        yield\n        print(\"\u5728\u5173\u95ed\u65f6\u8fd0\u884c\uff01\")\n\n\nroutes = [\n    ...\n]\n\napp = Starlette(routes=routes, lifespan=lifespan)\n</code></pre> <p>\u5728\u751f\u547d\u5468\u671f\u5904\u7406\u5668\u8fd0\u884c\u4e4b\u524d\uff0cStarlette \u4e0d\u4f1a\u5f00\u59cb\u5904\u7406\u4efb\u4f55\u4f20\u5165\u7684\u8bf7\u6c42\u3002</p> <p>\u751f\u547d\u5468\u671f\u7684\u62c6\u5378\u8fc7\u7a0b\u5c06\u5728\u6240\u6709\u8fde\u63a5\u5173\u95ed\u5e76\u4e14\u4efb\u4f55\u6b63\u5728\u5904\u7406\u7684\u540e\u53f0\u4efb\u52a1\u5b8c\u6210\u540e\u8fd0\u884c\u3002</p> <p>\u8003\u8651\u4f7f\u7528 <code>anyio.create_task_group()</code> \u6765\u7ba1\u7406\u5f02\u6b65\u4efb\u52a1\u3002</p>"},{"location":"lifespan/#_1","title":"\u751f\u547d\u5468\u671f\u72b6\u6001","text":"<p>\u751f\u547d\u5468\u671f\u6709\u4e00\u4e2a <code>state</code> \u7684\u6982\u5ff5\uff0c\u5b83\u662f\u4e00\u4e2a\u5b57\u5178\uff0c\u53ef\u4ee5\u7528\u6765\u5728\u751f\u547d\u5468\u671f\u548c\u8bf7\u6c42\u4e4b\u95f4\u5171\u4eab\u5bf9\u8c61\u3002</p> <pre><code>import contextlib\nfrom typing import AsyncIterator, TypedDict\n\nimport httpx\nfrom starlette.applications import Starlette\nfrom starlette.requests import Request\nfrom starlette.responses import PlainTextResponse\nfrom starlette.routing import Route\n\n\nclass State(TypedDict):\n    http_client: httpx.AsyncClient\n\n\n@contextlib.asynccontextmanager\nasync def lifespan(app: Starlette) -&gt; AsyncIterator[State]:\n    async with httpx.AsyncClient() as client:\n        yield {\"http_client\": client}\n\n\nasync def homepage(request: Request) -&gt; PlainTextResponse:\n    client = request.state.http_client\n    response = await client.get(\"https://www.example.com\")\n    return PlainTextResponse(response.text)\n\n\napp = Starlette(\n    lifespan=lifespan,\n    routes=[Route(\"/\", homepage)]\n)\n</code></pre> <p>\u8bf7\u6c42\u4e2d\u63a5\u6536\u5230\u7684 <code>state</code> \u662f\u751f\u547d\u5468\u671f\u5904\u7406\u5668\u63a5\u6536\u5230\u7684 <code>state</code> \u7684\u6d45\u62f7\u8d1d\u3002</p>"},{"location":"lifespan/#_2","title":"\u5728\u6d4b\u8bd5\u4e2d\u8fd0\u884c\u751f\u547d\u5468\u671f","text":"<p>\u4f60\u5e94\u8be5\u4f7f\u7528 <code>TestClient</code> \u4f5c\u4e3a\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\uff0c\u4ee5\u786e\u4fdd\u751f\u547d\u5468\u671f\u5904\u7406\u5668\u88ab\u8c03\u7528\u3002</p> <pre><code>from example import app\nfrom starlette.testclient import TestClient\n\n\ndef test_homepage():\n    with TestClient(app) as client:\n        # \u5e94\u7528\u7a0b\u5e8f\u7684\u751f\u547d\u5468\u671f\u5728\u8fdb\u5165\u5757\u65f6\u88ab\u8c03\u7528\u3002\n        response = client.get(\"/\")\n        assert response.status_code == 200\n\n    # \u5f53\u9000\u51fa\u5757\u65f6\uff0c\u751f\u547d\u5468\u671f\u7684\u62c6\u5378\u8fc7\u7a0b\u4f1a\u88ab\u6267\u884c\u3002\n</code></pre>"},{"location":"middleware/","title":"\u4e2d\u95f4\u4ef6","text":"<p>Starlette \u5305\u542b\u4e86\u591a\u4e2a\u4e2d\u95f4\u4ef6\u7c7b\uff0c\u7528\u4e8e\u4e3a\u6574\u4e2a\u5e94\u7528\u7a0b\u5e8f\u6dfb\u52a0\u884c\u4e3a\u3002\u8fd9\u4e9b\u4e2d\u95f4\u4ef6\u90fd\u662f\u4f5c\u4e3a\u6807\u51c6\u7684 ASGI \u4e2d\u95f4\u4ef6\u7c7b\u5b9e\u73b0\u7684\uff0c\u53ef\u4ee5\u5e94\u7528\u4e8e Starlette \u6216\u4efb\u4f55\u5176\u4ed6 ASGI \u5e94\u7528\u7a0b\u5e8f\u3002</p>"},{"location":"middleware/#_1","title":"\u4f7f\u7528\u4e2d\u95f4\u4ef6","text":"<p>Starlette \u5e94\u7528\u7c7b\u5141\u8bb8\u60a8\u4ee5\u786e\u4fdd\u5b83\u59cb\u7ec8\u88ab\u5f02\u5e38\u5904\u7406\u7a0b\u5e8f\u5305\u88c5\u7684\u65b9\u5f0f\u5305\u542b ASGI \u4e2d\u95f4\u4ef6\u3002</p> <pre><code>from starlette.applications import Starlette\nfrom starlette.middleware import Middleware\nfrom starlette.middleware.httpsredirect import HTTPSRedirectMiddleware\nfrom starlette.middleware.trustedhost import TrustedHostMiddleware\n\nroutes = ...\n\n# \u786e\u4fdd\u6240\u6709\u8bf7\u6c42\u90fd\u5305\u542b 'example.com' \u6216\n# '*.example.com' \u7684\u4e3b\u673a\u5934\uff0c\u5e76\u4e25\u683c\u5f3a\u5236\u4f7f\u7528 https \u8bbf\u95ee\u3002\nmiddleware = [\n    Middleware(\n        TrustedHostMiddleware,\n        allowed_hosts=['example.com', '*.example.com'],\n    ),\n    Middleware(HTTPSRedirectMiddleware)\n]\n\napp = Starlette(routes=routes, middleware=middleware)\n</code></pre> <p>\u6bcf\u4e2a Starlette \u5e94\u7528\u7a0b\u5e8f\u9ed8\u8ba4\u81ea\u52a8\u5305\u542b\u4e24\u4e2a\u4e2d\u95f4\u4ef6\uff1a</p> <ul> <li><code>ServerErrorMiddleware</code> - \u786e\u4fdd\u5e94\u7528\u7a0b\u5e8f\u5f02\u5e38\u53ef\u4ee5\u8fd4\u56de\u81ea\u5b9a\u4e49\u7684 500 \u9875\u9762\uff0c\u6216\u8005\u5728\u8c03\u8bd5\u6a21\u5f0f\u4e0b\u663e\u793a\u5e94\u7528\u7a0b\u5e8f\u7684\u5806\u6808\u8ddf\u8e2a\u3002\u8fd9\u662f \u59cb\u7ec8 \u662f\u6700\u5916\u5c42\u7684\u4e2d\u95f4\u4ef6\u3002</li> <li><code>ExceptionMiddleware</code> - \u6dfb\u52a0\u5f02\u5e38\u5904\u7406\u7a0b\u5e8f\uff0c\u4ee5\u4fbf\u5c06\u7279\u5b9a\u7c7b\u578b\u7684\u9884\u671f\u5f02\u5e38\u60c5\u51b5\u4e0e\u5904\u7406\u51fd\u6570\u5173\u8054\u3002\u4f8b\u5982\uff0c\u5728\u7aef\u70b9\u4e2d\u629b\u51fa <code>HTTPException(status_code=404)</code> \u5c06\u5448\u73b0\u81ea\u5b9a\u4e49\u7684 404 \u9875\u9762\u3002</li> </ul> <p>\u4e2d\u95f4\u4ef6\u662f\u4ece\u4e0a\u5230\u4e0b\u8fdb\u884c\u8bc4\u4f30\u7684\uff0c\u56e0\u6b64\u6211\u4eec\u793a\u4f8b\u5e94\u7528\u7a0b\u5e8f\u4e2d\u7684\u6267\u884c\u6d41\u7a0b\u5c06\u662f\uff1a</p> <ul> <li>\u4e2d\u95f4\u4ef6<ul> <li><code>ServerErrorMiddleware</code></li> <li><code>TrustedHostMiddleware</code></li> <li><code>HTTPSRedirectMiddleware</code></li> <li><code>ExceptionMiddleware</code></li> </ul> </li> <li>\u8def\u7531</li> <li>\u7aef\u70b9</li> </ul> <p>\u4ee5\u4e0b\u662f Starlette \u5305\u4e2d\u53ef\u7528\u7684\u4e2d\u95f4\u4ef6\u5b9e\u73b0\uff1a</p>"},{"location":"middleware/#corsmiddleware","title":"CORSMiddleware","text":"<p>\u4e3a\u5916\u53d1\u54cd\u5e94\u6dfb\u52a0\u9002\u5f53\u7684 CORS \u5934\uff0c\u4ee5\u5141\u8bb8\u6d4f\u89c8\u5668\u8fdb\u884c\u8de8\u57df\u8bf7\u6c42\u3002</p> <p>CORSMiddleware \u5b9e\u73b0\u7684\u9ed8\u8ba4\u53c2\u6570\u901a\u5e38\u662f\u4e25\u683c\u7684\uff0c\u56e0\u6b64\u60a8\u9700\u8981\u660e\u786e\u542f\u7528\u7279\u5b9a\u7684\u6765\u6e90\u3001\u65b9\u6cd5\u6216\u5934\u90e8\uff0c\u624d\u80fd\u5141\u8bb8\u6d4f\u89c8\u5668\u5728\u8de8\u57df\u4e0a\u4e0b\u6587\u4e2d\u4f7f\u7528\u5b83\u4eec\u3002</p> <pre><code>from starlette.applications import Starlette\nfrom starlette.middleware import Middleware\nfrom starlette.middleware.cors import CORSMiddleware\n\nroutes = ...\n\nmiddleware = [\n    Middleware(CORSMiddleware, allow_origins=['*'])\n]\n\napp = Starlette(routes=routes, middleware=middleware)\n</code></pre> <p>\u652f\u6301\u4ee5\u4e0b\u53c2\u6570\uff1a</p> <ul> <li><code>allow_origins</code> - \u5141\u8bb8\u8fdb\u884c\u8de8\u57df\u8bf7\u6c42\u7684\u6765\u6e90\u5217\u8868\u3002\u4f8b\u5982 <code>['https://example.org', 'https://www.example.org']</code>\u3002\u60a8\u53ef\u4ee5\u4f7f\u7528 <code>['*']</code> \u6765\u5141\u8bb8\u4efb\u4f55\u6765\u6e90\u3002</li> <li><code>allow_origin_regex</code> - \u7528\u4e8e\u5339\u914d\u5e94\u5141\u8bb8\u8fdb\u884c\u8de8\u57df\u8bf7\u6c42\u7684\u6765\u6e90\u7684\u6b63\u5219\u8868\u8fbe\u5f0f\u5b57\u7b26\u4e32\u3002\u4f8b\u5982 <code>'https://.*\\.example\\.org'</code>\u3002</li> <li><code>allow_methods</code> - \u5e94\u5141\u8bb8\u7684\u8de8\u57df\u8bf7\u6c42 HTTP \u65b9\u6cd5\u5217\u8868\u3002\u9ed8\u8ba4\u4e3a <code>['GET']</code>\u3002\u60a8\u53ef\u4ee5\u4f7f\u7528 <code>['*']</code> \u6765\u5141\u8bb8\u6240\u6709\u6807\u51c6\u65b9\u6cd5\u3002</li> <li><code>allow_headers</code> - \u5e94\u652f\u6301\u7684\u8de8\u57df\u8bf7\u6c42 HTTP \u8bf7\u6c42\u5934\u5217\u8868\u3002\u9ed8\u8ba4\u4e3a <code>[]</code>\u3002\u60a8\u53ef\u4ee5\u4f7f\u7528 <code>['*']</code> \u6765\u5141\u8bb8\u6240\u6709\u5934\u90e8\u3002<code>Accept</code>\u3001<code>Accept-Language</code>\u3001<code>Content-Language</code> \u548c <code>Content-Type</code> \u5934\u90e8\u59cb\u7ec8\u5141\u8bb8\u8de8\u57df\u8bf7\u6c42\u3002</li> <li><code>allow_credentials</code> - \u6307\u793a\u662f\u5426\u652f\u6301\u8de8\u57df\u8bf7\u6c42\u4e2d\u7684 Cookies\u3002\u9ed8\u8ba4\u4e3a <code>False</code>\u3002\u53e6\u5916\uff0c<code>allow_origins</code>\u3001<code>allow_methods</code> \u548c <code>allow_headers</code> \u4e0d\u80fd\u8bbe\u7f6e\u4e3a <code>['*']</code>\uff0c\u5982\u679c\u5141\u8bb8\u4f7f\u7528\u51ed\u636e\uff0c\u6240\u6709\u8fd9\u4e9b\u503c\u5fc5\u987b\u660e\u786e\u6307\u5b9a\u3002</li> <li><code>expose_headers</code> - \u6307\u793a\u5e94\u5bf9\u6d4f\u89c8\u5668\u5f00\u653e\u7684\u54cd\u5e94\u5934\u90e8\u3002\u9ed8\u8ba4\u4e3a <code>[]</code>\u3002</li> <li><code>max_age</code> - \u8bbe\u7f6e\u6d4f\u89c8\u5668\u7f13\u5b58 CORS \u54cd\u5e94\u7684\u6700\u5927\u65f6\u95f4\uff08\u4ee5\u79d2\u4e3a\u5355\u4f4d\uff09\u3002\u9ed8\u8ba4\u4e3a <code>600</code>\u3002</li> </ul> <p>\u8be5\u4e2d\u95f4\u4ef6\u54cd\u5e94\u4e24\u79cd\u7279\u5b9a\u7c7b\u578b\u7684 HTTP \u8bf7\u6c42...</p>"},{"location":"middleware/#cors","title":"CORS \u9884\u68c0\u8bf7\u6c42","text":"<p>\u8fd9\u4e9b\u662f\u4efb\u4f55\u5e26\u6709 <code>Origin</code> \u548c <code>Access-Control-Request-Method</code> \u5934\u90e8\u7684 <code>OPTIONS</code> \u8bf7\u6c42\u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u4e2d\u95f4\u4ef6\u5c06\u62e6\u622a\u4f20\u5165\u8bf7\u6c42\uff0c\u5e76\u4f7f\u7528\u9002\u5f53\u7684 CORS \u5934\u90e8\u8fdb\u884c\u54cd\u5e94\uff0c\u5e76\u6839\u636e\u9700\u8981\u8fd4\u56de 200 \u6216 400 \u7684\u54cd\u5e94\u4f5c\u4e3a\u4fe1\u606f\u3002</p>"},{"location":"middleware/#_2","title":"\u7b80\u5355\u8bf7\u6c42","text":"<p>\u4efb\u4f55\u5e26\u6709 <code>Origin</code> \u5934\u90e8\u7684\u8bf7\u6c42\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u4e2d\u95f4\u4ef6\u5c06\u6b63\u5e38\u4f20\u9012\u8bf7\u6c42\uff0c\u4f46\u4f1a\u5728\u54cd\u5e94\u4e2d\u5305\u542b\u9002\u5f53\u7684 CORS \u5934\u90e8\u3002</p>"},{"location":"middleware/#sessionmiddleware","title":"SessionMiddleware","text":"<p>\u6dfb\u52a0\u57fa\u4e8e\u7b7e\u540d\u7684 Cookie \u7684 HTTP \u4f1a\u8bdd\u3002\u4f1a\u8bdd\u4fe1\u606f\u662f\u53ef\u8bfb\u7684\uff0c\u4f46\u4e0d\u53ef\u4fee\u6539\u3002</p> <p>\u60a8\u53ef\u4ee5\u4f7f\u7528 <code>request.session</code> \u5b57\u5178\u63a5\u53e3\u8bbf\u95ee\u6216\u4fee\u6539\u4f1a\u8bdd\u6570\u636e\u3002</p> <p>\u652f\u6301\u4ee5\u4e0b\u53c2\u6570\uff1a</p> <ul> <li><code>secret_key</code> - \u5e94\u8be5\u662f\u4e00\u4e2a\u968f\u673a\u5b57\u7b26\u4e32\u3002</li> <li><code>session_cookie</code> - \u9ed8\u8ba4\u4e3a \"session\"\u3002</li> <li><code>max_age</code> - \u4f1a\u8bdd\u8fc7\u671f\u65f6\u95f4\uff08\u4ee5\u79d2\u4e3a\u5355\u4f4d\uff09\u3002\u9ed8\u8ba4\u4e3a 2 \u5468\u3002\u5982\u679c\u8bbe\u7f6e\u4e3a <code>None</code>\uff0c\u5219 Cookie \u4f1a\u5728\u6d4f\u89c8\u5668\u4f1a\u8bdd\u7ed3\u675f\u65f6\u8fc7\u671f\u3002</li> <li><code>same_site</code> - SameSite \u6807\u5fd7\u9632\u6b62\u6d4f\u89c8\u5668\u4e0e\u8de8\u7ad9\u8bf7\u6c42\u4e00\u8d77\u53d1\u9001\u4f1a\u8bdd Cookie\u3002\u9ed8\u8ba4\u4e3a <code>'lax'</code>\u3002</li> <li><code>path</code> - \u4e3a\u4f1a\u8bdd Cookie \u8bbe\u7f6e\u7684\u8def\u5f84\u3002\u9ed8\u8ba4\u4e3a <code>'/'</code>\u3002</li> <li><code>https_only</code> - \u6307\u793a\u5e94\u8bbe\u7f6e\u5b89\u5168\u6807\u5fd7\uff08\u4ec5\u53ef\u4e0e HTTPS \u4e00\u8d77\u4f7f\u7528\uff09\u3002\u9ed8\u8ba4\u4e3a <code>False</code>\u3002</li> <li><code>domain</code> - \u7528\u4e8e\u5728\u5b50\u57df\u6216\u8de8\u57df\u4e4b\u95f4\u5171\u4eab Cookie \u7684\u57df\u3002\u6d4f\u89c8\u5668\u9ed8\u8ba4\u5c06\u57df\u8bbe\u7f6e\u4e3a\u8bbe\u7f6e Cookie \u7684\u76f8\u540c\u4e3b\u673a\uff0c\u6392\u9664\u5b50\u57df\uff08\u53c2\u8003\uff09\u3002</li> </ul> <pre><code>from starlette.applications import Starlette\nfrom starlette.middleware import Middleware\nfrom starlette.middleware.sessions import SessionMiddleware\n\nroutes = ...\n\nmiddleware = [\n    Middleware(SessionMiddleware, secret_key=..., https_only=True)\n]\n\napp = Starlette(routes=routes, middleware=middleware)\n</code></pre>"},{"location":"middleware/#httpsredirectmiddleware","title":"HTTPSRedirectMiddleware","text":"<p>\u5f3a\u5236\u6240\u6709\u4f20\u5165\u7684\u8bf7\u6c42\u5fc5\u987b\u662f <code>https</code> \u6216 <code>wss</code>\u3002\u4efb\u4f55\u4f20\u5165\u7684 <code>http</code> \u6216 <code>ws</code> \u8bf7\u6c42\u5c06\u88ab\u91cd\u5b9a\u5411\u5230\u5b89\u5168\u534f\u8bae\u3002</p> <pre><code>from starlette.applications import Starlette\nfrom starlette.middleware import Middleware\nfrom starlette.middleware.httpsredirect import HTTPSRedirectMiddleware\n\nroutes = ...\n\nmiddleware = [\n    Middleware(HTTPSRedirectMiddleware)\n]\n\napp = Starlette(routes=routes, middleware=middleware)\n</code></pre> <p>\u6b64\u4e2d\u95f4\u4ef6\u7c7b\u6ca1\u6709\u914d\u7f6e\u9009\u9879\u3002</p>"},{"location":"middleware/#trustedhostmiddleware","title":"TrustedHostMiddleware","text":"<p>\u5f3a\u5236\u6240\u6709\u4f20\u5165\u7684\u8bf7\u6c42\u90fd\u5fc5\u987b\u6b63\u786e\u8bbe\u7f6e <code>Host</code> \u5934\u90e8\uff0c\u4ee5\u9632\u6b62 HTTP \u4e3b\u673a\u5934\u653b\u51fb\u3002</p> <pre><code>from starlette.applications import Starlette\nfrom starlette.middleware import Middleware\nfrom starlette.middleware.trustedhost import TrustedHostMiddleware\n\nroutes = ...\n\nmiddleware = [\n    Middleware(TrustedHostMiddleware, allowed_hosts=['example.com', '*.example.com'])\n]\n\napp = Starlette(routes=routes, middleware=middleware)\n</code></pre> <p>\u652f\u6301\u4ee5\u4e0b\u53c2\u6570\uff1a</p> <ul> <li><code>allowed_hosts</code> - \u5e94\u5141\u8bb8\u7684\u4e3b\u673a\u540d\u7684\u57df\u540d\u5217\u8868\u3002\u652f\u6301\u4f7f\u7528\u901a\u914d\u7b26\u57df\u540d\uff0c\u5982 <code>*.example.com</code> \u6765\u5339\u914d\u5b50\u57df\u540d\u3002\u8981\u5141\u8bb8\u4efb\u4f55\u4e3b\u673a\u540d\uff0c\u53ef\u4ee5\u4f7f\u7528 <code>allowed_hosts=[\"*\"]</code> \u6216\u7701\u7565\u8be5\u4e2d\u95f4\u4ef6\u3002</li> <li><code>www_redirect</code> - \u5982\u679c\u8bbe\u7f6e\u4e3a <code>True</code>\uff0c\u5219\u8bf7\u6c42\u5230\u4e0d\u5e26 <code>www</code> \u7684\u5141\u8bb8\u4e3b\u673a\u5c06\u88ab\u91cd\u5b9a\u5411\u5230\u5e26 <code>www</code> \u7684\u5bf9\u5e94\u4e3b\u673a\u3002\u9ed8\u8ba4\u4e3a <code>True</code>\u3002</li> </ul> <p>\u5982\u679c\u4f20\u5165\u7684\u8bf7\u6c42\u672a\u6b63\u786e\u9a8c\u8bc1\uff0c\u5219\u4f1a\u8fd4\u56de 400 \u54cd\u5e94\u3002</p>"},{"location":"middleware/#gzipmiddleware","title":"GZipMiddleware","text":"<p>\u5904\u7406\u4efb\u4f55\u5728 <code>Accept-Encoding</code> \u5934\u90e8\u4e2d\u5305\u542b <code>\"gzip\"</code> \u7684\u8bf7\u6c42\u7684 GZip \u54cd\u5e94\u3002</p> <p>\u8be5\u4e2d\u95f4\u4ef6\u5c06\u5904\u7406\u6807\u51c6\u54cd\u5e94\u548c\u6d41\u5f0f\u54cd\u5e94\u3002</p> <pre><code>from starlette.applications import Starlette\nfrom starlette.middleware import Middleware\nfrom starlette.middleware.gzip import GZipMiddleware\n\nroutes = ...\n\nmiddleware = [\n    Middleware(GZipMiddleware, minimum_size=1000, compresslevel=9)\n]\n\napp = Starlette(routes=routes, middleware=middleware)\n</code></pre> <p>\u652f\u6301\u4ee5\u4e0b\u53c2\u6570\uff1a</p> <ul> <li><code>minimum_size</code> - \u4e0d\u5bf9\u5c0f\u4e8e\u6b64\u6700\u5c0f\u5b57\u8282\u6570\u7684\u54cd\u5e94\u8fdb\u884c GZip \u538b\u7f29\u3002\u9ed8\u8ba4\u4e3a <code>500</code>\u3002</li> <li><code>compresslevel</code> - \u5728 GZip \u538b\u7f29\u65f6\u4f7f\u7528\u7684\u538b\u7f29\u7ea7\u522b\u3002\u5b83\u662f\u4e00\u4e2a\u4ecb\u4e8e 1 \u5230 9 \u4e4b\u95f4\u7684\u6574\u6570\u3002\u9ed8\u8ba4\u4e3a <code>9</code>\u3002\u8f83\u4f4e\u7684\u503c\u4f1a\u5bfc\u81f4\u538b\u7f29\u901f\u5ea6\u66f4\u5feb\uff0c\u4f46\u6587\u4ef6\u8f83\u5927\uff0c\u800c\u8f83\u9ad8\u7684\u503c\u4f1a\u5bfc\u81f4\u538b\u7f29\u8f83\u6162\uff0c\u4f46\u6587\u4ef6\u8f83\u5c0f\u3002</li> </ul> <p>\u5bf9\u4e8e\u5df2\u7ecf\u8bbe\u7f6e\u4e86 <code>Content-Encoding</code> \u7684\u54cd\u5e94\uff0c\u8be5\u4e2d\u95f4\u4ef6\u4e0d\u4f1a\u8fdb\u884c GZip \u538b\u7f29\uff0c\u4ee5\u9632\u6b62\u54cd\u5e94\u88ab\u538b\u7f29\u4e24\u6b21\u3002</p>"},{"location":"middleware/#basehttpmiddleware","title":"BaseHTTPMiddleware","text":"<p>\u4e00\u4e2a\u62bd\u8c61\u7c7b\uff0c\u5141\u8bb8\u60a8\u57fa\u4e8e\u8bf7\u6c42/\u54cd\u5e94\u63a5\u53e3\u7f16\u5199 ASGI \u4e2d\u95f4\u4ef6\u3002</p>"},{"location":"middleware/#_3","title":"\u4f7f\u7528\u65b9\u6cd5","text":"<p>\u8981\u4f7f\u7528 <code>BaseHTTPMiddleware</code> \u5b9e\u73b0\u4e2d\u95f4\u4ef6\u7c7b\uff0c\u5fc5\u987b\u91cd\u5199 <code>async def dispatch(request, call_next)</code> \u65b9\u6cd5\u3002</p> <pre><code>from starlette.applications import Starlette\nfrom starlette.middleware import Middleware\nfrom starlette.middleware.base import BaseHTTPMiddleware\n\n\nclass CustomHeaderMiddleware(BaseHTTPMiddleware):\n    async def dispatch(self, request, call_next):\n        response = await call_next(request)\n        response.headers['Custom'] = 'Example'\n        return response\n\nroutes = ...\n\nmiddleware = [\n    Middleware(CustomHeaderMiddleware)\n]\n\napp = Starlette(routes=routes, middleware=middleware)\n</code></pre> <p>\u5982\u679c\u60a8\u5e0c\u671b\u4e3a\u4e2d\u95f4\u4ef6\u7c7b\u63d0\u4f9b\u914d\u7f6e\u9009\u9879\uff0c\u5e94\u8be5\u91cd\u5199 <code>__init__</code> \u65b9\u6cd5\uff0c\u786e\u4fdd\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f <code>app</code>\uff0c\u5176\u4f59\u7684\u53c2\u6570\u662f\u53ef\u9009\u7684\u5173\u952e\u5b57\u53c2\u6570\u3002\u5982\u679c\u8fd9\u6837\u505a\uff0c\u786e\u4fdd\u5728\u5b9e\u4f8b\u4e2d\u8bbe\u7f6e <code>app</code> \u5c5e\u6027\u3002</p> <pre><code>class CustomHeaderMiddleware(BaseHTTPMiddleware):\n    def __init__(self, app, header_value='Example'):\n        super().__init__(app)\n        self.header_value = header_value\n\n    async def dispatch(self, request, call_next):\n        response = await call_next(request)\n        response.headers['Custom'] = self.header_value\n        return response\n\n\nmiddleware = [\n    Middleware(CustomHeaderMiddleware, header_value='Customized')\n]\n\napp = Starlette(routes=routes, middleware=middleware)\n</code></pre> <p>\u4e2d\u95f4\u4ef6\u7c7b\u4e0d\u5e94\u5728 <code>__init__</code> \u65b9\u6cd5\u5916\u90e8\u4fee\u6539\u5176\u72b6\u6001\u3002\u76f8\u53cd\uff0c\u60a8\u5e94\u5c06\u4efb\u4f55\u72b6\u6001\u4fdd\u7559\u5728 <code>dispatch</code> \u65b9\u6cd5\u5185\uff0c\u6216\u8005\u663e\u5f0f\u5730\u4f20\u9012\u5b83\uff0c\u800c\u4e0d\u662f\u4fee\u6539\u4e2d\u95f4\u4ef6\u5b9e\u4f8b\u3002</p>"},{"location":"middleware/#_4","title":"\u9650\u5236","text":"<p>\u76ee\u524d\uff0c<code>BaseHTTPMiddleware</code> \u6709\u4e00\u4e9b\u5df2\u77e5\u7684\u9650\u5236\uff1a</p> <ul> <li>\u4f7f\u7528 <code>BaseHTTPMiddleware</code> \u4f1a\u963b\u6b62 <code>contextlib.ContextVar</code> \u7684\u53d8\u5316\u5411\u4e0a\u4f20\u64ad\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5982\u679c\u60a8\u5728\u7aef\u70b9\u4e2d\u4e3a <code>ContextVar</code> \u8bbe\u7f6e\u4e86\u503c\uff0c\u5e76\u5c1d\u8bd5\u4ece\u4e2d\u95f4\u4ef6\u4e2d\u8bfb\u53d6\u5b83\uff0c\u60a8\u4f1a\u53d1\u73b0\u8bfb\u53d6\u7684\u503c\u4e0e\u60a8\u5728\u7aef\u70b9\u4e2d\u8bbe\u7f6e\u7684\u503c\u4e0d\u540c\uff08\u8bf7\u53c2\u89c1 \u6b64\u6d4b\u8bd5 \u4e86\u89e3\u6b64\u884c\u4e3a\u7684\u793a\u4f8b\uff09\u3002</li> </ul> <p>\u8981\u514b\u670d\u8fd9\u4e9b\u9650\u5236\uff0c\u53ef\u4ee5\u4f7f\u7528 \u7eaf ASGI \u4e2d\u95f4\u4ef6\uff0c\u5982\u4e0b\u6240\u793a\u3002</p>"},{"location":"middleware/#asgi","title":"\u7eaf ASGI \u4e2d\u95f4\u4ef6","text":"<p>ASGI \u89c4\u8303 \u4f7f\u5f97\u80fd\u591f\u76f4\u63a5\u4f7f\u7528 ASGI \u63a5\u53e3\u5b9e\u73b0 ASGI \u4e2d\u95f4\u4ef6\uff0c\u4f5c\u4e3a\u4e00\u7cfb\u5217 ASGI \u5e94\u7528\u7a0b\u5e8f\uff0c\u5f7c\u6b64\u8c03\u7528\u3002\u4e8b\u5b9e\u4e0a\uff0cStarlette \u9644\u5e26\u7684\u4e2d\u95f4\u4ef6\u7c7b\u5c31\u662f\u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\u5b9e\u73b0\u7684\u3002</p> <p>\u8fd9\u79cd\u8f83\u4f4e\u7ea7\u7684\u65b9\u6cd5\u63d0\u4f9b\u4e86\u66f4\u5927\u7684\u884c\u4e3a\u63a7\u5236\u548c\u589e\u5f3a\u7684\u6846\u67b6\u548c\u670d\u52a1\u5668\u4e4b\u95f4\u7684\u4e92\u64cd\u4f5c\u6027\u3002\u5b83\u8fd8\u514b\u670d\u4e86 <code>BaseHTTPMiddleware</code> \u7684\u9650\u5236\u3002</p>"},{"location":"middleware/#asgi_1","title":"\u7f16\u5199\u7eaf ASGI \u4e2d\u95f4\u4ef6","text":"<p>\u521b\u5efa ASGI \u4e2d\u95f4\u4ef6\u7684\u6700\u5e38\u89c1\u65b9\u6cd5\u662f\u4f7f\u7528\u7c7b\u3002</p> <pre><code>class ASGIMiddleware:\n    def __init__(self, app):\n        self.app = app\n\n    async def __call__(self, scope, receive, send):\n        await self.app(scope, receive, send)\n</code></pre> <p>\u4e0a\u9762\u7684\u4e2d\u95f4\u4ef6\u662f\u6700\u57fa\u672c\u7684 ASGI \u4e2d\u95f4\u4ef6\u3002\u5b83\u63a5\u6536\u4e00\u4e2a\u7236\u7ea7 ASGI \u5e94\u7528\u7a0b\u5e8f\u4f5c\u4e3a\u6784\u9020\u51fd\u6570\u7684\u53c2\u6570\uff0c\u5e76\u5b9e\u73b0\u4e00\u4e2a <code>async __call__</code> \u65b9\u6cd5\uff0c\u8c03\u7528\u8be5\u7236\u5e94\u7528\u7a0b\u5e8f\u3002</p> <p>\u4e00\u4e9b\u5b9e\u73b0\uff0c\u4f8b\u5982 <code>asgi-cors</code>\uff0c\u4f7f\u7528\u4e86\u53e6\u4e00\u79cd\u98ce\u683c\uff0c\u4f7f\u7528\u51fd\u6570\uff1a</p> <pre><code>import functools\n\ndef asgi_middleware():\n    def asgi_decorator(app):\n\n        @functools.wraps(app)\n        async def wrapped_app(scope, receive, send):\n            await app(scope, receive, send)\n\n        return wrapped_app\n\n    return asgi_decorator\n</code></pre> <p>\u65e0\u8bba\u54ea\u79cd\u65b9\u5f0f\uff0cASGI \u4e2d\u95f4\u4ef6\u5fc5\u987b\u662f\u53ef\u8c03\u7528\u7684\uff0c\u63a5\u53d7\u4e09\u4e2a\u53c2\u6570\uff1a<code>scope</code>\u3001<code>receive</code> \u548c <code>send</code>\u3002</p> <ul> <li><code>scope</code> \u662f\u4e00\u4e2a\u5b57\u5178\uff0c\u5305\u542b\u5173\u4e8e\u8fde\u63a5\u7684\u4fe1\u606f\uff0c\u5176\u4e2d <code>scope[\"type\"]</code> \u53ef\u80fd\u662f\uff1a<ul> <li><code>\"http\"</code>\uff1a\u8868\u793a HTTP \u8bf7\u6c42\u3002</li> <li><code>\"websocket\"</code>\uff1a\u8868\u793a WebSocket \u8fde\u63a5\u3002</li> <li><code>\"lifespan\"</code>\uff1a\u8868\u793a ASGI \u751f\u547d\u5468\u671f\u6d88\u606f\u3002</li> </ul> </li> <li><code>receive</code> \u548c <code>send</code> \u53ef\u4ee5\u7528\u4e8e\u4e0e ASGI \u670d\u52a1\u5668\u4ea4\u6362 ASGI \u4e8b\u4ef6\u6d88\u606f\u2014\u2014\u66f4\u591a\u5185\u5bb9\u89c1\u4e0b\u6587\u3002\u6d88\u606f\u7684\u7c7b\u578b\u548c\u5185\u5bb9\u53d6\u51b3\u4e8e <code>scope</code> \u7c7b\u578b\u3002\u4e86\u89e3\u66f4\u591a\u5185\u5bb9\uff0c\u8bf7\u53c2\u8003 ASGI \u89c4\u8303\u3002</li> </ul>"},{"location":"middleware/#asgi_2","title":"\u4f7f\u7528\u7eaf ASGI \u4e2d\u95f4\u4ef6","text":"<p>\u7eaf ASGI \u4e2d\u95f4\u4ef6\u53ef\u4ee5\u50cf\u5176\u4ed6\u4e2d\u95f4\u4ef6\u4e00\u6837\u4f7f\u7528\uff1a</p> <pre><code>from starlette.applications import Starlette\nfrom starlette.middleware import Middleware\n\nfrom .middleware import ASGIMiddleware\n\nroutes = ...\n\nmiddleware = [\n    Middleware(ASGIMiddleware),\n]\n\napp = Starlette(..., middleware=middleware)\n</code></pre> <p>\u53e6\u89c1 \u4f7f\u7528\u4e2d\u95f4\u4ef6\u3002</p>"},{"location":"middleware/#_5","title":"\u7c7b\u578b\u6ce8\u89e3","text":"<p>\u6709\u4e24\u79cd\u65b9\u5f0f\u4e3a\u4e2d\u95f4\u4ef6\u6dfb\u52a0\u7c7b\u578b\u6ce8\u89e3\uff1a\u4f7f\u7528 Starlette \u672c\u8eab\u6216 <code>asgiref</code>\u3002</p> <ul> <li>\u4f7f\u7528 Starlette\uff1a\u9002\u7528\u4e8e\u5927\u591a\u6570\u5e38\u89c1\u7528\u4f8b\u3002</li> </ul> <pre><code>from starlette.types import ASGIApp, Message, Scope, Receive, Send\n\n\nclass ASGIMiddleware:\n    def __init__(self, app: ASGIApp) -&gt; None:\n        self.app = app\n\n    async def __call__(self, scope: Scope, receive: Receive, send: Send) -&gt; None:\n        if scope[\"type\"] != \"http\":\n            return await self.app(scope, receive, send)\n\n        async def send_wrapper(message: Message) -&gt; None:\n            # ... \u6267\u884c\u67d0\u4e9b\u64cd\u4f5c\n            await send(message)\n\n        await self.app(scope, receive, send_wrapper)\n</code></pre> <ul> <li>\u4f7f\u7528 <code>asgiref</code>\uff1a\u9002\u7528\u4e8e\u66f4\u4e25\u683c\u7684\u7c7b\u578b\u63d0\u793a\u3002</li> </ul> <pre><code>from asgiref.typing import ASGI3Application, ASGIReceiveCallable, ASGISendCallable, Scope\nfrom asgiref.typing import ASGIReceiveEvent, ASGISendEvent\n\n\nclass ASGIMiddleware:\n    def __init__(self, app: ASGI3Application) -&gt; None:\n        self.app = app\n\n    async def __call__(self, scope: Scope, receive: ASGIReceiveCallable, send: ASGISendCallable) -&gt; None:\n        if scope[\"type\"] != \"http\":\n            await self.app(scope, receive, send)\n            return\n\n        async def send_wrapper(message: ASGISendEvent) -&gt; None:\n            # ... \u6267\u884c\u67d0\u4e9b\u64cd\u4f5c\n            await send(message)\n\n        return await self.app(scope, receive, send_wrapper)\n</code></pre>"},{"location":"middleware/#_6","title":"\u5e38\u89c1\u6a21\u5f0f","text":""},{"location":"middleware/#_7","title":"\u4ec5\u5904\u7406\u7279\u5b9a\u8bf7\u6c42","text":"<p>ASGI \u4e2d\u95f4\u4ef6\u53ef\u4ee5\u6839\u636e <code>scope</code> \u7684\u5185\u5bb9\u5e94\u7528\u7279\u5b9a\u884c\u4e3a\u3002</p> <p>\u4f8b\u5982\uff0c\u4ec5\u5904\u7406 HTTP \u8bf7\u6c42\uff0c\u53ef\u4ee5\u7f16\u5199\u5982\u4e0b\u4ee3\u7801\uff1a</p> <pre><code>class ASGIMiddleware:\n    def __init__(self, app):\n        self.app = app\n\n    async def __call__(self, scope, receive, send):\n        if scope[\"type\"] != \"http\":\n            await self.app(scope, receive, send)\n            return\n\n        ...  # \u5728\u6b64\u6267\u884c\u67d0\u4e9b\u64cd\u4f5c\uff01\n\n        await self.app(scope, receive, send)\n</code></pre> <p>\u540c\u6837\uff0c\u4e13\u95e8\u5904\u7406 WebSocket \u7684\u4e2d\u95f4\u4ef6\u53ef\u4ee5\u901a\u8fc7 <code>scope[\"type\"] != \"websocket\"</code> \u6765\u8fdb\u884c\u63a7\u5236\u3002</p> <p>\u4e2d\u95f4\u4ef6\u8fd8\u53ef\u4ee5\u6839\u636e\u8bf7\u6c42\u65b9\u6cd5\u3001URL\u3001\u5934\u90e8\u7b49\u6761\u4ef6\u8868\u73b0\u4e0d\u540c\u7684\u884c\u4e3a\u3002</p>"},{"location":"middleware/#starlette","title":"\u91cd\u7528 Starlette \u7ec4\u4ef6","text":"<p>Starlette \u63d0\u4f9b\u4e86\u591a\u4e2a\u6570\u636e\u7ed3\u6784\uff0c\u63a5\u53d7 ASGI \u7684 <code>scope</code>\u3001<code>receive</code> \u548c/\u6216 <code>send</code> \u53c2\u6570\uff0c\u4f7f\u4f60\u80fd\u591f\u5728\u66f4\u9ad8\u62bd\u8c61\u5c42\u6b21\u4e0a\u8fdb\u884c\u5de5\u4f5c\u3002\u8fd9\u4e9b\u6570\u636e\u7ed3\u6784\u5305\u62ec <code>Request</code>\u3001<code>Headers</code>\u3001<code>QueryParams</code>\u3001<code>URL</code> \u7b49\u3002</p> <p>\u4f8b\u5982\uff0c\u4f60\u53ef\u4ee5\u5b9e\u4f8b\u5316\u4e00\u4e2a <code>Request</code> \u6765\u66f4\u8f7b\u677e\u5730\u68c0\u67e5 HTTP \u8bf7\u6c42\uff1a</p> <pre><code>from starlette.requests import Request\n\nclass ASGIMiddleware:\n    def __init__(self, app):\n        self.app = app\n\n    async def __call__(self, scope, receive, send):\n        if scope[\"type\"] == \"http\":\n            request = Request(scope)\n            ... # \u4f7f\u7528 `request.method`\u3001`request.url`\u3001`request.headers` \u7b49\u3002\n\n        await self.app(scope, receive, send)\n</code></pre> <p>\u4f60\u8fd8\u53ef\u4ee5\u91cd\u7528 responses\uff0c\u5b83\u4eec\u4e5f\u662f ASGI \u5e94\u7528\u7a0b\u5e8f\u3002</p>"},{"location":"middleware/#_8","title":"\u53d1\u9001\u4e3b\u52a8\u54cd\u5e94","text":"<p>\u68c0\u67e5\u8fde\u63a5\u7684 <code>scope</code> \u53ef\u4ee5\u4f7f\u4f60\u6709\u6761\u4ef6\u5730\u8c03\u7528\u53e6\u4e00\u4e2a ASGI \u5e94\u7528\u7a0b\u5e8f\u3002\u4e00\u4e2a\u7528\u4f8b\u53ef\u80fd\u662f\u5728\u4e0d\u8c03\u7528\u5e94\u7528\u7a0b\u5e8f\u7684\u60c5\u51b5\u4e0b\u76f4\u63a5\u53d1\u9001\u54cd\u5e94\u3002</p> <p>\u4f8b\u5982\uff0c\u8fd9\u4e2a\u4e2d\u95f4\u4ef6\u4f7f\u7528\u5b57\u5178\u6765\u6839\u636e\u8bf7\u6c42\u8def\u5f84\u6267\u884c\u6c38\u4e45\u91cd\u5b9a\u5411\u3002\u8fd9\u53ef\u4ee5\u7528\u6765\u5728\u9700\u8981\u91cd\u6784\u8def\u7531 URL \u6a21\u5f0f\u65f6\uff0c\u7ee7\u7eed\u652f\u6301\u65e7\u7684 URL\u3002</p> <pre><code>from starlette.datastructures import URL\nfrom starlette.responses import RedirectResponse\n\nclass RedirectsMiddleware:\n    def __init__(self, app, path_mapping: dict):\n        self.app = app\n        self.path_mapping = path_mapping\n\n    async def __call__(self, scope, receive, send):\n        if scope[\"type\"] != \"http\":\n            await self.app(scope, receive, send)\n            return\n\n        url = URL(scope=scope)\n\n        if url.path in self.path_mapping:\n            url = url.replace(path=self.path_mapping[url.path])\n            response = RedirectResponse(url, status_code=301)\n            await response(scope, receive, send)\n            return\n\n        await self.app(scope, receive, send)\n</code></pre> <p>\u793a\u4f8b\u7528\u6cd5\u5982\u4e0b\uff1a</p> <pre><code>from starlette.applications import Starlette\nfrom starlette.middleware import Middleware\n\nroutes = ...\n\nredirections = {\n    \"/v1/resource/\": \"/v2/resource/\",\n    # ...\n}\n\nmiddleware = [\n    Middleware(RedirectsMiddleware, path_mapping=redirections),\n]\n\napp = Starlette(routes=routes, middleware=middleware)\n</code></pre>"},{"location":"middleware/#_9","title":"\u68c0\u67e5\u6216\u4fee\u6539\u8bf7\u6c42","text":"<p>\u53ef\u4ee5\u901a\u8fc7\u64cd\u4f5c <code>scope</code> \u6765\u8bbf\u95ee\u6216\u4fee\u6539\u8bf7\u6c42\u4fe1\u606f\u3002\u8981\u67e5\u770b\u6b64\u6a21\u5f0f\u7684\u5b8c\u6574\u793a\u4f8b\uff0c\u8bf7\u53c2\u89c1 Uvicorn \u7684 <code>ProxyHeadersMiddleware</code>\uff0c\u5b83\u5728\u4ee3\u7406\u524d\u7aef\u540e\u4e3a\u8bf7\u6c42\u68c0\u67e5\u548c\u8c03\u6574 <code>scope</code>\u3002</p> <p>\u6b64\u5916\uff0c\u5305\u88c5 <code>receive</code> ASGI \u53ef\u8c03\u7528\u51fd\u6570\u5141\u8bb8\u4f60\u901a\u8fc7\u64cd\u4f5c <code>http.request</code> ASGI \u4e8b\u4ef6\u6d88\u606f\u6765\u8bbf\u95ee\u6216\u4fee\u6539 HTTP \u8bf7\u6c42\u4f53\u3002</p> <p>\u4f8b\u5982\uff0c\u8fd9\u4e2a\u4e2d\u95f4\u4ef6\u8ba1\u7b97\u5e76\u8bb0\u5f55\u4f20\u5165\u8bf7\u6c42\u4f53\u7684\u5927\u5c0f\uff1a</p> <pre><code>class LoggedRequestBodySizeMiddleware:\n    def __init__(self, app):\n        self.app = app\n\n    async def __call__(self, scope, receive, send):\n        if scope[\"type\"] != \"http\":\n            await self.app(scope, receive, send)\n            return\n\n        body_size = 0\n\n        async def receive_logging_request_body_size():\n            nonlocal body_size\n\n            message = await receive()\n            assert message[\"type\"] == \"http.request\"\n\n            body_size += len(message.get(\"body\", b\"\"))\n\n            if not message.get(\"more_body\", False):\n                print(f\"\u8bf7\u6c42\u4f53\u7684\u5927\u5c0f\u662f\uff1a{body_size} \u5b57\u8282\")\n\n            return message\n\n        await self.app(scope, receive_logging_request_body_size, send)\n</code></pre> <p>\u540c\u6837\uff0cWebSocket \u4e2d\u95f4\u4ef6\u53ef\u4ee5\u64cd\u4f5c <code>websocket.receive</code> ASGI \u4e8b\u4ef6\u6d88\u606f\u6765\u68c0\u67e5\u6216\u66f4\u6539\u4f20\u5165\u7684 WebSocket \u6570\u636e\u3002</p> <p>\u6709\u5173\u66f4\u6539 HTTP \u8bf7\u6c42\u4f53\u7684\u793a\u4f8b\uff0c\u8bf7\u53c2\u89c1 <code>msgpack-asgi</code>\u3002</p>"},{"location":"middleware/#_10","title":"\u68c0\u67e5\u6216\u4fee\u6539\u54cd\u5e94","text":"<p>\u5305\u88c5 <code>send</code> ASGI \u53ef\u8c03\u7528\u51fd\u6570\u53ef\u4ee5\u8ba9\u4f60\u68c0\u67e5\u6216\u4fee\u6539\u5e95\u5c42\u5e94\u7528\u7a0b\u5e8f\u53d1\u9001\u7684 HTTP \u54cd\u5e94\u3002\u4e3a\u6b64\uff0c\u4f60\u53ef\u4ee5\u5bf9 <code>http.response.start</code> \u6216 <code>http.response.body</code> ASGI \u4e8b\u4ef6\u6d88\u606f\u4f5c\u51fa\u53cd\u5e94\u3002</p> <p>\u4f8b\u5982\uff0c\u8fd9\u4e2a\u4e2d\u95f4\u4ef6\u4f1a\u6dfb\u52a0\u4e00\u4e9b\u56fa\u5b9a\u7684\u989d\u5916\u54cd\u5e94\u5934\uff1a</p> <pre><code>from starlette.datastructures import MutableHeaders\n\nclass ExtraResponseHeadersMiddleware:\n    def __init__(self, app, headers):\n        self.app = app\n        self.headers = headers\n\n    async def __call__(self, scope, receive, send):\n        if scope[\"type\"] != \"http\":\n            return await self.app(scope, receive, send)\n\n        async def send_with_extra_headers(message):\n            if message[\"type\"] == \"http.response.start\":\n                headers = MutableHeaders(scope=message)\n                for key, value in self.headers:\n                    headers.append(key, value)\n\n            await send(message)\n\n        await self.app(scope, receive, send_with_extra_headers)\n</code></pre> <p>\u53e6\u8bf7\u53c2\u89c1 <code>asgi-logger</code>\uff0c\u5b83\u662f\u4e00\u4e2a\u68c0\u67e5 HTTP \u54cd\u5e94\u5e76\u8bb0\u5f55\u53ef\u914d\u7f6e\u7684 HTTP \u8bbf\u95ee\u65e5\u5fd7\u884c\u7684\u793a\u4f8b\u3002</p> <p>\u540c\u6837\uff0cWebSocket \u4e2d\u95f4\u4ef6\u53ef\u4ee5\u64cd\u4f5c <code>websocket.send</code> ASGI \u4e8b\u4ef6\u6d88\u606f\u6765\u68c0\u67e5\u6216\u4fee\u6539\u53d1\u51fa\u7684 WebSocket \u6570\u636e\u3002</p> <p>\u8bf7\u6ce8\u610f\uff0c\u5982\u679c\u4f60\u66f4\u6539\u4e86\u54cd\u5e94\u4f53\uff0c\u5fc5\u987b\u66f4\u65b0\u54cd\u5e94\u7684 <code>Content-Length</code> \u5934\u4ee5\u5339\u914d\u65b0\u7684\u54cd\u5e94\u4f53\u957f\u5ea6\u3002\u5b8c\u6574\u793a\u4f8b\u8bf7\u53c2\u89c1 <code>brotli-asgi</code>\u3002</p>"},{"location":"middleware/#_11","title":"\u5c06\u4fe1\u606f\u4f20\u9012\u7ed9\u7aef\u70b9","text":"<p>\u5982\u679c\u9700\u8981\u4e0e\u5e95\u5c42\u5e94\u7528\u7a0b\u5e8f\u6216\u7aef\u70b9\u5171\u4eab\u4fe1\u606f\uff0c\u53ef\u4ee5\u5c06\u5176\u5b58\u50a8\u5728 <code>scope</code> \u5b57\u5178\u4e2d\u3002\u8bf7\u6ce8\u610f\uff0c\u8fd9\u53ea\u662f\u4e00\u79cd\u7ea6\u5b9a\u2014\u2014\u4f8b\u5982\uff0cStarlette \u4f7f\u7528\u5b83\u6765\u4e0e\u7aef\u70b9\u5171\u4eab\u8def\u7531\u4fe1\u606f\u2014\u2014\u4f46\u5b83\u5e76\u4e0d\u662f ASGI \u89c4\u8303\u7684\u4e00\u90e8\u5206\u3002\u5982\u679c\u8fd9\u6837\u505a\uff0c\u52a1\u5fc5\u901a\u8fc7\u4f7f\u7528\u4f4e\u6982\u7387\u51b2\u7a81\u7684\u952e\u6765\u907f\u514d\u4e0e\u5176\u4ed6\u4e2d\u95f4\u4ef6\u6216\u5e94\u7528\u7a0b\u5e8f\u53d1\u751f\u51b2\u7a81\u3002</p> <p>\u4f8b\u5982\uff0c\u5f53\u5305\u542b\u4ee5\u4e0b\u4e2d\u95f4\u4ef6\u65f6\uff0c\u7aef\u70b9\u5c06\u80fd\u591f\u8bbf\u95ee <code>request.scope[\"asgi_transaction_id\"]</code>\u3002</p> <pre><code>import uuid\n\nclass TransactionIDMiddleware:\n    def __init__(self, app):\n        self.app = app\n\n    async def __call__(self, scope, receive, send):\n        scope[\"asgi_transaction_id\"] = uuid.uuid4()\n        await self.app(scope, receive, send)\n</code></pre>"},{"location":"middleware/#_12","title":"\u6e05\u7406\u548c\u9519\u8bef\u5904\u7406","text":"<p>\u4f60\u53ef\u4ee5\u5c06\u5e94\u7528\u7a0b\u5e8f\u5305\u88c5\u5728 <code>try/except/finally</code> \u5757\u4e2d\u6216\u4f7f\u7528\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u6765\u6267\u884c\u6e05\u7406\u64cd\u4f5c\u6216\u5904\u7406\u9519\u8bef\u3002</p> <p>\u4f8b\u5982\uff0c\u4ee5\u4e0b\u4e2d\u95f4\u4ef6\u53ef\u80fd\u4f1a\u6536\u96c6\u5ea6\u91cf\u6570\u636e\u5e76\u5904\u7406\u5e94\u7528\u7a0b\u5e8f\u5f02\u5e38...</p> <pre><code>import time\n\nclass MonitoringMiddleware:\n    def __init__(self, app):\n        self.app = app\n\n    async def __call__(self, scope, receive, send):\n        start = time.time()\n        try:\n            await self.app(scope, receive, send)\n        except Exception as exc:\n            ...  # \u5904\u7406\u5f02\u5e38\n            raise\n        finally:\n            end = time.time()\n            elapsed = end - start\n            ...  # \u5c06 `elapsed` \u4f5c\u4e3a\u5ea6\u91cf\u63d0\u4ea4\u5230\u76d1\u63a7\u540e\u7aef\n</code></pre> <p>\u53e6\u8bf7\u53c2\u89c1 <code>timing-asgi</code>\uff0c\u5b83\u662f\u8fd9\u79cd\u6a21\u5f0f\u7684\u5b8c\u6574\u793a\u4f8b\u3002</p>"},{"location":"middleware/#_13","title":"\u6ce8\u610f\u4e8b\u9879","text":""},{"location":"middleware/#asgi_3","title":"ASGI \u4e2d\u95f4\u4ef6\u5e94\u4e3a\u65e0\u72b6\u6001","text":"<p>\u7531\u4e8e ASGI \u8bbe\u8ba1\u7528\u4e8e\u5904\u7406\u5e76\u53d1\u8bf7\u6c42\uff0c\u4efb\u4f55\u7279\u5b9a\u4e8e\u8fde\u63a5\u7684\u72b6\u6001\u5e94\u4ec5\u9650\u4e8e <code>__call__</code> \u5b9e\u73b0\u3002\u5426\u5219\uff0c\u901a\u5e38\u4f1a\u5bfc\u81f4\u8de8\u8bf7\u6c42\u7684\u53d8\u91cf\u8bfb\u5199\u51b2\u7a81\uff0c\u5e76\u53ef\u80fd\u5f15\u53d1 bug\u3002</p> <p>\u4f8b\u5982\uff0c\u4ee5\u4e0b\u4ee3\u7801\u4f1a\u5728\u54cd\u5e94\u4e2d\u5b58\u5728 <code>X-Mock</code> \u5934\u65f6\u6709\u6761\u4ef6\u5730\u66ff\u6362\u54cd\u5e94\u4f53\uff1a</p> \u2705 \u505a\u6cd5\u274c \u4e0d\u8981\u505a <pre><code>from starlette.datastructures import Headers\n\nclass MockResponseBodyMiddleware:\n    def __init__(self, app, content):\n        self.app = app\n        self.content = content\n\n    async def __call__(self, scope, receive, send):\n        if scope[\"type\"] != \"http\":\n            await self.app(scope, receive, send)\n            return\n\n        # \u5982\u679c HTTP \u54cd\u5e94\u5305\u542b 'X-Mock' \u5934\uff0c\u5219\u5c06\u6807\u5fd7\u8bbe\u4e3a True\u3002\n        # \u2705: \u4f5c\u7528\u57df\u4ec5\u9650\u4e8e\u6b64\u51fd\u6570\u3002\n        should_mock = False\n\n        async def maybe_send_with_mock_content(message):\n            nonlocal should_mock\n\n            if message[\"type\"] == \"http.response.start\":\n                headers = Headers(raw=message[\"headers\"])\n                should_mock = headers.get(\"X-Mock\") == \"1\"\n                await send(message)\n\n            elif message[\"type\"] == \"http.response.body\":\n                if should_mock:\n                    message = {\"type\": \"http.response.body\", \"body\": self.content}\n                await send(message)\n\n        await self.app(scope, receive, maybe_send_with_mock_content)\n</code></pre> <pre><code>from starlette.datastructures import Headers\n\nclass MockResponseBodyMiddleware:\n    def __init__(self, app, content):\n        self.app = app\n        self.content = content\n        # \u274c: \u8fd9\u4e2a\u53d8\u91cf\u4f1a\u8de8\u8bf7\u6c42\u88ab\u8bfb\u5199\uff01\n        self.should_mock = False\n\n    async def __call__(self, scope, receive, send):\n        if scope[\"type\"] != \"http\":\n            await self.app(scope, receive, send)\n            return\n\n        async def maybe_send_with_mock_content(message):\n            if message[\"type\"] == \"http.response.start\":\n                headers = Headers(raw=message[\"headers\"])\n                self.should_mock = headers.get(\"X-Mock\") == \"1\"\n                await send(message)\n\n            elif message[\"type\"] == \"http.response.body\":\n                if self.should_mock:\n                    message = {\"type\": \"http.response.body\", \"body\": self.content}\n                await send(message)\n\n        await self.app(scope, receive, maybe_send_with_mock_content)\n</code></pre> <p>\u53e6\u89c1 <code>GZipMiddleware</code>\uff0c\u5b83\u662f\u4e00\u4e2a\u5b8c\u6574\u7684\u793a\u4f8b\uff0c\u6f14\u793a\u5982\u4f55\u907f\u514d\u8fd9\u4e00\u6f5c\u5728\u7684\u9677\u9631\u3002</p>"},{"location":"middleware/#_14","title":"\u6df1\u5165\u9605\u8bfb","text":"<p>\u672c\u6587\u6863\u5e94\u8be5\u80fd\u4e3a\u4f60\u63d0\u4f9b\u5982\u4f55\u521b\u5efa ASGI \u4e2d\u95f4\u4ef6\u7684\u826f\u597d\u57fa\u7840\u3002</p> <p>\u4e0d\u8fc7\uff0c\u5173\u4e8e\u8be5\u4e3b\u9898\u4e5f\u6709\u5f88\u591a\u7cbe\u5f69\u7684\u6587\u7ae0\uff1a</p> <ul> <li>ASGI \u4ecb\u7ecd\uff1a\u5f02\u6b65 Python Web \u751f\u6001\u7cfb\u7edf\u7684\u5d1b\u8d77</li> <li>\u5982\u4f55\u7f16\u5199 ASGI \u4e2d\u95f4\u4ef6</li> </ul>"},{"location":"middleware/#_15","title":"\u5728\u5176\u4ed6\u6846\u67b6\u4e2d\u4f7f\u7528\u4e2d\u95f4\u4ef6","text":"<p>\u4e3a\u4e86\u5728\u5176\u4ed6 ASGI \u5e94\u7528\u7a0b\u5e8f\u4e0a\u5305\u88c5 ASGI \u4e2d\u95f4\u4ef6\uff0c\u5e94\u8be5\u4f7f\u7528\u66f4\u901a\u7528\u7684\u6a21\u5f0f\u6765\u5305\u88c5\u5e94\u7528\u7a0b\u5e8f\u5b9e\u4f8b\uff1a</p> <pre><code>app = TrustedHostMiddleware(app, allowed_hosts=['example.com'])\n</code></pre> <p>\u4f60\u4e5f\u53ef\u4ee5\u5728 Starlette \u5e94\u7528\u7a0b\u5e8f\u5b9e\u4f8b\u4e0a\u4f7f\u7528\u8fd9\u79cd\u65b9\u5f0f\uff0c\u4f46\u66f4\u63a8\u8350\u4f7f\u7528 <code>middleware=&lt;\u4e2d\u95f4\u4ef6\u5b9e\u4f8b\u5217\u8868&gt;</code> \u65b9\u5f0f\uff0c\u56e0\u4e3a\u5b83\u80fd\uff1a</p> <ul> <li>\u786e\u4fdd\u6240\u6709\u5185\u5bb9\u90fd\u88ab\u5305\u88c5\u5728\u4e00\u4e2a\u6700\u5916\u5c42\u7684 <code>ServerErrorMiddleware</code> \u4e2d\u3002</li> <li>\u4fdd\u7559\u9876\u7ea7\u7684 <code>app</code> \u5b9e\u4f8b\u3002</li> </ul>"},{"location":"middleware/#_16","title":"\u5c06\u4e2d\u95f4\u4ef6\u5e94\u7528\u4e8e\u8def\u7531\u7ec4","text":"<p>\u4e2d\u95f4\u4ef6\u8fd8\u53ef\u4ee5\u6dfb\u52a0\u5230 <code>Mount</code> \u5b9e\u4f8b\u4e2d\uff0c\u8fd9\u6837\u4f60\u53ef\u4ee5\u5c06\u4e2d\u95f4\u4ef6\u5e94\u7528\u4e8e\u4e00\u7ec4\u8def\u7531\u6216\u5b50\u5e94\u7528\u7a0b\u5e8f\uff1a</p> <pre><code>from starlette.applications import Starlette\nfrom starlette.middleware import Middleware\nfrom starlette.middleware.gzip import GZipMiddleware\nfrom starlette.routing import Mount, Route\n\n\nroutes = [\n    Mount(\n        \"/\",\n        routes=[\n            Route(\n                \"/example\",\n                endpoint=...,\n            )\n        ],\n        middleware=[Middleware(GZipMiddleware)]\n    )\n]\n\napp = Starlette(routes=routes)\n</code></pre> <p>\u8bf7\u6ce8\u610f\uff0c\u4ee5\u8fd9\u79cd\u65b9\u5f0f\u4f7f\u7528\u7684\u4e2d\u95f4\u4ef6 \u4e0d\u4f1a \u5305\u88c5\u5728\u5f02\u5e38\u5904\u7406\u4e2d\u95f4\u4ef6\u4e2d\uff0c\u50cf\u5e94\u7528\u4e8e <code>Starlette</code> \u5e94\u7528\u7a0b\u5e8f\u7684\u4e2d\u95f4\u4ef6\u90a3\u6837\u3002\u8fd9\u901a\u5e38\u4e0d\u662f\u95ee\u9898\uff0c\u56e0\u4e3a\u5b83\u53ea\u9002\u7528\u4e8e\u68c0\u67e5\u6216\u4fee\u6539 <code>Response</code> \u7684\u4e2d\u95f4\u4ef6\uff0c\u800c\u4e14\u5373\u4f7f\u662f\u8fd9\u6837\uff0c\u4f60\u4e5f\u53ef\u80fd\u4e0d\u5e0c\u671b\u5c06\u6b64\u903b\u8f91\u5e94\u7528\u4e8e\u9519\u8bef\u54cd\u5e94\u3002\u5982\u679c\u4f60\u786e\u5b9e\u53ea\u5e0c\u671b\u5c06\u4e2d\u95f4\u4ef6\u903b\u8f91\u5e94\u7528\u4e8e\u67d0\u4e9b\u8def\u7531\u7684\u9519\u8bef\u54cd\u5e94\uff0c\u53ef\u4ee5\u9009\u62e9\u4ee5\u4e0b\u51e0\u79cd\u65b9\u6cd5\uff1a</p> <ul> <li>\u5728 <code>Mount</code> \u4e0a\u6dfb\u52a0 <code>ExceptionMiddleware</code></li> <li>\u5728\u4e2d\u95f4\u4ef6\u4e2d\u6dfb\u52a0 <code>try/except</code> \u5757\uff0c\u5e76\u4ece\u90a3\u91cc\u8fd4\u56de\u9519\u8bef\u54cd\u5e94</li> <li>\u5c06\u6807\u8bb0\u548c\u5904\u7406\u5206\u6210\u4e24\u4e2a\u4e2d\u95f4\u4ef6\uff0c\u4e00\u4e2a\u653e\u5728 <code>Mount</code> \u4e0a\uff0c\u7528\u4e8e\u6807\u8bb0\u54cd\u5e94\u9700\u8981\u5904\u7406\uff08\u4f8b\u5982\uff0c\u901a\u8fc7\u8bbe\u7f6e <code>scope[\"log-response\"] = True</code>\uff09\uff0c\u53e6\u4e00\u4e2a\u5e94\u7528\u4e8e <code>Starlette</code> \u5e94\u7528\u7a0b\u5e8f\uff0c\u8d1f\u8d23\u5b9e\u9645\u5904\u7406</li> </ul> <p><code>Route</code>/<code>WebSocket</code> \u7c7b\u4e5f\u63a5\u53d7 <code>middleware</code> \u53c2\u6570\uff0c\u8fd9\u5141\u8bb8\u4f60\u5c06\u4e2d\u95f4\u4ef6\u5e94\u7528\u4e8e\u5355\u4e2a\u8def\u7531\uff1a</p> <pre><code>from starlette.applications import Starlette\nfrom starlette.middleware import Middleware\nfrom starlette.middleware.gzip import GZipMiddleware\nfrom starlette.routing import Route\n\n\nroutes = [\n    Route(\n        \"/example\",\n        endpoint=...,\n        middleware=[Middleware(GZipMiddleware)]\n    )\n]\n\napp = Starlette(routes=routes)\n</code></pre> <p>\u4f60\u8fd8\u53ef\u4ee5\u5c06\u4e2d\u95f4\u4ef6\u5e94\u7528\u4e8e <code>Router</code> \u7c7b\uff0c\u8fd9\u5141\u8bb8\u4f60\u5c06\u4e2d\u95f4\u4ef6\u5e94\u7528\u4e8e\u4e00\u7ec4\u8def\u7531\uff1a</p> <pre><code>from starlette.applications import Starlette\nfrom starlette.middleware import Middleware\nfrom starlette.middleware.gzip import GZipMiddleware\nfrom starlette.routing import Route, Router\n\n\nroutes = [\n    Route(\"/example\", endpoint=...),\n    Route(\"/another\", endpoint=...),\n]\n\nrouter = Router(routes=routes, middleware=[Middleware(GZipMiddleware)])\n</code></pre>"},{"location":"middleware/#_17","title":"\u7b2c\u4e09\u65b9\u4e2d\u95f4\u4ef6","text":""},{"location":"middleware/#asgi-auth-github","title":"asgi-auth-github","text":"<p>\u8be5\u4e2d\u95f4\u4ef6\u4e3a\u4efb\u4f55 ASGI \u5e94\u7528\u7a0b\u5e8f\u6dfb\u52a0\u8eab\u4efd\u9a8c\u8bc1\uff0c\u8981\u6c42\u7528\u6237\u4f7f\u7528\u5176 GitHub \u8d26\u6237\u8fdb\u884c\u767b\u5f55\uff08\u901a\u8fc7 OAuth\uff09\u3002\u53ef\u4ee5\u5c06\u8bbf\u95ee\u6743\u9650\u9650\u5236\u4e3a\u7279\u5b9a\u7528\u6237\u6216\u7279\u5b9a GitHub \u7ec4\u7ec7\u6216\u56e2\u961f\u7684\u6210\u5458\u3002</p>"},{"location":"middleware/#asgi-csrf","title":"asgi-csrf","text":"<p>\u7528\u4e8e\u9632\u6b62 CSRF \u653b\u51fb\u7684\u4e2d\u95f4\u4ef6\u3002\u8be5\u4e2d\u95f4\u4ef6\u5b9e\u73b0\u4e86\u53cc\u91cd\u63d0\u4ea4 Cookie \u6a21\u5f0f\uff0c\u5176\u4e2d\u8bbe\u7f6e\u4e86\u4e00\u4e2a Cookie\uff0c\u7136\u540e\u5c06\u5176\u4e0e csrftoken \u9690\u85cf\u8868\u5355\u5b57\u6bb5\u6216 <code>x-csrftoken</code> HTTP \u5934\u8fdb\u884c\u6bd4\u8f83\u3002</p>"},{"location":"middleware/#authlibmiddleware","title":"AuthlibMiddleware","text":"<p>\u4f5c\u4e3a Starlette \u4f1a\u8bdd\u4e2d\u95f4\u4ef6\u7684\u66ff\u4ee3\uff0c\u4f7f\u7528 authlib \u7684 jwt \u6a21\u5757\u3002</p>"},{"location":"middleware/#bugsnagmiddleware","title":"BugsnagMiddleware","text":"<p>\u4e00\u4e2a\u7528\u4e8e\u5c06\u5f02\u5e38\u8bb0\u5f55\u5230 Bugsnag \u7684\u4e2d\u95f4\u4ef6\u7c7b\u3002</p>"},{"location":"middleware/#csrfmiddleware","title":"CSRFMiddleware","text":"<p>\u7528\u4e8e\u9632\u6b62 CSRF \u653b\u51fb\u7684\u4e2d\u95f4\u4ef6\u3002\u8be5\u4e2d\u95f4\u4ef6\u5b9e\u73b0\u4e86\u53cc\u91cd\u63d0\u4ea4 Cookie \u6a21\u5f0f\uff0c\u5176\u4e2d\u8bbe\u7f6e\u4e86\u4e00\u4e2a Cookie\uff0c\u7136\u540e\u5c06\u5176\u4e0e <code>x-csrftoken</code> HTTP \u5934\u8fdb\u884c\u6bd4\u8f83\u3002</p>"},{"location":"middleware/#earlydatamiddleware","title":"EarlyDataMiddleware","text":"<p>\u7528\u4e8e\u68c0\u6d4b\u548c\u62d2\u7edd TLSv1.3 \u65e9\u671f\u6570\u636e \u8bf7\u6c42\u7684\u4e2d\u95f4\u4ef6\u548c\u88c5\u9970\u5668\u3002</p>"},{"location":"middleware/#prometheusmiddleware","title":"PrometheusMiddleware","text":"<p>\u4e00\u4e2a\u7528\u4e8e\u6355\u83b7\u4e0e\u8bf7\u6c42\u548c\u54cd\u5e94\u76f8\u5173\u7684 Prometheus \u6307\u6807\u7684\u4e2d\u95f4\u4ef6\u7c7b\uff0c\u5305\u62ec\u6b63\u5728\u8fdb\u884c\u7684\u8bf7\u6c42\u3001\u8ba1\u65f6\u7b49\u3002</p>"},{"location":"middleware/#proxyheadersmiddleware","title":"ProxyHeadersMiddleware","text":"<p>Uvicorn \u5305\u542b\u4e00\u4e2a\u4e2d\u95f4\u4ef6\u7c7b\uff0c\u7528\u4e8e\u5728\u4f7f\u7528\u4ee3\u7406\u670d\u52a1\u5668\u65f6\u6839\u636e <code>X-Forwarded-Proto</code> \u548c <code>X-Forwarded-For</code> \u5934\u90e8\u786e\u5b9a\u5ba2\u6237\u7aef IP \u5730\u5740\u3002\u5bf9\u4e8e\u66f4\u590d\u6742\u7684\u4ee3\u7406\u914d\u7f6e\uff0c\u53ef\u80fd\u9700\u8981\u8c03\u6574\u6b64\u4e2d\u95f4\u4ef6\u3002</p>"},{"location":"middleware/#ratelimitmiddleware","title":"RateLimitMiddleware","text":"<p>\u4e00\u4e2a\u901f\u7387\u9650\u5236\u4e2d\u95f4\u4ef6\u3002\u4f7f\u7528\u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d URL\uff1b\u7075\u6d3b\u7684\u89c4\u5219\uff1b\u9ad8\u5ea6\u53ef\u5b9a\u5236\u3002\u975e\u5e38\u6613\u4e8e\u4f7f\u7528\u3002</p>"},{"location":"middleware/#requestidmiddleware","title":"RequestIdMiddleware","text":"<p>\u4e00\u4e2a\u7528\u4e8e\u8bfb\u53d6/\u751f\u6210\u8bf7\u6c42 ID \u5e76\u5c06\u5176\u9644\u52a0\u5230\u5e94\u7528\u7a0b\u5e8f\u65e5\u5fd7\u7684\u4e2d\u95f4\u4ef6\u7c7b\u3002</p>"},{"location":"middleware/#rollbarmiddleware","title":"RollbarMiddleware","text":"<p>\u4e00\u4e2a\u7528\u4e8e\u5c06\u5f02\u5e38\u3001\u9519\u8bef\u548c\u65e5\u5fd7\u6d88\u606f\u8bb0\u5f55\u5230 Rollbar \u7684\u4e2d\u95f4\u4ef6\u7c7b\u3002</p>"},{"location":"middleware/#starletteopentracing","title":"StarletteOpentracing","text":"<p>\u4e00\u4e2a\u5c06\u8ffd\u8e2a\u4fe1\u606f\u53d1\u5c04\u5230 OpenTracing.io \u517c\u5bb9\u8ffd\u8e2a\u5668\u7684\u4e2d\u95f4\u4ef6\u7c7b\uff0c\u53ef\u7528\u4e8e\u5206\u6790\u548c\u76d1\u63a7\u5206\u5e03\u5f0f\u5e94\u7528\u7a0b\u5e8f\u3002</p>"},{"location":"middleware/#securecookiesmiddleware","title":"SecureCookiesMiddleware","text":"<p>\u4e00\u4e2a\u53ef\u5b9a\u5236\u7684\u4e2d\u95f4\u4ef6\uff0c\u7528\u4e8e\u4e3a Starlette \u5e94\u7528\u7a0b\u5e8f\u6dfb\u52a0\u81ea\u52a8\u7684 Cookie \u52a0\u5bc6\u548c\u89e3\u5bc6\u529f\u80fd\uff0c\u5e76\u989d\u5916\u652f\u6301\u73b0\u6709\u7684\u57fa\u4e8e Cookie \u7684\u4e2d\u95f4\u4ef6\u3002</p>"},{"location":"middleware/#timingmiddleware","title":"TimingMiddleware","text":"<p>\u4e00\u4e2a\u4e2d\u95f4\u4ef6\u7c7b\uff0c\u7528\u4e8e\u4e3a\u6bcf\u4e2a\u901a\u8fc7\u5b83\u7684\u8bf7\u6c42\u53d1\u5c04\u65f6\u95f4\u4fe1\u606f\uff08CPU \u548c\u58c1\u949f\u65f6\u95f4\uff09\u3002\u5305\u62ec\u5982\u4f55\u5c06\u8fd9\u4e9b\u65f6\u95f4\u4f5c\u4e3a statsd \u6307\u6807\u53d1\u5c04\u7684\u793a\u4f8b\u3002</p>"},{"location":"middleware/#wsgimiddleware","title":"WSGIMiddleware","text":"<p>\u4e00\u4e2a\u4e2d\u95f4\u4ef6\u7c7b\uff0c\u7528\u4e8e\u5c06 WSGI \u5e94\u7528\u7a0b\u5e8f\u8f6c\u6362\u4e3a ASGI \u5e94\u7528\u7a0b\u5e8f\u3002</p>"},{"location":"release-notes/","title":"\u53d1\u5e03\u5907\u6ce8","text":""},{"location":"release-notes/#041320241118","title":"0.41.3\uff082024\u5e7411\u670818\u65e5\uff09","text":""},{"location":"release-notes/#_1","title":"\u4fee\u590d","text":"<ul> <li>\u5728 <code>TestClient</code> \u4e2d\u6392\u9664\u67e5\u8be2\u53c2\u6570\u4ece <code>scope[raw_path]</code> #2716\u3002</li> <li>\u5c06 <code>dict</code> \u66ff\u6362\u4e3a <code>Mapping</code> \u5728 <code>HTTPException.headers</code> #2749\u3002</li> <li>\u4fee\u6b63\u4e2d\u95f4\u4ef6\u53c2\u6570\u4f20\u9012\u5e76\u6539\u8fdb\u5de5\u5382\u6a21\u5f0f #2752\u3002</li> </ul>"},{"location":"release-notes/#041220241027","title":"0.41.2\uff082024\u5e7410\u670827\u65e5\uff09","text":""},{"location":"release-notes/#_2","title":"\u4fee\u590d","text":"<ul> <li>\u8fd8\u539f <code>starlette[full]</code> \u989d\u5916\u5305\u4e2d\u7684 <code>python-multipart</code> \u7248\u672c\u66f4\u65b0 #2737\u3002</li> </ul>"},{"location":"release-notes/#041120241024","title":"0.41.1\uff082024\u5e7410\u670824\u65e5\uff09","text":""},{"location":"release-notes/#_3","title":"\u4fee\u590d","text":"<ul> <li>\u5c06\u6700\u4f4e <code>python-multipart</code> \u7248\u672c\u66f4\u65b0\u81f3 <code>0.0.13</code> #2734\u3002</li> <li>\u5c06 <code>python-multipart</code> \u7684\u5bfc\u5165\u66f4\u6539\u4e3a <code>python_multipart</code> #2733\u3002</li> </ul>"},{"location":"release-notes/#041020241015","title":"0.41.0\uff082024\u5e7410\u670815\u65e5\uff09","text":""},{"location":"release-notes/#_4","title":"\u65b0\u589e","text":"<ul> <li>\u5141\u8bb8\u5728 <code>websocket.accept()</code> \u4e4b\u524d\u5f15\u53d1 <code>HTTPException</code> #2725\u3002</li> </ul>"},{"location":"release-notes/#040020241015","title":"0.40.0\uff082024\u5e7410\u670815\u65e5\uff09","text":"<p>\u672c\u7248\u672c\u4fee\u590d\u4e86\u901a\u8fc7 <code>multipart/form-data</code> \u8bf7\u6c42\u8fdb\u884c\u7684\u62d2\u7edd\u670d\u52a1\uff08DoS\uff09\u653b\u51fb\u3002</p> <p>\u60a8\u53ef\u4ee5\u67e5\u770b\u5b8c\u6574\u7684\u5b89\u5168\u516c\u544a\uff1a GHSA-f96h-pmfr-66vw</p>"},{"location":"release-notes/#_5","title":"\u4fee\u590d","text":"<ul> <li>\u4e3a <code>MultiPartParser</code> \u6dfb\u52a0\u4e86 <code>max_part_size</code> \u4ee5\u9650\u5236 <code>multipart/form-data</code> \u8bf7\u6c42\u4e2d\u90e8\u5206\u7684\u5927\u5c0f   fd038f3\u3002</li> </ul>"},{"location":"release-notes/#03922024929","title":"0.39.2\uff082024\u5e749\u670829\u65e5\uff09","text":""},{"location":"release-notes/#_6","title":"\u4fee\u590d","text":"<ul> <li>\u5141\u8bb8\u5728\u4ec5\u6709 \"app\" \u8303\u56f4\u65f6\u4f7f\u7528 <code>request.url_for</code> #2672\u3002</li> <li>\u4fee\u6b63\u5185\u90e8\u7c7b\u578b\u63d0\u793a\u4ee5\u652f\u6301 <code>python-multipart==0.0.12</code> #2708\u3002</li> </ul>"},{"location":"release-notes/#03912024925","title":"0.39.1\uff082024\u5e749\u670825\u65e5\uff09","text":""},{"location":"release-notes/#_7","title":"\u4fee\u590d","text":"<ul> <li>\u907f\u514d\u5728 <code>responses.py</code> \u548c <code>schemas.py</code> \u4e2d\u91cd\u65b0\u7f16\u8bd1\u6b63\u5219\u8868\u8fbe\u5f0f #2700\u3002</li> <li>\u901a\u8fc7\u79fb\u9664\u6b63\u5219\u8868\u8fbe\u5f0f\u7684\u4f7f\u7528\u63d0\u9ad8 <code>get_route_path</code> \u7684\u6027\u80fd #2701\u3002</li> <li>\u5728\u5904\u7406\u591a\u4e2a\u8303\u56f4\u65f6\u8003\u8651 <code>FileResponse.chunk_size</code> #2703\u3002</li> <li>\u4f7f\u7528 <code>token_hex</code> \u751f\u6210 multipart \u8fb9\u754c\u5b57\u7b26\u4e32 #2702\u3002</li> </ul>"},{"location":"release-notes/#03902024923","title":"0.39.0\uff082024\u5e749\u670823\u65e5\uff09","text":""},{"location":"release-notes/#_8","title":"\u65b0\u589e","text":"<ul> <li>\u4e3a <code>FileResponse</code> \u6dfb\u52a0\u5bf9 HTTP Range \u7684\u652f\u6301 #2697\u3002</li> </ul>"},{"location":"release-notes/#03862024922","title":"0.38.6\uff082024\u5e749\u670822\u65e5\uff09","text":""},{"location":"release-notes/#_9","title":"\u4fee\u590d","text":"<ul> <li>\u5728 <code>TestClient</code> \u4e2d\u5173\u95ed\u672a\u5173\u95ed\u7684 <code>MemoryObjectReceiveStream</code> #2693\u3002</li> </ul>"},{"location":"release-notes/#0385202497","title":"0.38.5\uff082024\u5e749\u67087\u65e5\uff09","text":""},{"location":"release-notes/#_10","title":"\u4fee\u590d","text":"<ul> <li>\u5728 <code>BaseHTTPMiddleware</code> \u4e2d\u5b89\u6392 <code>BackgroundTasks</code> #2688\u3002   \u8be5\u884c\u4e3a\u5728 0.38.3 \u4e2d\u88ab\u79fb\u9664\uff0c\u73b0\u5728\u5df2\u6062\u590d\u3002</li> </ul>"},{"location":"release-notes/#0384202491","title":"0.38.4\uff082024\u5e749\u67081\u65e5\uff09","text":""},{"location":"release-notes/#_11","title":"\u4fee\u590d","text":"<ul> <li>\u786e\u4fdd\u5728 <code>get_route_path</code> \u51fd\u6570\u4e2d\u51c6\u786e\u5730\u79fb\u9664 <code>root_path</code> #2600\u3002</li> </ul>"},{"location":"release-notes/#0383202491","title":"0.38.3\uff082024\u5e749\u67081\u65e5\uff09","text":""},{"location":"release-notes/#_12","title":"\u65b0\u589e","text":"<ul> <li>\u652f\u6301 Python 3.13 #2662\u3002</li> </ul>"},{"location":"release-notes/#_13","title":"\u4fee\u590d","text":"<ul> <li>\u4e0d\u901a\u8fc7 <code>StreamingResponse</code> \u5728 <code>BaseHTTPMiddleware</code> \u4e2d\u8f6e\u8be2\u65ad\u5f00\u8fde\u63a5 #2620\u3002</li> </ul>"},{"location":"release-notes/#03822024727","title":"0.38.2\uff082024\u5e747\u670827\u65e5\uff09","text":""},{"location":"release-notes/#_14","title":"\u4fee\u590d","text":"<ul> <li>\u4e0d\u5047\u8bbe\u6240\u6709\u4f8b\u7a0b\u5728 <code>routing.get_name()</code> \u4e2d\u90fd\u6709 <code>__name__</code> #2648\u3002</li> </ul>"},{"location":"release-notes/#03812024723","title":"0.38.1\uff082024\u5e747\u670823\u65e5\uff09","text":""},{"location":"release-notes/#_15","title":"\u79fb\u9664","text":"<ul> <li>\u6062\u590d \"\u6dfb\u52a0\u5bf9 ASGI pathsend \u6269\u5c55\u7684\u652f\u6301\" #2649\u3002</li> </ul>"},{"location":"release-notes/#03802024720","title":"0.38.0\uff082024\u5e747\u670820\u65e5\uff09","text":""},{"location":"release-notes/#_16","title":"\u65b0\u589e","text":"<ul> <li>\u5141\u8bb8\u5728 <code>StreamingResponse</code> \u548c <code>Response</code> \u4e2d\u4f7f\u7528 <code>memoryview</code> #2576 \u548c #2577\u3002</li> <li>\u5f53\u8bf7\u6c42\u7684\u6587\u4ef6\u540d\u8fc7\u957f\u65f6\uff0c\u5728 <code>StaticFiles</code> \u4e2d\u53d1\u9001 404 \u9519\u8bef\uff0c\u800c\u4e0d\u662f 500 \u9519\u8bef #2583\u3002</li> </ul>"},{"location":"release-notes/#_17","title":"\u66f4\u6539","text":"<ul> <li>\u5728\u65e0\u6548\u7684 <code>Jinja2Template</code> \u5b9e\u4f8b\u5316\u53c2\u6570\u4e0a\u5feb\u901f\u5931\u8d25 #2568\u3002</li> <li>\u4ec5\u68c0\u67e5\u7aef\u70b9\u5904\u7406\u7a0b\u5e8f\u662f\u5426\u4e3a\u5f02\u6b65\u4e00\u6b21 #2536\u3002</li> </ul>"},{"location":"release-notes/#_18","title":"\u4fee\u590d","text":"<ul> <li>\u4e3a <code>WebSocketTestSession</code> \u6dfb\u52a0\u9002\u5f53\u7684\u540c\u6b65 #2597\u3002</li> </ul>"},{"location":"release-notes/#0372202435","title":"0.37.2\uff082024\u5e743\u67085\u65e5\uff09","text":""},{"location":"release-notes/#_19","title":"\u65b0\u589e","text":"<ul> <li>\u5c06 <code>bytes</code> \u6dfb\u52a0\u5230 <code>_RequestData</code> \u7c7b\u578b #2510\u3002</li> </ul>"},{"location":"release-notes/#_20","title":"\u4fee\u590d","text":"<ul> <li>\u6062\u590d \"\u5c06 <code>scope[\"client\"]</code> \u8bbe\u7f6e\u4e3a <code>None</code> \u5728 <code>TestClient</code> \u4e2d\"\uff08#2377\uff09#2525\u3002</li> <li>\u79fb\u9664 <code>TestClient</code> \u4e2d\u4f20\u9012\u7ed9 <code>httpx.Client</code> \u7684\u5df2\u5f03\u7528\u7684 <code>app</code> \u53c2\u6570 #2526\u3002</li> </ul>"},{"location":"release-notes/#0371202429","title":"0.37.1\uff082024\u5e742\u67089\u65e5\uff09","text":""},{"location":"release-notes/#_21","title":"\u4fee\u590d","text":"<ul> <li>\u5728 <code>Config</code> \u4e2d\u7f3a\u5c11 env \u6587\u4ef6\u65f6\u53d1\u51fa\u8b66\u544a\uff0c\u800c\u4e0d\u662f\u629b\u51fa\u5f02\u5e38 #2485\u3002</li> </ul>"},{"location":"release-notes/#0370202425","title":"0.37.0\uff082024\u5e742\u67085\u65e5\uff09","text":""},{"location":"release-notes/#_22","title":"\u65b0\u589e","text":"<ul> <li>\u652f\u6301 WebSocket \u62d2\u7edd\u54cd\u5e94\u7684 ASGI \u6269\u5c55 #2041\u3002</li> </ul>"},{"location":"release-notes/#0363202424","title":"0.36.3\uff082024\u5e742\u67084\u65e5\uff09","text":""},{"location":"release-notes/#_23","title":"\u4fee\u590d","text":"<ul> <li>\u5728\u5f02\u6b65\u4e0a\u4e0b\u6587\u4e2d\u521b\u5efa <code>anyio.Event</code> #2459\u3002</li> </ul>"},{"location":"release-notes/#0362202423","title":"0.36.2\uff082024\u5e742\u67083\u65e5\uff09","text":""},{"location":"release-notes/#_24","title":"\u4fee\u590d","text":"<ul> <li>\u5347\u7ea7 <code>python-multipart</code> \u5230 <code>0.0.7</code> 13e5c26\u3002</li> <li>\u907f\u514d <code>Content-Type</code> \u4e0a\u7684\u91cd\u590d charset #2443\u3002</li> </ul>"},{"location":"release-notes/#03612024123","title":"0.36.1\uff082024\u5e741\u670823\u65e5\uff09","text":""},{"location":"release-notes/#_25","title":"\u4fee\u590d","text":"<ul> <li>\u5728\u68c0\u67e5\u6269\u5c55\u4e4b\u524d\u68c0\u67e5 <code>scope</code> \u4e2d\u662f\u5426\u5b58\u5728 \"extensions\" #2438\u3002</li> </ul>"},{"location":"release-notes/#03602024122","title":"0.36.0\uff082024\u5e741\u670822\u65e5\uff09","text":""},{"location":"release-notes/#_26","title":"\u65b0\u589e","text":"<ul> <li>\u6dfb\u52a0\u5bf9 ASGI <code>pathsend</code> \u6269\u5c55\u7684\u652f\u6301 #2435\u3002</li> <li>\u5728\u5173\u95ed\u65f6\u53d6\u6d88 <code>WebSocketTestSession</code> #2427\u3002</li> <li>\u5f53 <code>WebSocket.send()</code> \u9047\u5230 <code>IOError</code> \u65f6\u629b\u51fa <code>WebSocketDisconnect</code> #2425\u3002</li> <li>\u5f53 <code>Config</code> \u4e2d\u7684 <code>env_file</code> \u53c2\u6570\u65e0\u6548\u65f6\u629b\u51fa <code>FileNotFoundError</code> #2422\u3002</li> </ul>"},{"location":"release-notes/#03512024111","title":"0.35.1\uff082024\u5e741\u670811\u65e5\uff09","text":""},{"location":"release-notes/#_27","title":"\u4fee\u590d","text":"<ul> <li>\u505c\u6b62\u5728 <code>StaticFiles</code> \u4e2d\u7684 <code>FileResponse</code> \u4e2d\u4f7f\u7528\u5df2\u5f03\u7528\u7684 \"method\" \u53c2\u6570 #2406\u3002</li> <li>\u4f7f <code>typing-extensions</code> \u53d8\u4e3a\u53ef\u9009 #2409\u3002</li> </ul>"},{"location":"release-notes/#03502024111","title":"0.35.0\uff082024\u5e741\u670811\u65e5\uff09","text":""},{"location":"release-notes/#_28","title":"\u65b0\u589e","text":"<ul> <li>\u5411 <code>Middleware</code> \u6dfb\u52a0 <code>*args</code> \u5e76\u6539\u8fdb\u5176\u7c7b\u578b\u63d0\u793a #2381\u3002</li> </ul>"},{"location":"release-notes/#_29","title":"\u4fee\u590d","text":"<ul> <li>\u5728 <code>iterate_in_threadpool</code> \u4e2d\u4f7f\u7528 <code>Iterable</code> \u66ff\u4ee3 <code>Iterator</code> #2362\u3002</li> </ul>"},{"location":"release-notes/#_30","title":"\u66f4\u6539","text":"<ul> <li>\u5904\u7406 <code>root_path</code> \u4ee5\u4fdd\u6301\u4e0e\u6302\u8f7d\u7684 ASGI \u5e94\u7528\u7a0b\u5e8f\u548c WSGI \u7684\u517c\u5bb9\u6027 #2400\u3002</li> <li>\u5c06 <code>TestClient</code> \u4e2d\u7684 <code>scope[\"client\"]</code> \u8bbe\u7f6e\u4e3a <code>None</code> #2377\u3002</li> </ul>"},{"location":"release-notes/#034020231216","title":"0.34.0\uff082023\u5e7412\u670816\u65e5\uff09","text":""},{"location":"release-notes/#_31","title":"\u65b0\u589e","text":"<ul> <li>\u5728 <code>run_in_threadpool</code> \u4e2d\u4f7f\u7528 <code>ParamSpec</code> #2375\u3002</li> <li>\u6dfb\u52a0 <code>UploadFile.__repr__</code> #2360\u3002</li> </ul>"},{"location":"release-notes/#_32","title":"\u4fee\u590d","text":"<ul> <li>\u5728 <code>TestClient</code> \u4e2d\u6b63\u786e\u5408\u5e76 URL #2376\u3002</li> <li>\u5728 <code>StaticFiles</code> \u4e2d\u8003\u8651\u5f31 ETag #2334\u3002</li> </ul>"},{"location":"release-notes/#_33","title":"\u5f03\u7528","text":"<ul> <li>\u5f03\u7528 <code>FileResponse(method=...)</code> \u53c2\u6570 #2366\u3002</li> </ul>"},{"location":"release-notes/#03302023121","title":"0.33.0\uff082023\u5e7412\u67081\u65e5\uff09","text":""},{"location":"release-notes/#_34","title":"\u65b0\u589e","text":"<ul> <li>\u4e3a <code>Route</code>/<code>WebSocketRoute</code> \u6dfb\u52a0 <code>middleware</code> #2349\u3002</li> <li>\u4e3a <code>Router</code> \u6dfb\u52a0 <code>middleware</code> #2351\u3002</li> </ul>"},{"location":"release-notes/#_35","title":"\u4fee\u590d","text":"<ul> <li>\u4e0d\u8986\u76d6 <code>\"path\"</code> \u548c <code>\"root_path\"</code> \u8303\u56f4\u952e #2352\u3002</li> <li>\u5728 <code>WebSocket.send_json()</code> \u4e2d\u5bf9 <code>json.dumps()</code> \u8bbe\u7f6e <code>ensure_ascii=False</code> #2341\u3002</li> </ul>"},{"location":"release-notes/#0320post12023115","title":"0.32.0.post1\uff082023\u5e7411\u67085\u65e5\uff09","text":""},{"location":"release-notes/#_36","title":"\u4fee\u590d","text":"<ul> <li>\u5c06 mkdocs-material \u4ece 9.1.17 \u8fd8\u539f\u5230 9.4.7 #2326\u3002</li> </ul>"},{"location":"release-notes/#03202023114","title":"0.32.0\uff082023\u5e7411\u67084\u65e5\uff09","text":""},{"location":"release-notes/#_37","title":"\u65b0\u589e","text":"<ul> <li>\u5728 <code>WebSocketDisconnect</code> \u4e2d\u53d1\u9001 <code>reason</code> #2309\u3002</li> <li>\u5411 <code>SessionMiddleware</code> \u6dfb\u52a0 <code>domain</code> \u53c2\u6570 #2280\u3002</li> </ul>"},{"location":"release-notes/#_38","title":"\u66f4\u6539","text":"<ul> <li>\u5728 <code>_TemplateResponse</code> \u4e2d\u7ee7\u627f\u81ea <code>HTMLResponse</code> \u800c\u4e0d\u662f <code>Response</code> #2274\u3002</li> <li>\u6062\u590d <code>Response.render</code> \u7684\u7c7b\u578b\u6ce8\u89e3\u5230 0.31.0 \u4e4b\u524d\u7684\u72b6\u6001 #2264\u3002</li> </ul>"},{"location":"release-notes/#03112023826","title":"0.31.1\uff082023\u5e748\u670826\u65e5\uff09","text":""},{"location":"release-notes/#_39","title":"\u4fee\u590d","text":"<ul> <li>\u4fee\u590d\u5f53 <code>exceptiongroup</code> \u4e0d\u53ef\u7528\u65f6\u7684\u5bfc\u5165\u9519\u8bef #2231\u3002</li> <li>\u4e3a\u81ea\u5b9a\u4e49 Jinja \u73af\u5883\u8bbe\u7f6e <code>url_for</code> \u5168\u5c40\u53d8\u91cf #2230\u3002</li> </ul>"},{"location":"release-notes/#03102023724","title":"0.31.0\uff082023\u5e747\u670824\u65e5\uff09","text":""},{"location":"release-notes/#_40","title":"\u65b0\u589e","text":"<ul> <li>\u6b63\u5f0f\u652f\u6301 Python 3.12 #2214\u3002</li> <li>\u652f\u6301 AnyIO 4.0 #2211\u3002</li> <li>\u4e25\u683c\u7c7b\u578b\u6ce8\u89e3 Starlette\uff08\u5728 mypy \u4e0a\u542f\u7528\u4e25\u683c\u6a21\u5f0f\uff09 #2180\u3002</li> </ul>"},{"location":"release-notes/#_41","title":"\u4fee\u590d","text":"<ul> <li>\u5728\u4f7f\u7528 <code>TestClient</code> \u65f6\uff0c\u4e0d\u5c06\u91cd\u590d\u7684\u5934\u4fe1\u606f\u5408\u5e76\u4e3a\u5355\u4e2a\u5b57\u7b26\u4e32 #2219\u3002</li> </ul>"},{"location":"release-notes/#0300-july-13-2023","title":"0.30.0 (July 13, 2023)","text":""},{"location":"release-notes/#removed","title":"Removed","text":"<ul> <li>Drop Python 3.7 support #2178.</li> </ul>"},{"location":"release-notes/#0290-july-13-2023","title":"0.29.0 (July 13, 2023)","text":""},{"location":"release-notes/#added","title":"Added","text":"<ul> <li>Add <code>follow_redirects</code> parameter to <code>TestClient</code> #2207.</li> <li>Add <code>__str__</code> to <code>HTTPException</code> and <code>WebSocketException</code> #2181.</li> <li>Warn users when using <code>lifespan</code> together with <code>on_startup</code>/<code>on_shutdown</code> #2193.</li> <li>Collect routes from <code>Host</code> to generate the OpenAPI schema #2183.</li> <li>Add <code>request</code> argument to <code>TemplateResponse</code> #2191.</li> </ul>"},{"location":"release-notes/#fixed","title":"Fixed","text":"<ul> <li>Stop <code>body_stream</code> in case <code>more_body=False</code> on <code>BaseHTTPMiddleware</code> #2194.</li> </ul>"},{"location":"release-notes/#0280-june-7-2023","title":"0.28.0 (June 7, 2023)","text":""},{"location":"release-notes/#changed","title":"Changed","text":"<ul> <li>Reuse <code>Request</code>'s body buffer for call_next in <code>BaseHTTPMiddleware</code> #1692.</li> <li>Move exception handling logic to <code>Route</code> #2026.</li> </ul>"},{"location":"release-notes/#added_1","title":"Added","text":"<ul> <li>Add <code>env</code> parameter to <code>Jinja2Templates</code>, and deprecate <code>**env_options</code> #2159.</li> <li>Add clear error message when <code>httpx</code> is not installed #2177.</li> </ul>"},{"location":"release-notes/#fixed_1","title":"Fixed","text":"<ul> <li>Allow \"name\" argument on <code>templates url_for()</code> #2127.</li> </ul>"},{"location":"release-notes/#0270-may-16-2023","title":"0.27.0 (May 16, 2023)","text":"<p>This release fixes a path traversal vulnerability in <code>StaticFiles</code>. You can view the full security advisory: https://github.com/encode/starlette/security/advisories/GHSA-v5gw-mw7f-84px</p>"},{"location":"release-notes/#added_2","title":"Added","text":"<ul> <li>Minify JSON websocket data via <code>send_json</code> https://github.com/encode/starlette/pull/2128</li> </ul>"},{"location":"release-notes/#fixed_2","title":"Fixed","text":"<ul> <li>Replace <code>commonprefix</code> by <code>commonpath</code> on <code>StaticFiles</code> 1797de4.</li> <li>Convert ImportErrors into ModuleNotFoundError #2135.</li> <li>Correct the RuntimeError message content in websockets #2141.</li> </ul>"},{"location":"release-notes/#0261-march-13-2023","title":"0.26.1 (March 13, 2023)","text":""},{"location":"release-notes/#fixed_3","title":"Fixed","text":"<ul> <li>Fix typing of Lifespan to allow subclasses of Starlette #2077.</li> </ul>"},{"location":"release-notes/#0260post1-march-9-2023","title":"0.26.0.post1 (March 9, 2023)","text":""},{"location":"release-notes/#fixed_4","title":"Fixed","text":"<ul> <li>Replace reference from Events to Lifespan on the mkdocs.yml #2072.</li> </ul>"},{"location":"release-notes/#0260-march-9-2023","title":"0.26.0 (March 9, 2023)","text":""},{"location":"release-notes/#added_3","title":"Added","text":"<ul> <li>Support lifespan state #2060,   #2065 and #2064.</li> </ul>"},{"location":"release-notes/#changed_1","title":"Changed","text":"<ul> <li>Change <code>url_for</code> signature to return a <code>URL</code> instance #1385.</li> </ul>"},{"location":"release-notes/#fixed_5","title":"Fixed","text":"<ul> <li>Allow \"name\" argument on <code>url_for()</code> and <code>url_path_for()</code> #2050.</li> </ul>"},{"location":"release-notes/#deprecated","title":"Deprecated","text":"<ul> <li>Deprecate <code>on_startup</code> and <code>on_shutdown</code> events #2070.</li> </ul>"},{"location":"release-notes/#0250-february-14-2023","title":"0.25.0 (February 14, 2023)","text":""},{"location":"release-notes/#fix","title":"Fix","text":"<ul> <li>Limit the number of fields and files when parsing <code>multipart/form-data</code> on the <code>MultipartParser</code> 8c74c2c and #2036.</li> </ul>"},{"location":"release-notes/#0240-february-6-2023","title":"0.24.0 (February 6, 2023)","text":""},{"location":"release-notes/#added_4","title":"Added","text":"<ul> <li>Allow <code>StaticFiles</code> to follow symlinks #1683.</li> <li>Allow <code>Request.form()</code> as a context manager #1903.</li> <li>Add <code>size</code> attribute to <code>UploadFile</code> #1405.</li> <li>Add <code>env_prefix</code> argument to <code>Config</code> #1990.</li> <li>Add template context processors #1904.</li> <li>Support <code>str</code> and <code>datetime</code> on <code>expires</code> parameter on the <code>Response.set_cookie</code> method #1908.</li> </ul>"},{"location":"release-notes/#changed_2","title":"Changed","text":"<ul> <li>Lazily build the middleware stack #2017.</li> <li>Make the <code>file</code> argument required on <code>UploadFile</code> #1413.</li> <li>Use debug extension instead of custom response template extension #1991.</li> </ul>"},{"location":"release-notes/#fixed_6","title":"Fixed","text":"<ul> <li>Fix url parsing of ipv6 urls on <code>URL.replace</code> #1965.</li> </ul>"},{"location":"release-notes/#0231-december-9-2022","title":"0.23.1 (December 9, 2022)","text":""},{"location":"release-notes/#fixed_7","title":"Fixed","text":"<ul> <li>Only stop receiving stream on <code>body_stream</code> if body is empty on the <code>BaseHTTPMiddleware</code> #1940.</li> </ul>"},{"location":"release-notes/#0230-december-5-2022","title":"0.23.0 (December 5, 2022)","text":""},{"location":"release-notes/#added_5","title":"Added","text":"<ul> <li>Add <code>headers</code> parameter to the <code>TestClient</code> #1966.</li> </ul>"},{"location":"release-notes/#deprecated_1","title":"Deprecated","text":"<ul> <li>Deprecate <code>Starlette</code> and <code>Router</code> decorators #1897.</li> </ul>"},{"location":"release-notes/#fixed_8","title":"Fixed","text":"<ul> <li>Fix bug on <code>FloatConvertor</code> regex #1973.</li> </ul>"},{"location":"release-notes/#0220-november-17-2022","title":"0.22.0 (November 17, 2022)","text":""},{"location":"release-notes/#changed_3","title":"Changed","text":"<ul> <li>Bypass <code>GZipMiddleware</code> when response includes <code>Content-Encoding</code> #1901.</li> </ul>"},{"location":"release-notes/#fixed_9","title":"Fixed","text":"<ul> <li>Remove unneeded <code>unquote()</code> from query parameters on the <code>TestClient</code> #1953.</li> <li>Make sure <code>MutableHeaders._list</code> is actually a <code>list</code> #1917.</li> <li>Import compatibility with the next version of <code>AnyIO</code> #1936.</li> </ul>"},{"location":"release-notes/#0210-september-26-2022","title":"0.21.0 (September 26, 2022)","text":"<p>This release replaces the underlying HTTP client used on the <code>TestClient</code> (<code>requests</code> :arrow_right: <code>httpx</code>), and as those clients differ a bit on their API, your test suite will likely break. To make the migration smoother, you can use the <code>bump-testclient</code> tool.</p>"},{"location":"release-notes/#changed_4","title":"Changed","text":"<ul> <li>Replace <code>requests</code> with <code>httpx</code> in <code>TestClient</code> #1376.</li> </ul>"},{"location":"release-notes/#added_6","title":"Added","text":"<ul> <li>Add <code>WebSocketException</code> and support for WebSocket exception handlers #1263.</li> <li>Add <code>middleware</code> parameter to <code>Mount</code> class #1649.</li> <li>Officially support Python 3.11 #1863.</li> <li>Implement <code>__repr__</code> for route classes #1864.</li> </ul>"},{"location":"release-notes/#fixed_10","title":"Fixed","text":"<ul> <li>Fix bug on which <code>BackgroundTasks</code> were cancelled when using <code>BaseHTTPMiddleware</code> and client disconnected #1715.</li> </ul>"},{"location":"release-notes/#0204-june-28-2022","title":"0.20.4 (June 28, 2022)","text":""},{"location":"release-notes/#fixed_11","title":"Fixed","text":"<ul> <li>Remove converter from path when generating OpenAPI schema #1648.</li> </ul>"},{"location":"release-notes/#0203-june-10-2022","title":"0.20.3 (June 10, 2022)","text":""},{"location":"release-notes/#fixed_12","title":"Fixed","text":"<ul> <li>Revert \"Allow <code>StaticFiles</code> to follow symlinks\" #1681.</li> </ul>"},{"location":"release-notes/#0202-june-7-2022","title":"0.20.2 (June 7, 2022)","text":""},{"location":"release-notes/#fixed_13","title":"Fixed","text":"<ul> <li>Fix regression on route paths with colons #1675.</li> <li>Allow <code>StaticFiles</code> to follow symlinks #1337.</li> </ul>"},{"location":"release-notes/#0201-may-28-2022","title":"0.20.1 (May 28, 2022)","text":""},{"location":"release-notes/#fixed_14","title":"Fixed","text":"<ul> <li>Improve detection of async callables #1444.</li> <li>Send 400 (Bad Request) when <code>boundary</code> is missing #1617.</li> <li>Send 400 (Bad Request) when missing \"name\" field on <code>Content-Disposition</code> header #1643.</li> <li>Do not send empty data to <code>StreamingResponse</code> on <code>BaseHTTPMiddleware</code> #1609.</li> <li>Add <code>__bool__</code> dunder for <code>Secret</code> #1625.</li> </ul>"},{"location":"release-notes/#0200-may-3-2022","title":"0.20.0 (May 3, 2022)","text":""},{"location":"release-notes/#removed_1","title":"Removed","text":"<ul> <li>Drop Python 3.6 support #1357 and #1616.</li> </ul>"},{"location":"release-notes/#0191-april-22-2022","title":"0.19.1 (April 22, 2022)","text":""},{"location":"release-notes/#fixed_15","title":"Fixed","text":"<ul> <li>Fix inference of <code>Route.name</code> when created from methods #1553.</li> <li>Avoid <code>TypeError</code> on <code>websocket.disconnect</code> when code is <code>None</code> #1574.</li> </ul>"},{"location":"release-notes/#deprecated_2","title":"Deprecated","text":"<ul> <li>Deprecate <code>WS_1004_NO_STATUS_RCVD</code> and <code>WS_1005_ABNORMAL_CLOSURE</code> in favor of <code>WS_1005_NO_STATUS_RCVD</code> and <code>WS_1006_ABNORMAL_CLOSURE</code>, as the previous constants didn't match the WebSockets specs #1580.</li> </ul>"},{"location":"release-notes/#0190-march-9-2022","title":"0.19.0 (March 9, 2022)","text":""},{"location":"release-notes/#added_7","title":"Added","text":"<ul> <li>Error handler will always run, even if the error happens on a background task #761.</li> <li>Add <code>headers</code> parameter to <code>HTTPException</code> #1435.</li> <li>Internal responses with <code>405</code> status code insert an <code>Allow</code> header, as described by RFC 7231 #1436.</li> <li>The <code>content</code> argument in <code>JSONResponse</code> is now required #1431.</li> <li>Add custom URL convertor register #1437.</li> <li>Add content disposition type parameter to <code>FileResponse</code> #1266.</li> <li>Add next query param with original request URL in requires decorator #920.</li> <li>Add <code>raw_path</code> to <code>TestClient</code> scope #1445.</li> <li>Add union operators to <code>MutableHeaders</code> #1240.</li> <li>Display missing route details on debug page #1363.</li> <li>Change <code>anyio</code> required version range to <code>&gt;=3.4.0,&lt;5.0</code> #1421 and #1460.</li> <li>Add <code>typing-extensions&gt;=3.10</code> requirement - used only on lower versions than Python 3.10 #1475.</li> </ul>"},{"location":"release-notes/#fixed_16","title":"Fixed","text":"<ul> <li>Prevent <code>BaseHTTPMiddleware</code> from hiding errors of <code>StreamingResponse</code> and mounted applications #1459.</li> <li><code>SessionMiddleware</code> uses an explicit <code>path=...</code>, instead of defaulting to the ASGI 'root_path' #1512.</li> <li><code>Request.client</code> is now compliant with the ASGI specifications #1462.</li> <li>Raise <code>KeyError</code> at early stage for missing boundary #1349.</li> </ul>"},{"location":"release-notes/#deprecated_3","title":"Deprecated","text":"<ul> <li>Deprecate WSGIMiddleware in favor of a2wsgi #1504.</li> <li>Deprecate <code>run_until_first_complete</code> #1443.</li> </ul>"},{"location":"release-notes/#0180-january-23-2022","title":"0.18.0 (January 23, 2022)","text":""},{"location":"release-notes/#added_8","title":"Added","text":"<ul> <li>Change default chunk size from 4Kb to 64Kb on <code>FileResponse</code> #1345.</li> <li>Add support for <code>functools.partial</code> in <code>WebSocketRoute</code> #1356.</li> <li>Add <code>StaticFiles</code> packages with directory #1350.</li> <li>Allow environment options in <code>Jinja2Templates</code> #1401.</li> <li>Allow HEAD method on <code>HttpEndpoint</code> #1346.</li> <li>Accept additional headers on <code>websocket.accept</code> message #1361 and #1422.</li> <li>Add <code>reason</code> to <code>WebSocket</code> close ASGI event #1417.</li> <li>Add headers attribute to <code>UploadFile</code> #1382.</li> <li>Don't omit <code>Content-Length</code> header for <code>Content-Length: 0</code> cases #1395.</li> <li>Don't set headers for responses with 1xx, 204 and 304 status code #1397.</li> <li><code>SessionMiddleware.max_age</code> now accepts <code>None</code>, so cookie can last as long as the browser session #1387.</li> </ul>"},{"location":"release-notes/#fixed_17","title":"Fixed","text":"<ul> <li>Tweak <code>hashlib.md5()</code> function on <code>FileResponse</code>s ETag generation. The parameter <code>usedforsecurity</code> flag is set to <code>False</code>, if the flag is available on the system. This fixes an error raised on systems with FIPS enabled #1366 and #1410.</li> <li>Fix <code>path_params</code> type on <code>url_path_for()</code> method i.e. turn <code>str</code> into <code>Any</code> #1341.</li> <li><code>Host</code> now ignores <code>port</code> on routing #1322.</li> </ul>"},{"location":"release-notes/#0171-november-17-2021","title":"0.17.1 (November 17, 2021)","text":""},{"location":"release-notes/#fixed_18","title":"Fixed","text":"<ul> <li>Fix <code>IndexError</code> in authentication <code>requires</code> when wrapped function arguments are distributed between <code>*args</code> and <code>**kwargs</code> #1335.</li> </ul>"},{"location":"release-notes/#0170-november-4-2021","title":"0.17.0 (November 4, 2021)","text":""},{"location":"release-notes/#added_9","title":"Added","text":"<ul> <li><code>Response.delete_cookie</code> now accepts the same parameters as <code>Response.set_cookie</code> #1228.</li> <li>Update the <code>Jinja2Templates</code> constructor to allow <code>PathLike</code> #1292.</li> </ul>"},{"location":"release-notes/#fixed_19","title":"Fixed","text":"<ul> <li>Fix BadSignature exception handling in SessionMiddleware #1264.</li> <li>Change <code>HTTPConnection.__getitem__</code> return type from <code>str</code> to <code>typing.Any</code> #1118.</li> <li>Change <code>ImmutableMultiDict.getlist</code> return type from <code>typing.List[str]</code> to <code>typing.List[typing.Any]</code> #1235.</li> <li>Handle <code>OSError</code> exceptions on <code>StaticFiles</code> #1220.</li> <li>Fix <code>StaticFiles</code> 404.html in HTML mode #1314.</li> <li>Prevent anyio.ExceptionGroup in error views under a BaseHTTPMiddleware #1262.</li> </ul>"},{"location":"release-notes/#removed_2","title":"Removed","text":"<ul> <li>Remove GraphQL support #1198.</li> </ul>"},{"location":"release-notes/#0160-july-19-2021","title":"0.16.0 (July 19, 2021)","text":""},{"location":"release-notes/#added_10","title":"Added","text":"<ul> <li>Added Encode funding option    #1219</li> </ul>"},{"location":"release-notes/#fixed_20","title":"Fixed","text":"<ul> <li><code>starlette.websockets.WebSocket</code> instances are now hashable and compare by identity     #1039</li> <li>A number of fixes related to running task groups in lifespan    #1213,    #1227</li> </ul>"},{"location":"release-notes/#deprecatedremoved","title":"Deprecated/removed","text":"<ul> <li>The method <code>starlette.templates.Jinja2Templates.get_env</code> was removed    #1218</li> <li>The ClassVar <code>starlette.testclient.TestClient.async_backend</code> was removed,    the backend is now configured using constructor kwargs    #1211</li> <li>Passing an Async Generator Function or a Generator Function to <code>starlette.routing.Router(lifespan=)</code> is deprecated. You should wrap your lifespan in <code>@contextlib.asynccontextmanager</code>.    #1227 #1110</li> </ul>"},{"location":"release-notes/#0150-june-23-2021","title":"0.15.0 (June 23, 2021)","text":"<p>This release includes major changes to the low-level asynchronous parts of Starlette. As a result, Starlette now depends on AnyIO and some minor API changes have occurred. Another significant change with this release is the deprecation of built-in GraphQL support.</p>"},{"location":"release-notes/#added_11","title":"Added","text":"<ul> <li>Starlette now supports Trio as an async runtime via   AnyIO - #1157.</li> <li><code>TestClient.websocket_connect()</code> now must be used as a context manager.</li> <li>Initial support for Python 3.10 - #1201.</li> <li>The compression level used in <code>GZipMiddleware</code> is now adjustable -   #1128.</li> </ul>"},{"location":"release-notes/#fixed_21","title":"Fixed","text":"<ul> <li>Several fixes to <code>CORSMiddleware</code>. See #1111,   #1112,   #1113,   #1199.</li> <li>Improved exception messages in the case of duplicated path parameter names -   #1177.</li> <li><code>RedirectResponse</code> now uses <code>quote</code> instead of <code>quote_plus</code> encoding for the <code>Location</code> header   to better match the behaviour in other frameworks such as Django -   #1164.</li> <li>Exception causes are now preserved in more cases -   #1158.</li> <li>Session cookies now use the ASGI root path in the case of mounted applications -   #1147.</li> <li>Fixed a cache invalidation bug when static files were deleted in certain circumstances -   #1023.</li> <li>Improved memory usage of <code>BaseHTTPMiddleware</code> when handling large responses -   #1012 fixed via #1157</li> </ul>"},{"location":"release-notes/#deprecatedremoved_1","title":"Deprecated/removed","text":"<ul> <li>Built-in GraphQL support via the <code>GraphQLApp</code> class has been deprecated and will be removed in a   future release. Please see #619. GraphQL is not   supported on Python 3.10.</li> <li>The <code>executor</code> parameter to <code>GraphQLApp</code> was removed. Use <code>executor_class</code> instead.</li> <li>The <code>workers</code> parameter to <code>WSGIMiddleware</code> was removed. This hasn't had any effect since   Starlette v0.6.3.</li> </ul>"},{"location":"release-notes/#0142-february-2-2021","title":"0.14.2 (February 2, 2021)","text":""},{"location":"release-notes/#fixed_22","title":"Fixed","text":"<ul> <li>Fixed <code>ServerErrorMiddleware</code> compatibility with Python 3.9.1/3.8.7 when debug mode is enabled -   #1132.</li> <li>Fixed unclosed socket <code>ResourceWarning</code>s when using the <code>TestClient</code> with WebSocket endpoints -   #1132.</li> <li>Improved detection of <code>async</code> endpoints wrapped in <code>functools.partial</code> on Python 3.8+ -   #1106.</li> </ul>"},{"location":"release-notes/#0141-november-9th-2020","title":"0.14.1 (November 9th, 2020)","text":""},{"location":"release-notes/#removed_3","title":"Removed","text":"<ul> <li><code>UJSONResponse</code> was removed (this change was intended to be included in 0.14.0). Please see the   documentation for how to   implement responses using custom JSON serialization -   #1074.</li> </ul>"},{"location":"release-notes/#0140-november-8th-2020","title":"0.14.0 (November 8th, 2020)","text":""},{"location":"release-notes/#added_12","title":"Added","text":"<ul> <li>Starlette now officially supports Python3.9.</li> <li>In <code>StreamingResponse</code>, allow custom async iterator such as objects from classes implementing <code>__aiter__</code>.</li> <li>Allow usage of <code>functools.partial</code> async handlers in Python versions 3.6 and 3.7.</li> <li>Add 418 I'm A Teapot status code.</li> </ul>"},{"location":"release-notes/#changed_5","title":"Changed","text":"<ul> <li>Create tasks from handler coroutines before sending them to <code>asyncio.wait</code>.</li> <li>Use <code>format_exception</code> instead of <code>format_tb</code> in <code>ServerErrorMiddleware</code>'s <code>debug</code> responses.</li> <li>Be more lenient with handler arguments when using the <code>requires</code> decorator.</li> </ul>"},{"location":"release-notes/#0138","title":"0.13.8","text":"<ul> <li> <p>Revert <code>Queue(maxsize=1)</code> fix for <code>BaseHTTPMiddleware</code> middleware classes and streaming responses.</p> </li> <li> <p>The <code>StaticFiles</code> constructor now allows <code>pathlib.Path</code> in addition to strings for its <code>directory</code> argument.</p> </li> </ul>"},{"location":"release-notes/#0137","title":"0.13.7","text":"<ul> <li>Fix high memory usage when using <code>BaseHTTPMiddleware</code> middleware classes and streaming responses.</li> </ul>"},{"location":"release-notes/#0136","title":"0.13.6","text":"<ul> <li>Fix 404 errors with <code>StaticFiles</code>.</li> </ul>"},{"location":"release-notes/#0135","title":"0.13.5","text":"<ul> <li>Add support for <code>Starlette(lifespan=...)</code> functions.</li> <li>More robust path-traversal check in StaticFiles app.</li> <li>Fix WSGI PATH_INFO encoding.</li> <li>RedirectResponse now accepts optional background parameter</li> <li>Allow path routes to contain regex meta characters</li> <li>Treat ASGI HTTP 'body' as an optional key.</li> <li>Don't use thread pooling for writing to in-memory upload files.</li> </ul>"},{"location":"release-notes/#0130","title":"0.13.0","text":"<ul> <li>Switch to promoting application configuration on init style everywhere.   This means dropping the decorator style in favour of declarative routing   tables and middleware definitions.</li> </ul>"},{"location":"release-notes/#01212","title":"0.12.12","text":"<ul> <li>Fix <code>request.url_for()</code> for the Mount-within-a-Mount case.</li> </ul>"},{"location":"release-notes/#01211","title":"0.12.11","text":"<ul> <li>Fix <code>request.url_for()</code> when an ASGI <code>root_path</code> is being used.</li> </ul>"},{"location":"release-notes/#0121","title":"0.12.1","text":"<ul> <li>Add <code>URL.include_query_params(**kwargs)</code></li> <li>Add <code>URL.replace_query_params(**kwargs)</code></li> <li>Add <code>URL.remove_query_params(param_names)</code></li> <li><code>request.state</code> properly persisting across middleware.</li> <li>Added <code>request.scope</code> interface.</li> </ul>"},{"location":"release-notes/#0120","title":"0.12.0","text":"<ul> <li>Switch to ASGI 3.0.</li> <li>Fixes to CORS middleware.</li> <li>Add <code>StaticFiles(html=True)</code> support.</li> <li>Fix path quoting in redirect responses.</li> </ul>"},{"location":"release-notes/#0111","title":"0.11.1","text":"<ul> <li>Add <code>request.state</code> interface, for storing arbitrary additional information.</li> <li>Support disabling GraphiQL with <code>GraphQLApp(..., graphiql=False)</code>.</li> </ul>"},{"location":"release-notes/#0110","title":"0.11.0","text":"<ul> <li><code>DatabaseMiddleware</code> is now dropped in favour of <code>databases</code></li> <li>Templates are no longer configured on the application instance. Use <code>templates = Jinja2Templates(directory=...)</code> and <code>return templates.TemplateResponse('index.html', {\"request\": request})</code></li> <li>Schema generation is no longer attached to the application instance. Use <code>schemas = SchemaGenerator(...)</code> and <code>return schemas.OpenAPIResponse(request=request)</code></li> <li><code>LifespanMiddleware</code> is dropped in favor of router-based lifespan handling.</li> <li>Application instances now accept a <code>routes</code> argument, <code>Starlette(routes=[...])</code></li> <li>Schema generation now includes mounted routes.</li> </ul>"},{"location":"release-notes/#0106","title":"0.10.6","text":"<ul> <li>Add <code>Lifespan</code> routing component.</li> </ul>"},{"location":"release-notes/#0105","title":"0.10.5","text":"<ul> <li>Ensure <code>templating</code> does not strictly require <code>jinja2</code> to be installed.</li> </ul>"},{"location":"release-notes/#0104","title":"0.10.4","text":"<ul> <li>Templates are now configured independently from the application instance. <code>templates = Jinja2Templates(directory=...)</code>. Existing API remains in place, but is no longer documented, and will be deprecated in due course. See the template documentation for more details.</li> </ul>"},{"location":"release-notes/#0103","title":"0.10.3","text":"<ul> <li>Move to independent <code>databases</code> package instead of <code>DatabaseMiddleware</code>. Existing API remains in place, but is no longer documented, and will be deprecated in due course.</li> </ul>"},{"location":"release-notes/#0102","title":"0.10.2","text":"<ul> <li>Don't drop explicit port numbers on redirects from <code>HTTPSRedirectMiddleware</code>.</li> </ul>"},{"location":"release-notes/#0101","title":"0.10.1","text":"<ul> <li>Add MySQL database support.</li> <li>Add host-based routing.</li> </ul>"},{"location":"release-notes/#0100","title":"0.10.0","text":"<ul> <li>WebSockets now default to sending/receiving JSON over text data frames. Use <code>.send_json(data, mode=\"binary\")</code> and <code>.receive_json(mode=\"binary\")</code> for binary framing.</li> <li><code>GraphQLApp</code> now takes an <code>executor_class</code> argument, which should be used in preference to the existing <code>executor</code> argument. Resolves an issue with async executors being instantiated before the event loop was setup. The <code>executor</code> argument is expected to be deprecated in the next median or major release.</li> <li>Authentication and the <code>@requires</code> decorator now support WebSocket endpoints.</li> <li><code>MultiDict</code> and <code>ImmutableMultiDict</code> classes are available in <code>uvicorn.datastructures</code>.</li> <li><code>QueryParams</code> is now instantiated with standard dict-style <code>*args, **kwargs</code> arguments.</li> </ul>"},{"location":"release-notes/#0911","title":"0.9.11","text":"<ul> <li>Session cookies now include browser 'expires', in addition to the existing signed expiry.</li> <li><code>request.form()</code> now returns a multi-dict interface.</li> <li>The query parameter multi-dict implementation now mirrors <code>dict</code> more correctly for the behavior of <code>.keys()</code>, <code>.values()</code>, and <code>.items()</code> when multiple same-key items occur.</li> <li>Use <code>urlsplit</code> throughout in favor of <code>urlparse</code>.</li> </ul>"},{"location":"release-notes/#0910","title":"0.9.10","text":"<ul> <li>Support <code>@requires(...)</code> on class methods.</li> <li>Apply URL escaping to form data.</li> <li>Support <code>HEAD</code> requests automatically.</li> <li>Add <code>await request.is_disconnected()</code>.</li> <li>Pass operationName to GraphQL executor.</li> </ul>"},{"location":"release-notes/#099","title":"0.9.9","text":"<ul> <li>Add <code>TemplateResponse</code>.</li> <li>Add <code>CommaSeparatedStrings</code> datatype.</li> <li>Add <code>BackgroundTasks</code> for multiple tasks.</li> <li>Common subclass for <code>Request</code> and <code>WebSocket</code>, to eg. share <code>session</code> functionality.</li> <li>Expose remote address with <code>request.client</code>.</li> </ul>"},{"location":"release-notes/#098","title":"0.9.8","text":"<ul> <li>Add <code>request.database.executemany</code>.</li> </ul>"},{"location":"release-notes/#097","title":"0.9.7","text":"<ul> <li>Ensure that <code>AuthenticationMiddleware</code> handles lifespan messages correctly.</li> </ul>"},{"location":"release-notes/#096","title":"0.9.6","text":"<ul> <li>Add <code>AuthenticationMiddleware</code>, and <code>@requires()</code> decorator.</li> </ul>"},{"location":"release-notes/#095","title":"0.9.5","text":"<ul> <li>Support either <code>str</code> or <code>Secret</code> for <code>SessionMiddleware(secret_key=...)</code>.</li> </ul>"},{"location":"release-notes/#094","title":"0.9.4","text":"<ul> <li>Add <code>config.environ</code>.</li> <li>Add <code>datastructures.Secret</code>.</li> <li>Add <code>datastructures.DatabaseURL</code>.</li> </ul>"},{"location":"release-notes/#093","title":"0.9.3","text":"<ul> <li>Add <code>config.Config(\".env\")</code></li> </ul>"},{"location":"release-notes/#092","title":"0.9.2","text":"<ul> <li>Add optional database support.</li> <li>Add <code>request</code> to GraphQL context.</li> <li>Hide any password component in <code>URL.__repr__</code>.</li> </ul>"},{"location":"release-notes/#091","title":"0.9.1","text":"<ul> <li>Handle startup/shutdown errors properly.</li> </ul>"},{"location":"release-notes/#090","title":"0.9.0","text":"<ul> <li><code>TestClient</code> can now be used as a context manager, instead of <code>LifespanContext</code>.</li> <li>Lifespan is now handled as middleware. Startup and Shutdown events are visible throughout the middleware stack.</li> </ul>"},{"location":"release-notes/#088","title":"0.8.8","text":"<ul> <li>Better support for third-party API schema generators.</li> </ul>"},{"location":"release-notes/#087","title":"0.8.7","text":"<ul> <li>Support chunked requests with TestClient.</li> <li>Cleanup asyncio tasks properly with WSGIMiddleware.</li> <li>Support using TestClient within endpoints, for service mocking.</li> </ul>"},{"location":"release-notes/#086","title":"0.8.6","text":"<ul> <li>Session cookies are now set on the root path.</li> </ul>"},{"location":"release-notes/#085","title":"0.8.5","text":"<ul> <li>Support URL convertors.</li> <li>Support HTTP 304 cache responses from <code>StaticFiles</code>.</li> <li>Resolve character escaping issue with form data.</li> </ul>"},{"location":"release-notes/#084","title":"0.8.4","text":"<ul> <li>Default to empty body on responses.</li> </ul>"},{"location":"release-notes/#083","title":"0.8.3","text":"<ul> <li>Add 'name' argument to <code>@app.route()</code>.</li> <li>Use 'Host' header for URL reconstruction.</li> </ul>"},{"location":"release-notes/#082","title":"0.8.2","text":""},{"location":"release-notes/#staticfiles","title":"StaticFiles","text":"<ul> <li>StaticFiles no longer reads the file for responses to <code>HEAD</code> requests.</li> </ul>"},{"location":"release-notes/#081","title":"0.8.1","text":""},{"location":"release-notes/#templating","title":"Templating","text":"<ul> <li>Add a default templating configuration with Jinja2.</li> </ul> <p>Allows the following:</p> <pre><code>app = Starlette(template_directory=\"templates\")\n\n@app.route('/')\nasync def homepage(request):\n    # `url_for` is available inside the template.\n    template = app.get_template('index.html')\n    content = template.render(request=request)\n    return HTMLResponse(content)\n</code></pre>"},{"location":"release-notes/#080","title":"0.8.0","text":""},{"location":"release-notes/#exceptions","title":"Exceptions","text":"<ul> <li>Add support for <code>@app.exception_handler(404)</code>.</li> <li>Ensure handled exceptions are not seen as errors by the middleware stack.</li> </ul>"},{"location":"release-notes/#sessionmiddleware","title":"SessionMiddleware","text":"<ul> <li>Add <code>max_age</code>, and use timestamp-signed cookies. Defaults to two weeks.</li> </ul>"},{"location":"release-notes/#cookies","title":"Cookies","text":"<ul> <li>Ensure cookies are strictly HTTP correct.</li> </ul>"},{"location":"release-notes/#staticfiles_1","title":"StaticFiles","text":"<ul> <li>Check directory exists on instantiation.</li> </ul>"},{"location":"release-notes/#074","title":"0.7.4","text":""},{"location":"release-notes/#concurrency","title":"Concurrency","text":"<ul> <li>Add <code>starlette.concurrency.run_in_threadpool</code>. Now handles <code>contextvar</code> support.</li> </ul>"},{"location":"release-notes/#073","title":"0.7.3","text":""},{"location":"release-notes/#routing","title":"Routing","text":"<ul> <li>Add <code>name=</code> support to <code>app.mount()</code>. This allows eg: <code>app.mount('/static', StaticFiles(directory='static'), name='static')</code>.</li> </ul>"},{"location":"release-notes/#072","title":"0.7.2","text":""},{"location":"release-notes/#middleware","title":"Middleware","text":"<ul> <li>Add support for <code>@app.middleware(\"http\")</code> decorator.</li> </ul>"},{"location":"release-notes/#routing_1","title":"Routing","text":"<ul> <li>Add \"endpoint\" to ASGI scope.</li> </ul>"},{"location":"release-notes/#071","title":"0.7.1","text":""},{"location":"release-notes/#debug-tracebacks","title":"Debug tracebacks","text":"<ul> <li>Improve debug traceback information &amp; styling.</li> </ul>"},{"location":"release-notes/#url-routing","title":"URL routing","text":"<ul> <li>Support mounted URL lookups with \"path=\", eg. <code>url_for('static', path=...)</code>.</li> <li>Support nested URL lookups, eg. <code>url_for('admin:user', username=...)</code>.</li> <li>Add redirect slashes support.</li> <li>Add www redirect support.</li> </ul>"},{"location":"release-notes/#background-tasks","title":"Background tasks","text":"<ul> <li>Add background task support to <code>FileResponse</code> and <code>StreamingResponse</code>.</li> </ul>"},{"location":"release-notes/#070","title":"0.7.0","text":""},{"location":"release-notes/#api-schema-support","title":"API Schema support","text":"<ul> <li>Add <code>app.schema_generator = SchemaGenerator(...)</code>.</li> <li>Add <code>app.schema</code> property.</li> <li>Add <code>OpenAPIResponse(...)</code>.</li> </ul>"},{"location":"release-notes/#graphql-routing","title":"GraphQL routing","text":"<ul> <li>Drop <code>app.add_graphql_route(\"/\", ...)</code> in favor of more consistent <code>app.add_route(\"/\", GraphQLApp(...))</code>.</li> </ul>"},{"location":"release-notes/#063","title":"0.6.3","text":""},{"location":"release-notes/#routing-api","title":"Routing API","text":"<ul> <li>Support routing to methods.</li> <li>Ensure <code>url_path_for</code> works with Mount('/{some_path_params}').</li> <li>Fix Router(default=) argument.</li> <li>Support repeated paths, like: <code>@app.route(\"/\", methods=[\"GET\"])</code>, <code>@app.route(\"/\", methods=[\"POST\"])</code></li> <li>Use the default ThreadPoolExecutor for all sync endpoints.</li> </ul>"},{"location":"release-notes/#062","title":"0.6.2","text":""},{"location":"release-notes/#sessionmiddleware_1","title":"SessionMiddleware","text":"<p>Added support for <code>request.session</code>, with <code>SessionMiddleware</code>.</p>"},{"location":"release-notes/#061","title":"0.6.1","text":""},{"location":"release-notes/#basehttpmiddleware","title":"BaseHTTPMiddleware","text":"<p>Added support for <code>BaseHTTPMiddleware</code>, which provides a standard request/response interface over a regular ASGI middleware.</p> <p>This means you can write ASGI middleware while still working at a request/response level, rather than handling ASGI messages directly.</p> <pre><code>from starlette.applications import Starlette\nfrom starlette.middleware.base import BaseHTTPMiddleware\n\n\nclass CustomMiddleware(BaseHTTPMiddleware):\n    async def dispatch(self, request, call_next):\n        response = await call_next(request)\n        response.headers['Custom-Header'] = 'Example'\n        return response\n\n\napp = Starlette()\napp.add_middleware(CustomMiddleware)\n</code></pre>"},{"location":"release-notes/#060","title":"0.6.0","text":""},{"location":"release-notes/#requestpath_params","title":"request.path_params","text":"<p>The biggest change in 0.6 is that endpoint signatures are no longer:</p> <pre><code>async def func(request: Request, **kwargs) -&gt; Response\n</code></pre> <p>Instead we just use:</p> <pre><code>async def func(request: Request) -&gt; Response\n</code></pre> <p>The path parameters are available on the request as <code>request.path_params</code>.</p> <p>This is different to most Python webframeworks, but I think it actually ends up being much more nicely consistent all the way through.</p>"},{"location":"release-notes/#requesturl_for","title":"request.url_for()","text":"<p>Request and WebSocketSession now support URL reversing with <code>request.url_for(name, **path_params)</code>. This method returns a fully qualified <code>URL</code> instance. The URL instance is a string-like object.</p>"},{"location":"release-notes/#appurl_path_for","title":"app.url_path_for()","text":"<p>Applications now support URL path reversing with <code>app.url_path_for(name, **path_params)</code>. This method returns a <code>URL</code> instance with the path and scheme set. The URL instance is a string-like object, and will return only the path if coerced to a string.</p>"},{"location":"release-notes/#approutes","title":"app.routes","text":"<p>Applications now support a <code>.routes</code> parameter, which returns a list of <code>[Route|WebSocketRoute|Mount]</code>.</p>"},{"location":"release-notes/#route-websocketroute-mount","title":"Route, WebSocketRoute, Mount","text":"<p>The low level components to <code>Router</code> now match the <code>@app.route()</code>, <code>@app.websocket_route()</code>, and <code>app.mount()</code> signatures.</p>"},{"location":"requests/","title":"\u8bf7\u6c42","text":"<p>Starlette \u63d0\u4f9b\u4e86\u4e00\u4e2a <code>Request</code> \u7c7b\uff0c\u4e3a\u4f20\u5165\u7684\u8bf7\u6c42\u63d0\u4f9b\u4e86\u66f4\u53cb\u597d\u7684\u63a5\u53e3\uff0c\u800c\u65e0\u9700\u76f4\u63a5\u8bbf\u95ee ASGI \u7684 <code>scope</code> \u548c\u63a5\u6536\u901a\u9053\u3002</p>"},{"location":"requests/#request","title":"Request \u7c7b","text":"<p>\u7b7e\u540d\uff1a<code>Request(scope, receive=None)</code></p> <pre><code>from starlette.requests import Request\nfrom starlette.responses import Response\n\n\nasync def app(scope, receive, send):\n    assert scope['type'] == 'http'\n    request = Request(scope, receive)\n    content = '%s %s' % (request.method, request.url.path)\n    response = Response(content, media_type='text/plain')\n    await response(scope, receive, send)\n</code></pre> <p><code>Request</code> \u63d0\u4f9b\u4e86\u6620\u5c04\u63a5\u53e3\uff0c\u56e0\u6b64\u53ef\u4ee5\u50cf\u4f7f\u7528 <code>scope</code> \u4e00\u6837\u4f7f\u7528\u5b83\u3002</p> <p>\u4f8b\u5982\uff1a<code>request['path']</code> \u4f1a\u8fd4\u56de ASGI \u7684\u8def\u5f84\u3002</p> <p>\u5982\u679c\u4e0d\u9700\u8981\u8bbf\u95ee\u8bf7\u6c42\u4f53\uff0c\u53ef\u4ee5\u5728\u4e0d\u63d0\u4f9b <code>receive</code> \u53c2\u6570\u7684\u60c5\u51b5\u4e0b\u5b9e\u4f8b\u5316\u8bf7\u6c42\u5bf9\u8c61\u3002</p>"},{"location":"requests/#_1","title":"\u65b9\u6cd5","text":"<p>\u53ef\u4ee5\u901a\u8fc7 <code>request.method</code> \u8bbf\u95ee\u8bf7\u6c42\u65b9\u6cd5\u3002</p>"},{"location":"requests/#url","title":"URL","text":"<p>\u53ef\u4ee5\u901a\u8fc7 <code>request.url</code> \u8bbf\u95ee\u8bf7\u6c42\u7684 URL\u3002</p> <p>\u8be5\u5c5e\u6027\u662f\u4e00\u4e2a\u7c7b\u5b57\u7b26\u4e32\u5bf9\u8c61\uff0c\u53ef\u4ee5\u89e3\u6790 URL \u7684\u6240\u6709\u7ec4\u4ef6\u3002</p> <p>\u4f8b\u5982\uff1a<code>request.url.path</code>\u3001<code>request.url.port</code>\u3001<code>request.url.scheme</code>\u3002</p>"},{"location":"requests/#headers","title":"Headers","text":"<p>\u8bf7\u6c42\u5934\u4ee5\u4e0d\u53ef\u53d8\u3001\u5927\u5c0f\u5199\u4e0d\u654f\u611f\u7684\u591a\u503c\u5b57\u5178\u5f62\u5f0f\u5448\u73b0\u3002</p> <p>\u4f8b\u5982\uff1a<code>request.headers['content-type']</code></p>"},{"location":"requests/#_2","title":"\u67e5\u8be2\u53c2\u6570","text":"<p>\u67e5\u8be2\u53c2\u6570\u4ee5\u4e0d\u53ef\u53d8\u591a\u503c\u5b57\u5178\u5f62\u5f0f\u5448\u73b0\u3002</p> <p>\u4f8b\u5982\uff1a<code>request.query_params['search']</code></p>"},{"location":"requests/#_3","title":"\u8def\u5f84\u53c2\u6570","text":"<p>\u8def\u7531\u8def\u5f84\u53c2\u6570\u4ee5\u5b57\u5178\u5f62\u5f0f\u5448\u73b0\u3002</p> <p>\u4f8b\u5982\uff1a<code>request.path_params['username']</code></p>"},{"location":"requests/#_4","title":"\u5ba2\u6237\u7aef\u5730\u5740","text":"<p>\u5ba2\u6237\u7aef\u7684\u8fdc\u7a0b\u5730\u5740\u4ee5\u547d\u540d\u7684\u4e8c\u5143\u7ec4 <code>request.client</code>\uff08\u6216 <code>None</code>\uff09\u5f62\u5f0f\u5448\u73b0\u3002</p> <ul> <li>\u4e3b\u673a\u540d\u6216 IP \u5730\u5740\uff1a<code>request.client.host</code></li> <li>\u5ba2\u6237\u7aef\u8fde\u63a5\u7684\u7aef\u53e3\u53f7\uff1a<code>request.client.port</code></li> </ul>"},{"location":"requests/#cookies","title":"Cookies","text":"<p>Cookies \u4ee5\u5e38\u89c4\u5b57\u5178\u5f62\u5f0f\u5448\u73b0\u3002</p> <p>\u4f8b\u5982\uff1a<code>request.cookies.get('mycookie')</code></p> <p>\u5982\u679c\u9047\u5230\u65e0\u6548\u7684 Cookie\uff0c\u5c06\u5ffd\u7565\u8be5\u503c\u3002\uff08\u9075\u5faa RFC2109\uff09</p>"},{"location":"requests/#body","title":"\u8bf7\u6c42\u4f53\uff08Body\uff09","text":"<p>\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u591a\u79cd\u63a5\u53e3\u83b7\u53d6\u8bf7\u6c42\u4f53\u5185\u5bb9\uff1a</p> <ul> <li>\u4ee5\u5b57\u8282\u5f62\u5f0f\u8fd4\u56de\u8bf7\u6c42\u4f53\uff1a<code>await request.body()</code></li> <li>\u5c06\u8bf7\u6c42\u4f53\u89e3\u6790\u4e3a\u8868\u5355\u6570\u636e\u6216\u591a\u90e8\u5206\u6570\u636e\uff1a<code>async with request.form() as form:</code></li> <li>\u5c06\u8bf7\u6c42\u4f53\u89e3\u6790\u4e3a JSON \u6570\u636e\uff1a<code>await request.json()</code></li> </ul> <p>\u60a8\u8fd8\u53ef\u4ee5\u4f7f\u7528 <code>async for</code> \u8bed\u6cd5\uff0c\u4ee5\u6d41\u7684\u5f62\u5f0f\u8bbf\u95ee\u8bf7\u6c42\u4f53\uff1a</p> <pre><code>from starlette.requests import Request\nfrom starlette.responses import Response\n\n\nasync def app(scope, receive, send):\n    assert scope['type'] == 'http'\n    request = Request(scope, receive)\n    body = b''\n    async for chunk in request.stream():\n        body += chunk\n    response = Response(body, media_type='text/plain')\n    await response(scope, receive, send)\n</code></pre> <p>\u5982\u679c\u4f7f\u7528 <code>.stream()</code>\uff0c\u5b57\u8282\u5757\u4f1a\u76f4\u63a5\u63d0\u4f9b\u800c\u4e0d\u4f1a\u5c06\u6574\u4e2a\u8bf7\u6c42\u4f53\u5b58\u50a8\u5230\u5185\u5b58\u4e2d\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u540e\u7eed\u8c03\u7528 <code>.body()</code>\u3001<code>.form()</code> \u6216 <code>.json()</code> \u90fd\u4f1a\u5f15\u53d1\u9519\u8bef\u3002</p> <p>\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u4f8b\u5982\u957f\u8f6e\u8be2\u6216\u6d41\u5f0f\u54cd\u5e94\uff0c\u60a8\u53ef\u80fd\u9700\u8981\u5224\u65ad\u5ba2\u6237\u7aef\u662f\u5426\u5df2\u65ad\u5f00\u8fde\u63a5\u3002\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u65b9\u6cd5\u786e\u5b9a\u8fde\u63a5\u72b6\u6001\uff1a</p> <pre><code>disconnected = await request.is_disconnected()\n</code></pre>"},{"location":"requests/#request-files","title":"\u8bf7\u6c42\u6587\u4ef6\uff08Request Files\uff09","text":"<p>\u8bf7\u6c42\u6587\u4ef6\u901a\u5e38\u4ee5\u591a\u90e8\u5206\u8868\u5355\u6570\u636e\u7684\u5f62\u5f0f\u53d1\u9001\uff08<code>multipart/form-data</code>\uff09\u3002</p> <p>\u7b7e\u540d\uff1a<code>request.form(max_files=1000, max_fields=1000)</code></p> <p>\u53ef\u4ee5\u901a\u8fc7 <code>max_files</code> \u548c <code>max_fields</code> \u53c2\u6570\u914d\u7f6e\u6700\u5927\u5b57\u6bb5\u6570\u6216\u6700\u5927\u6587\u4ef6\u6570\uff1a</p> <pre><code>async with request.form(max_files=1000, max_fields=1000):\n    ...\n</code></pre> <p>Info</p> <p>\u51fa\u4e8e\u5b89\u5168\u8003\u8651\uff0c\u8fd9\u4e9b\u9650\u5236\u9632\u6b62\u89e3\u6790\u8fc7\u591a\u7684\u7a7a\u5b57\u6bb5\u6216\u6587\u4ef6\u5bfc\u81f4 CPU \u548c\u5185\u5b58\u8d44\u6e90\u8017\u5c3d\uff0c\u4ece\u800c\u5f15\u53d1\u62d2\u7edd\u670d\u52a1\u653b\u51fb\uff08DoS\uff09\u3002\u5141\u8bb8\u65e0\u9650\u5236\u7684\u5b57\u6bb5\u6216\u6587\u4ef6\u662f\u4e0d\u5b89\u5168\u7684\u3002</p> <p>\u8c03\u7528 <code>async with request.form() as form</code> \u65f6\uff0c\u8fd4\u56de\u7684\u662f\u4e00\u4e2a\u4e0d\u53ef\u53d8\u591a\u503c\u5b57\u5178 <code>starlette.datastructures.FormData</code>\uff0c\u5176\u4e2d\u5305\u542b\u6587\u4ef6\u4e0a\u4f20\u548c\u6587\u672c\u8f93\u5165\u3002\u6587\u4ef6\u4e0a\u4f20\u9879\u8868\u793a\u4e3a <code>starlette.datastructures.UploadFile</code> \u5b9e\u4f8b\u3002</p> <p><code>UploadFile</code> \u5177\u6709\u4ee5\u4e0b\u5c5e\u6027\uff1a</p> <ul> <li><code>filename</code>\uff1a\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u8868\u793a\u4e0a\u4f20\u7684\u539f\u59cb\u6587\u4ef6\u540d\uff0c\u4f8b\u5982 <code>myimage.jpg</code>\uff1b\u5982\u679c\u4e0d\u53ef\u7528\uff0c\u5219\u4e3a <code>None</code>\u3002</li> <li><code>content_type</code>\uff1a\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u8868\u793a\u5185\u5bb9\u7c7b\u578b\uff08MIME \u7c7b\u578b/\u5a92\u4f53\u7c7b\u578b\uff09\uff0c\u4f8b\u5982 <code>image/jpeg</code>\uff1b\u5982\u679c\u4e0d\u53ef\u7528\uff0c\u5219\u4e3a <code>None</code>\u3002</li> <li><code>file</code>\uff1a\u4e00\u4e2a <code>SpooledTemporaryFile</code>\uff08\u7c7b\u4f3c\u6587\u4ef6\u7684\u5bf9\u8c61\uff09\u3002\u60a8\u53ef\u4ee5\u76f4\u63a5\u5c06\u5176\u4f20\u9012\u7ed9\u9700\u8981\u201c\u7c7b\u4f3c\u6587\u4ef6\u201d\u5bf9\u8c61\u7684\u5176\u4ed6\u51fd\u6570\u6216\u5e93\u3002</li> <li><code>headers</code>\uff1a\u4e00\u4e2a <code>Headers</code> \u5bf9\u8c61\u3002\u901a\u5e38\u4ec5\u5305\u542b <code>Content-Type</code> \u5934\uff0c\u4f46\u5982\u679c\u591a\u90e8\u5206\u5b57\u6bb5\u4e2d\u5305\u542b\u5176\u4ed6\u5934\uff0c\u5219\u4e5f\u4f1a\u5305\u542b\u5728\u6b64\u5904\u3002\u6ce8\u610f\uff0c\u8fd9\u4e9b\u5934\u4e0e <code>Request.headers</code> \u4e2d\u7684\u5934\u65e0\u5173\u3002</li> <li><code>size</code>\uff1a\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u4e0a\u4f20\u6587\u4ef6\u7684\u5927\u5c0f\uff08\u5b57\u8282\uff09\u3002\u8be5\u503c\u4ece\u8bf7\u6c42\u5185\u5bb9\u4e2d\u8ba1\u7b97\u5f97\u51fa\uff0c\u6bd4 <code>Content-Length</code> \u5934\u66f4\u53ef\u9760\uff1b\u5982\u679c\u672a\u8bbe\u7f6e\uff0c\u5219\u4e3a <code>None</code>\u3002</li> </ul> <p><code>UploadFile</code> \u63d0\u4f9b\u4ee5\u4e0b <code>async</code> \u65b9\u6cd5\uff0c\u8fd9\u4e9b\u65b9\u6cd5\u5e95\u5c42\u8c03\u7528\u5185\u90e8 <code>SpooledTemporaryFile</code> \u7684\u5bf9\u5e94\u65b9\u6cd5\uff1a</p> <ul> <li><code>async write(data)</code>\uff1a\u5c06\u5b57\u8282\u6570\u636e <code>data</code> \u5199\u5165\u6587\u4ef6\u3002</li> <li><code>async read(size)</code>\uff1a\u8bfb\u53d6\u6587\u4ef6\u7684 <code>size</code> \u5b57\u8282\u3002</li> <li><code>async seek(offset)</code>\uff1a\u5c06\u6587\u4ef6\u6307\u9488\u79fb\u52a8\u5230 <code>offset</code> \u5b57\u8282\u4f4d\u7f6e\u3002\u4f8b\u5982\uff0c<code>await myfile.seek(0)</code> \u4f1a\u5c06\u6307\u9488\u79fb\u52a8\u5230\u6587\u4ef6\u5f00\u5934\u3002</li> <li><code>async close()</code>\uff1a\u5173\u95ed\u6587\u4ef6\u3002</li> </ul> <p>\u7531\u4e8e\u8fd9\u4e9b\u65b9\u6cd5\u662f\u5f02\u6b65\u65b9\u6cd5\uff0c\u8c03\u7528\u65f6\u9700\u8981\u4f7f\u7528 <code>await</code>\u3002</p> <p>\u4f8b\u5982\uff0c\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u83b7\u53d6\u6587\u4ef6\u540d\u548c\u5185\u5bb9\uff1a</p> <pre><code>async with request.form() as form:\n    filename = form[\"upload_file\"].filename\n    contents = await form[\"upload_file\"].read()\n</code></pre> <p>\u63d0\u793a</p> <p>\u6839\u636e RFC-7578: 4.2\uff0c\u5305\u542b\u6587\u4ef6\u7684\u8868\u5355\u6570\u636e\u90e8\u5206\u5e94\u8be5\u5728 <code>Content-Disposition</code> \u5934\u4e2d\u5305\u542b <code>name</code> \u548c <code>filename</code> \u5b57\u6bb5\uff0c\u4f8b\u5982\uff1a <code>Content-Disposition: form-data; name=\"user\"; filename=\"somefile\"</code>\u3002 \u867d\u7136\u6839\u636e RFC-7578\uff0c<code>filename</code> \u5b57\u6bb5\u662f\u53ef\u9009\u7684\uff0c\u4f46\u5b83\u5e2e\u52a9 Starlette \u533a\u5206\u54ea\u4e9b\u6570\u636e\u5e94\u88ab\u89c6\u4e3a\u6587\u4ef6\u3002\u5982\u679c\u63d0\u4f9b\u4e86 <code>filename</code> \u5b57\u6bb5\uff0c\u5c06\u521b\u5efa\u4e00\u4e2a <code>UploadFile</code> \u5bf9\u8c61\u6765\u8bbf\u95ee\u5e95\u5c42\u6587\u4ef6\uff1b\u5426\u5219\uff0c\u8868\u5355\u6570\u636e\u90e8\u5206\u5c06\u88ab\u89e3\u6790\u4e3a\u539f\u59cb\u5b57\u7b26\u4e32\u3002</p>"},{"location":"requests/#application","title":"\u5e94\u7528\u7a0b\u5e8f\uff08Application\uff09","text":"<p>\u53ef\u4ee5\u901a\u8fc7 <code>request.app</code> \u8bbf\u95ee\u8bf7\u6c42\u6e90\u81ea\u7684 Starlette \u5e94\u7528\u3002</p>"},{"location":"requests/#other-state","title":"\u5176\u4ed6\u72b6\u6001\uff08Other State\uff09","text":"<p>\u5982\u679c\u9700\u8981\u5728\u8bf7\u6c42\u4e2d\u5b58\u50a8\u989d\u5916\u4fe1\u606f\uff0c\u53ef\u4ee5\u4f7f\u7528 <code>request.state</code>\u3002</p> <p>\u4f8b\u5982\uff1a</p> <pre><code>request.state.time_started = time.time()\n</code></pre>"},{"location":"responses/","title":"\u54cd\u5e94","text":"<p>Starlette \u5305\u542b\u4e86\u4e00\u4e9b\u54cd\u5e94\u7c7b\uff0c\u7528\u4e8e\u901a\u8fc7 <code>send</code> \u901a\u9053\u53d1\u9001\u9002\u5f53\u7684 ASGI \u6d88\u606f\u3002</p>"},{"location":"responses/#response","title":"\u54cd\u5e94\uff08Response\uff09","text":"<p>\u7b7e\u540d\uff1a<code>Response(content, status_code=200, headers=None, media_type=None)</code></p> <ul> <li><code>content</code>\uff1a\u5b57\u7b26\u4e32\u6216\u5b57\u8282\u4e32\u3002</li> <li><code>status_code</code>\uff1a\u6574\u6570\u7c7b\u578b\u7684 HTTP \u72b6\u6001\u7801\u3002</li> <li><code>headers</code>\uff1a\u5b57\u7b26\u4e32\u5b57\u5178\uff0c\u7528\u4e8e\u5b9a\u4e49 HTTP \u5934\u4fe1\u606f\u3002</li> <li><code>media_type</code>\uff1a\u5b57\u7b26\u4e32\uff0c\u6307\u5b9a\u5a92\u4f53\u7c7b\u578b\uff0c\u4f8b\u5982 <code>\"text/html\"</code>\u3002</li> </ul> <p>Starlette \u4f1a\u81ea\u52a8\u6dfb\u52a0 <code>Content-Length</code> \u5934\u4fe1\u606f\uff0c\u8fd8\u4f1a\u6839\u636e <code>media_type</code> \u81ea\u52a8\u8bbe\u7f6e <code>Content-Type</code> \u5934\u4fe1\u606f\u3002\u5982\u679c\u662f\u6587\u672c\u7c7b\u578b\uff0c\u5c06\u9644\u52a0\u5b57\u7b26\u96c6\uff08charset\uff09\uff0c\u9664\u975e <code>media_type</code> \u5df2\u660e\u786e\u6307\u5b9a\u4e86\u5b57\u7b26\u96c6\u3002</p> <p>\u521b\u5efa\u54cd\u5e94\u540e\uff0c\u53ef\u4ee5\u5c06\u5176\u4f5c\u4e3a ASGI \u5e94\u7528\u5b9e\u4f8b\u53d1\u9001\uff1a</p> <pre><code>from starlette.responses import Response\n\n\nasync def app(scope, receive, send):\n    assert scope['type'] == 'http'\n    response = Response('Hello, world!', media_type='text/plain')\n    await response(scope, receive, send)\n</code></pre>"},{"location":"responses/#cookie","title":"\u8bbe\u7f6e Cookie","text":"<p>Starlette \u63d0\u4f9b\u4e86 <code>set_cookie</code> \u65b9\u6cd5\uff0c\u7528\u4e8e\u5728\u54cd\u5e94\u5bf9\u8c61\u4e2d\u8bbe\u7f6e Cookie\u3002</p> <p>\u7b7e\u540d\uff1a<code>Response.set_cookie(key, value, max_age=None, expires=None, path=\"/\", domain=None, secure=False, httponly=False, samesite=\"lax\")</code></p> <ul> <li><code>key</code>\uff1a\u5b57\u7b26\u4e32\uff0c\u8868\u793a Cookie \u7684\u952e\u3002</li> <li><code>value</code>\uff1a\u5b57\u7b26\u4e32\uff0c\u8868\u793a Cookie \u7684\u503c\u3002</li> <li><code>max_age</code>\uff1a\u6574\u6570\uff0c\u5b9a\u4e49 Cookie \u7684\u751f\u547d\u5468\u671f\uff08\u79d2\uff09\u3002\u8d1f\u503c\u6216 <code>0</code> \u4f1a\u7acb\u5373\u4e22\u5f03 Cookie\u3002\u53ef\u9009\u3002</li> <li><code>expires</code>\uff1a\u6574\u6570\uff08\u4ee5\u79d2\u4e3a\u5355\u4f4d\uff09\u6216 <code>datetime</code> \u5bf9\u8c61\uff0c\u5b9a\u4e49 Cookie \u7684\u5230\u671f\u65f6\u95f4\u3002\u53ef\u9009\u3002</li> <li><code>path</code>\uff1a\u5b57\u7b26\u4e32\uff0c\u6307\u5b9a Cookie \u5e94\u7528\u7684\u8def\u5f84\u8303\u56f4\u3002\u53ef\u9009\u3002</li> <li><code>domain</code>\uff1a\u5b57\u7b26\u4e32\uff0c\u6307\u5b9a Cookie \u6709\u6548\u7684\u57df\u3002\u53ef\u9009\u3002</li> <li><code>secure</code>\uff1a\u5e03\u5c14\u503c\uff0c\u6307\u5b9a Cookie \u662f\u5426\u4ec5\u5728\u4f7f\u7528 SSL \u548c HTTPS \u534f\u8bae\u65f6\u53d1\u9001\u3002\u53ef\u9009\u3002</li> <li><code>httponly</code>\uff1a\u5e03\u5c14\u503c\uff0c\u6307\u5b9a Cookie \u662f\u5426\u4e0d\u80fd\u901a\u8fc7 JavaScript\uff08\u5982 <code>Document.cookie</code>\uff09\u8bbf\u95ee\u3002\u53ef\u9009\u3002</li> <li><code>samesite</code>\uff1a\u5b57\u7b26\u4e32\uff0c\u6307\u5b9a Cookie \u7684 SameSite \u7b56\u7565\u3002\u6709\u6548\u503c\u4e3a <code>'lax'</code>\u3001<code>'strict'</code> \u548c <code>'none'</code>\uff0c\u9ed8\u8ba4\u503c\u4e3a <code>'lax'</code>\u3002\u53ef\u9009\u3002</li> </ul>"},{"location":"responses/#cookie_1","title":"\u5220\u9664 Cookie","text":"<p>Starlette \u8fd8\u63d0\u4f9b\u4e86 <code>delete_cookie</code> \u65b9\u6cd5\uff0c\u7528\u4e8e\u624b\u52a8\u4f7f\u5df2\u8bbe\u7f6e\u7684 Cookie \u5931\u6548\u3002</p> <p>\u7b7e\u540d\uff1a<code>Response.delete_cookie(key, path='/', domain=None)</code></p>"},{"location":"responses/#html-htmlresponse","title":"HTML \u54cd\u5e94\uff08HTMLResponse\uff09","text":"<p>\u63a5\u6536\u6587\u672c\u6216\u5b57\u8282\u5e76\u8fd4\u56de\u4e00\u4e2a HTML \u54cd\u5e94\uff1a</p> <pre><code>from starlette.responses import HTMLResponse\n\n\nasync def app(scope, receive, send):\n    assert scope['type'] == 'http'\n    response = HTMLResponse('&lt;html&gt;&lt;body&gt;&lt;h1&gt;Hello, world!&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;')\n    await response(scope, receive, send)\n</code></pre>"},{"location":"responses/#plaintextresponse","title":"\u6587\u672c\u54cd\u5e94\uff08PlainTextResponse\uff09","text":"<p>\u63a5\u6536\u4e00\u4e9b\u6587\u672c\u6216\u5b57\u8282\u5e76\u8fd4\u56de\u7eaf\u6587\u672c\u54cd\u5e94\u3002</p> <pre><code>from starlette.responses import PlainTextResponse\n\n\nasync def app(scope, receive, send):\n    assert scope['type'] == 'http'\n    response = PlainTextResponse('Hello, world!')\n    await response(scope, receive, send)\n</code></pre>"},{"location":"responses/#json-jsonresponse","title":"JSON \u54cd\u5e94\uff08JSONResponse\uff09","text":"<p>\u63a5\u6536\u4e00\u4e9b\u6570\u636e\u5e76\u8fd4\u56de <code>application/json</code> \u7f16\u7801\u7684\u54cd\u5e94\u3002</p> <pre><code>from starlette.responses import JSONResponse\n\n\nasync def app(scope, receive, send):\n    assert scope['type'] == 'http'\n    response = JSONResponse({'hello': 'world'})\n    await response(scope, receive, send)\n</code></pre>"},{"location":"responses/#json","title":"\u81ea\u5b9a\u4e49 JSON \u5e8f\u5217\u5316","text":"<p>\u5982\u679c\u9700\u8981\u5bf9 JSON \u5e8f\u5217\u5316\u8fdb\u884c\u7ec6\u7c92\u5ea6\u63a7\u5236\uff0c\u53ef\u4ee5\u901a\u8fc7\u7ee7\u627f <code>JSONResponse</code> \u5e76\u91cd\u5199 <code>render</code> \u65b9\u6cd5\u5b9e\u73b0\u3002</p> <p>\u4f8b\u5982\uff0c\u82e5\u8981\u4f7f\u7528\u7b2c\u4e09\u65b9 JSON \u5e93 orjson\uff1a</p> <pre><code>from typing import Any\n\nimport orjson\nfrom starlette.responses import JSONResponse\n\n\nclass OrjsonResponse(JSONResponse):\n    def render(self, content: Any) -&gt; bytes:\n        return orjson.dumps(content)\n</code></pre> <p>\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u9ed8\u8ba4\u4f7f\u7528 <code>JSONResponse</code> \u5373\u53ef\uff0c\u9664\u975e\u9700\u8981\u5bf9\u7279\u5b9a\u7aef\u70b9\u8fdb\u884c\u5fae\u4f18\u5316\uff0c\u6216\u9700\u8981\u5e8f\u5217\u5316\u975e\u6807\u51c6\u5bf9\u8c61\u7c7b\u578b\u3002</p>"},{"location":"responses/#redirectresponse","title":"\u91cd\u5b9a\u5411\u54cd\u5e94\uff08RedirectResponse\uff09","text":"<p>\u8fd4\u56de HTTP \u91cd\u5b9a\u5411\u54cd\u5e94\u3002\u9ed8\u8ba4\u4f7f\u7528\u72b6\u6001\u7801 307\u3002</p> <pre><code>from starlette.responses import PlainTextResponse, RedirectResponse\n\n\nasync def app(scope, receive, send):\n    assert scope['type'] == 'http'\n    if scope['path'] != '/':\n        response = RedirectResponse(url='/')\n    else:\n        response = PlainTextResponse('Hello, world!')\n    await response(scope, receive, send)\n</code></pre>"},{"location":"responses/#streamingresponse","title":"\u6d41\u5f0f\u54cd\u5e94\uff08StreamingResponse\uff09","text":"<p>\u63a5\u6536\u4e00\u4e2a\u5f02\u6b65\u751f\u6210\u5668\u6216\u666e\u901a\u751f\u6210\u5668/\u8fed\u4ee3\u5668\uff0c\u5e76\u4ee5\u6d41\u7684\u65b9\u5f0f\u8fd4\u56de\u54cd\u5e94\u4f53\u3002</p> <pre><code>from starlette.responses import StreamingResponse\nimport asyncio\n\n\nasync def slow_numbers(minimum, maximum):\n    yield '&lt;html&gt;&lt;body&gt;&lt;ul&gt;'\n    for number in range(minimum, maximum + 1):\n        yield '&lt;li&gt;%d&lt;/li&gt;' % number\n        await asyncio.sleep(0.5)\n    yield '&lt;/ul&gt;&lt;/body&gt;&lt;/html&gt;'\n\n\nasync def app(scope, receive, send):\n    assert scope['type'] == 'http'\n    generator = slow_numbers(1, 10)\n    response = StreamingResponse(generator, media_type='text/html')\n    await response(scope, receive, send)\n</code></pre> <p>\u8bf7\u6ce8\u610f\uff0c\u7c7b\u6587\u4ef6\u5bf9\u8c61\uff08\u5982\u901a\u8fc7 <code>open()</code> \u521b\u5efa\u7684\u6587\u4ef6\u5bf9\u8c61\uff09\u662f\u666e\u901a\u8fed\u4ee3\u5668\uff0c\u56e0\u6b64\u53ef\u4ee5\u76f4\u63a5\u4f5c\u4e3a <code>StreamingResponse</code> \u8fd4\u56de\u3002</p>"},{"location":"responses/#fileresponse","title":"\u6587\u4ef6\u54cd\u5e94\uff08FileResponse\uff09","text":"<p>\u4ee5\u5f02\u6b65\u6d41\u7684\u65b9\u5f0f\u53d1\u9001\u6587\u4ef6\u4f5c\u4e3a\u54cd\u5e94\u3002</p> <p>\u4e0e\u5176\u4ed6\u54cd\u5e94\u7c7b\u578b\u4e0d\u540c\uff0c\u5176\u5b9e\u4f8b\u5316\u65f6\u63a5\u53d7\u4e00\u7ec4\u4e0d\u540c\u7684\u53c2\u6570\uff1a</p> <ul> <li><code>path</code>\uff1a\u8981\u53d1\u9001\u7684\u6587\u4ef6\u8def\u5f84\u3002</li> <li><code>headers</code>\uff1a\u5305\u542b\u81ea\u5b9a\u4e49\u5934\u7684\u5b57\u5178\u3002</li> <li><code>media_type</code>\uff1a\u5b57\u7b26\u4e32\u7c7b\u578b\uff0c\u8868\u793a\u5a92\u4f53\u7c7b\u578b\u3002\u5982\u679c\u672a\u8bbe\u7f6e\uff0c\u5c06\u6839\u636e\u6587\u4ef6\u540d\u6216\u8def\u5f84\u63a8\u65ad\u5a92\u4f53\u7c7b\u578b\u3002</li> <li><code>filename</code>\uff1a\u5982\u679c\u8bbe\u7f6e\uff0c\u5c06\u5728\u54cd\u5e94\u7684 <code>Content-Disposition</code> \u4e2d\u5305\u542b\u8be5\u503c\u3002</li> <li><code>content_disposition_type</code>\uff1a\u6307\u5b9a <code>Content-Disposition</code> \u7684\u7c7b\u578b\uff0c\u53ef\u4ee5\u8bbe\u7f6e\u4e3a <code>\"attachment\"</code>\uff08\u9ed8\u8ba4\uff09\u6216 <code>\"inline\"</code>\u3002</li> </ul> <p>\u6587\u4ef6\u54cd\u5e94\u5c06\u81ea\u52a8\u5305\u542b\u9002\u5f53\u7684 <code>Content-Length</code>\u3001<code>Last-Modified</code> \u548c <code>ETag</code> \u5934\u3002</p> <pre><code>from starlette.responses import FileResponse\n\n\nasync def app(scope, receive, send):\n    assert scope['type'] == 'http'\n    response = FileResponse('statics/favicon.ico')\n    await response(scope, receive, send)\n</code></pre> <p>\u6587\u4ef6\u54cd\u5e94\u8fd8\u652f\u6301 HTTP \u8303\u56f4\u8bf7\u6c42\u3002</p> <ul> <li>\u5982\u679c\u6587\u4ef6\u5b58\u5728\uff0c\u54cd\u5e94\u4e2d\u5c06\u5305\u542b <code>Accept-Ranges: bytes</code> \u5934\uff0c\u76ee\u524d\u4ec5\u652f\u6301 <code>bytes</code> \u5355\u4f4d\u3002</li> <li>\u5982\u679c\u8bf7\u6c42\u4e2d\u5305\u542b <code>Range</code> \u5934\u4e14\u6587\u4ef6\u5b58\u5728\uff0c\u5c06\u8fd4\u56de <code>206 Partial Content</code> \u54cd\u5e94\uff0c\u5e76\u5305\u542b\u8bf7\u6c42\u7684\u5b57\u8282\u8303\u56f4\u3002</li> <li>\u5982\u679c\u8303\u56f4\u65e0\u6548\uff0c\u5c06\u8fd4\u56de <code>416 Range Not Satisfiable</code> \u54cd\u5e94\u3002</li> </ul>"},{"location":"responses/#_1","title":"\u7b2c\u4e09\u65b9\u54cd\u5e94","text":""},{"location":"responses/#eventsourceresponse","title":"EventSourceResponse","text":"<p>\u4e00\u4e2a\u5b9e\u73b0 \u670d\u52a1\u5668\u53d1\u9001\u4e8b\u4ef6\uff08Server-Sent Events\uff09 \u7684\u54cd\u5e94\u7c7b\u3002\u5b83\u53ef\u4ee5\u5728\u4e0d\u4f7f\u7528 WebSocket \u7684\u60c5\u51b5\u4e0b\uff0c\u5b9e\u73b0\u4ece\u670d\u52a1\u5668\u5230\u5ba2\u6237\u7aef\u7684\u4e8b\u4ef6\u6d41\u5f0f\u4f20\u8f93\u3002</p>"},{"location":"routing/","title":"\u8def\u7531","text":""},{"location":"routing/#http","title":"HTTP \u8def\u7531","text":"<p>Starlette \u63d0\u4f9b\u4e86\u4e00\u4e2a\u7b80\u5355\u4f46\u529f\u80fd\u5f3a\u5927\u7684\u8bf7\u6c42\u8def\u7531\u7cfb\u7edf\u3002\u8def\u7531\u8868\u88ab\u5b9a\u4e49\u4e3a\u4e00\u4e2a\u8def\u7531\u5217\u8868\uff0c\u5e76\u5728\u5b9e\u4f8b\u5316\u5e94\u7528\u65f6\u4f20\u5165\u3002</p> <pre><code>from starlette.applications import Starlette\nfrom starlette.responses import PlainTextResponse\nfrom starlette.routing import Route\n\n\nasync def homepage(request):\n    return PlainTextResponse(\"Homepage\")\n\nasync def about(request):\n    return PlainTextResponse(\"About\")\n\n\nroutes = [\n    Route(\"/\", endpoint=homepage),\n    Route(\"/about\", endpoint=about),\n]\n\napp = Starlette(routes=routes)\n</code></pre> <p><code>endpoint</code> \u53c2\u6570\u53ef\u4ee5\u662f\u4ee5\u4e0b\u4e4b\u4e00\uff1a</p> <ul> <li>\u4e00\u4e2a\u666e\u901a\u51fd\u6570\u6216\u5f02\u6b65\u51fd\u6570\uff0c\u63a5\u53d7\u4e00\u4e2a <code>request</code> \u53c2\u6570\uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a\u54cd\u5e94\u3002</li> <li>\u4e00\u4e2a\u5b9e\u73b0\u4e86 ASGI \u63a5\u53e3\u7684\u7c7b\uff0c\u4f8b\u5982 Starlette \u7684 HTTPEndpoint\u3002</li> </ul>"},{"location":"routing/#_1","title":"\u8def\u5f84\u53c2\u6570","text":"<p>\u8def\u5f84\u53ef\u4ee5\u4f7f\u7528 URI \u6a21\u677f\u98ce\u683c\u6765\u6355\u83b7\u8def\u5f84\u7ec4\u4ef6\u3002</p> <p><pre><code>Route('/users/{username}', user)\n</code></pre> \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u8fd9\u5c06\u6355\u83b7\u8def\u5f84\u7ed3\u675f\u6216\u4e0b\u4e00\u4e2a <code>/</code> \u4e4b\u524d\u7684\u6240\u6709\u5b57\u7b26\u3002</p> <p>\u4f60\u53ef\u4ee5\u4f7f\u7528\u8f6c\u6362\u5668\u6765\u4fee\u6539\u6355\u83b7\u5185\u5bb9\u3002\u53ef\u7528\u7684\u8f6c\u6362\u5668\u5305\u62ec\uff1a</p> <ul> <li><code>str</code> \u8fd4\u56de\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u8fd9\u662f\u9ed8\u8ba4\u7684\u8f6c\u6362\u5668\u3002</li> <li><code>int</code> \u8fd4\u56de\u4e00\u4e2a Python \u6574\u6570\u3002</li> <li><code>float</code> \u8fd4\u56de\u4e00\u4e2a Python \u6d6e\u70b9\u6570\u3002</li> <li><code>uuid</code> \u8fd4\u56de\u4e00\u4e2a Python <code>uuid.UUID</code> \u5b9e\u4f8b\u3002</li> <li><code>path</code> \u8fd4\u56de\u5269\u4f59\u7684\u8def\u5f84\uff0c\u5305\u62ec\u4efb\u4f55\u989d\u5916\u7684 <code>/</code> \u5b57\u7b26\u3002</li> </ul> <p>\u8f6c\u6362\u5668\u901a\u8fc7\u5728\u8def\u5f84\u4e2d\u4f7f\u7528\u5192\u53f7\u524d\u7f00\u6765\u4f7f\u7528\uff0c\u4f8b\u5982\uff1a</p> <pre><code>Route('/users/{user_id:int}', user)\nRoute('/floating-point/{number:float}', floating_point)\nRoute('/uploaded/{rest_of_path:path}', uploaded)\n</code></pre> <p>\u5982\u679c\u4f60\u9700\u8981\u4e00\u4e2a\u672a\u5b9a\u4e49\u7684\u4e0d\u540c\u8f6c\u6362\u5668\uff0c\u53ef\u4ee5\u521b\u5efa\u81ea\u5df1\u7684\u8f6c\u6362\u5668\u3002\u4ee5\u4e0b\u662f\u5982\u4f55\u521b\u5efa\u4e00\u4e2a <code>datetime</code> \u8f6c\u6362\u5668\u5e76\u6ce8\u518c\u5b83\u7684\u793a\u4f8b\uff1a</p> <pre><code>from datetime import datetime\n\nfrom starlette.convertors import Convertor, register_url_convertor\n\n\nclass DateTimeConvertor(Convertor):\n    regex = \"[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}(.[0-9]+)?\"\n\n    def convert(self, value: str) -&gt; datetime:\n        return datetime.strptime(value, \"%Y-%m-%dT%H:%M:%S\")\n\n    def to_string(self, value: datetime) -&gt; str:\n        return value.strftime(\"%Y-%m-%dT%H:%M:%S\")\n\nregister_url_convertor(\"datetime\", DateTimeConvertor())\n</code></pre> <p>\u6ce8\u518c\u540e\uff0c\u4f60\u5c06\u80fd\u591f\u50cf\u8fd9\u6837\u4f7f\u7528\u5b83\uff1a</p> <pre><code>Route('/history/{date:datetime}', history)\n</code></pre> <p>\u8def\u5f84\u53c2\u6570\u901a\u8fc7 <code>request.path_params</code> \u5b57\u5178\u63d0\u4f9b\u3002</p> <pre><code>async def user(request):\n    user_id = request.path_params['user_id']\n    ...\n</code></pre>"},{"location":"routing/#http_1","title":"\u5904\u7406 HTTP \u65b9\u6cd5","text":"<p>\u8def\u7531\u8fd8\u53ef\u4ee5\u6307\u5b9a\u4e00\u4e2a\u7aef\u70b9\u5904\u7406\u54ea\u4e9b HTTP \u65b9\u6cd5\uff1a</p> <pre><code>Route('/users/{user_id:int}', user, methods=[\"GET\", \"POST\"])\n</code></pre> <p>\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u51fd\u6570\u7aef\u70b9\u53ea\u4f1a\u63a5\u53d7 <code>GET</code> \u8bf7\u6c42\uff0c\u9664\u975e\u53e6\u6709\u6307\u5b9a\u3002</p>"},{"location":"routing/#_2","title":"\u5b50\u8def\u7531\u6302\u8f7d","text":"<p>\u5728\u5927\u578b\u5e94\u7528\u4e2d\uff0c\u4f60\u53ef\u80fd\u5e0c\u671b\u6839\u636e\u5171\u540c\u7684\u8def\u5f84\u524d\u7f00\u5c06\u8def\u7531\u8868\u7684\u90e8\u5206\u62c6\u5206\u51fa\u6765\u3002</p> <pre><code>routes = [\n    Route('/', homepage),\n    Mount('/users', routes=[\n        Route('/', users, methods=['GET', 'POST']),\n        Route('/{username}', user),\n    ])\n]\n</code></pre> <p>\u8fd9\u79cd\u98ce\u683c\u5141\u8bb8\u4f60\u5728\u9879\u76ee\u7684\u4e0d\u540c\u90e8\u5206\u5b9a\u4e49\u8def\u7531\u8868\u7684\u4e0d\u540c\u5b50\u96c6\u3002</p> <pre><code>from myproject import users, auth\n\nroutes = [\n    Route('/', homepage),\n    Mount('/users', routes=users.routes),\n    Mount('/auth', routes=auth.routes),\n]\n</code></pre> <p>\u4f60\u8fd8\u53ef\u4ee5\u4f7f\u7528\u6302\u8f7d\u5c06\u5b50\u5e94\u7528\u5305\u542b\u5728 Starlette \u5e94\u7528\u4e2d\u3002\u4f8b\u5982...</p> <pre><code># \u8fd9\u662f\u4e00\u4e2a\u72ec\u7acb\u7684\u9759\u6001\u6587\u4ef6\u670d\u52a1\u5668\uff1a\napp = StaticFiles(directory=\"static\")\n\n# \u8fd9\u662f\u4e00\u4e2a\u5728 Starlette \u5e94\u7528\u5185\u6302\u8f7d\u7684\u9759\u6001\u6587\u4ef6\u670d\u52a1\u5668\uff0c\n# \u4f4d\u4e8e \"/static\" \u8def\u5f84\u4e0b\u3002\nroutes = [\n    ...\n    Mount(\"/static\", app=StaticFiles(directory=\"static\"), name=\"static\")\n]\n\napp = Starlette(routes=routes)\n</code></pre>"},{"location":"routing/#url","title":"\u53cd\u5411 URL \u67e5\u627e","text":"<p>\u4f60\u901a\u5e38\u5e0c\u671b\u80fd\u591f\u4e3a\u7279\u5b9a\u8def\u7531\u751f\u6210 URL\uff0c\u7279\u522b\u662f\u5728\u9700\u8981\u8fd4\u56de\u91cd\u5b9a\u5411\u54cd\u5e94\u65f6\u3002</p> <ul> <li>\u7b7e\u540d\uff1a<code>url_for(name, **path_params) -&gt; URL</code></li> </ul> <pre><code>routes = [\n    Route(\"/\", homepage, name=\"homepage\")\n]\n\n# \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u4ee3\u7801\u6765\u8fd4\u56de URL...\nurl = request.url_for(\"homepage\")\n</code></pre> <p>URL \u67e5\u627e\u53ef\u4ee5\u5305\u62ec\u8def\u5f84\u53c2\u6570...</p> <pre><code>routes = [\n    Route(\"/users/{username}\", user, name=\"user_detail\")\n]\n\n# \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u4ee3\u7801\u6765\u8fd4\u56de URL...\nurl = request.url_for(\"user_detail\", username=...)\n</code></pre> <p>\u5982\u679c\u4e00\u4e2a <code>Mount</code> \u5305\u542b <code>name</code>\uff0c\u5219\u5b50\u8def\u7531\u5e94\u4f7f\u7528 <code>{prefix}:{name}</code> \u98ce\u683c\u8fdb\u884c\u53cd\u5411 URL \u67e5\u627e\u3002</p> <pre><code>routes = [\n    Mount(\"/users\", name=\"users\", routes=[\n        Route(\"/\", user, name=\"user_list\"),\n        Route(\"/{username}\", user, name=\"user_detail\")\n    ])\n]\n\n# \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u4ee3\u7801\u6765\u8fd4\u56de URL...\nurl = request.url_for(\"users:user_list\")\nurl = request.url_for(\"users:user_detail\", username=...)\n</code></pre> <p>\u6302\u8f7d\u7684\u5e94\u7528\u53ef\u4ee5\u5305\u62ec <code>path=...</code> \u53c2\u6570\u3002</p> <pre><code>routes = [\n    ...\n    Mount(\"/static\", app=StaticFiles(directory=\"static\"), name=\"static\")\n]\n\n# \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u4ee3\u7801\u6765\u8fd4\u56de URL...\nurl = request.url_for(\"static\", path=\"/css/base.css\")\n</code></pre> <p>\u5bf9\u4e8e\u6ca1\u6709 <code>request</code> \u5b9e\u4f8b\u7684\u60c5\u51b5\uff0c\u4f60\u53ef\u4ee5\u5bf9\u5e94\u7528\u7a0b\u5e8f\u8fdb\u884c\u53cd\u5411\u67e5\u627e\uff0c\u5c3d\u7ba1\u8fd9\u4e9b\u53ea\u4f1a\u8fd4\u56de URL \u8def\u5f84\u3002</p> <pre><code>url = app.url_path_for(\"user_detail\", username=...)\n</code></pre>"},{"location":"routing/#_3","title":"\u57fa\u4e8e\u4e3b\u673a\u7684\u8def\u7531","text":"<p>\u5982\u679c\u4f60\u5e0c\u671b\u6839\u636e <code>Host</code> \u5934\u90e8\u4f7f\u7528\u4e0d\u540c\u7684\u8def\u7531\u6765\u5904\u7406\u76f8\u540c\u7684\u8def\u5f84\uff0c\u53ef\u4ee5\u4f7f\u7528\u57fa\u4e8e\u4e3b\u673a\u7684\u8def\u7531\u3002</p> <p>\u8bf7\u6ce8\u610f\uff0c\u5339\u914d\u65f6\u4f1a\u4ece <code>Host</code> \u5934\u90e8\u79fb\u9664\u7aef\u53e3\u3002\u4f8b\u5982\uff0c<code>Host (host='example.org:3600', ...)</code> \u5c06\u88ab\u5904\u7406\uff0c\u5373\u4f7f <code>Host</code> \u5934\u90e8\u5305\u542b\u6216\u4e0d\u5305\u542b\u9664 <code>3600</code> \u5916\u7684\u7aef\u53e3\uff08\u4f8b\u5982 <code>example.org:5600</code>\u3001<code>example.org</code>\uff09\u3002\u56e0\u6b64\uff0c\u5982\u679c\u9700\u8981\u5728 <code>url_for</code> \u4e2d\u4f7f\u7528\u7aef\u53e3\uff0c\u53ef\u4ee5\u5728\u4e3b\u673a\u540d\u4e2d\u6307\u5b9a\u7aef\u53e3\u3002</p> <p>\u6709\u51e0\u79cd\u65b9\u6cd5\u53ef\u4ee5\u5c06\u57fa\u4e8e\u4e3b\u673a\u7684\u8def\u7531\u8fde\u63a5\u5230\u5e94\u7528\u7a0b\u5e8f\u4e2d\uff1a</p> <pre><code>site = Router()  # \u4f8b\u5982\u4f7f\u7528 `@site.route()` \u6765\u914d\u7f6e\u3002\napi = Router()  # \u4f8b\u5982\u4f7f\u7528 `@api.route()` \u6765\u914d\u7f6e\u3002\nnews = Router()  # \u4f8b\u5982\u4f7f\u7528 `@news.route()` \u6765\u914d\u7f6e\u3002\n\nroutes = [\n    Host('api.example.org', api, name=\"site_api\")\n]\n\napp = Starlette(routes=routes)\n\napp.host('www.example.org', site, name=\"main_site\")\n\nnews_host = Host('news.example.org', news)\napp.router.routes.append(news_host)\n</code></pre> <p>URL \u67e5\u627e\u53ef\u4ee5\u50cf\u8def\u5f84\u53c2\u6570\u4e00\u6837\u5305\u62ec\u4e3b\u673a\u53c2\u6570\uff1a</p> <pre><code>routes = [\n    Host(\"{subdomain}.example.org\", name=\"sub\", app=Router(routes=[\n        Mount(\"/users\", name=\"users\", routes=[\n            Route(\"/\", user, name=\"user_list\"),\n            Route(\"/{username}\", user, name=\"user_detail\")\n        ])\n    ]))\n]\n...\nurl = request.url_for(\"sub:users:user_detail\", username=..., subdomain=...)\nurl = request.url_for(\"sub:users:user_list\", subdomain=...)\n</code></pre>"},{"location":"routing/#_4","title":"\u8def\u7531\u4f18\u5148\u7ea7","text":"<p>\u4f20\u5165\u8def\u5f84\u4f1a\u4f9d\u6b21\u4e0e\u6bcf\u4e2a <code>Route</code> \u8fdb\u884c\u5339\u914d\u3002</p> <p>\u5982\u679c\u591a\u4e2a\u8def\u7531\u90fd\u53ef\u80fd\u5339\u914d\u4f20\u5165\u8def\u5f84\uff0c\u5e94\u8be5\u786e\u4fdd\u66f4\u5177\u4f53\u7684\u8def\u7531\u6392\u5728\u4e00\u822c\u60c5\u51b5\u4e4b\u524d\u3002</p> <p>\u4f8b\u5982\uff1a</p> <pre><code># \u4e0d\u8981\u8fd9\u6837\u505a\uff1a`/users/me` \u6c38\u8fdc\u4e0d\u4f1a\u5339\u914d\u4f20\u5165\u8bf7\u6c42\u3002\nroutes = [\n    Route('/users/{username}', user),\n    Route('/users/me', current_user),\n]\n\n# \u8fd9\u6837\u505a\uff1a`/users/me` \u4f1a\u9996\u5148\u88ab\u6d4b\u8bd5\u3002\nroutes = [\n    Route('/users/me', current_user),\n    Route('/users/{username}', user),\n]\n</code></pre>"},{"location":"routing/#router","title":"\u4f7f\u7528 Router \u5b9e\u4f8b","text":"<p>\u5982\u679c\u4f60\u5728\u5e95\u5c42\u5de5\u4f5c\uff0c\u53ef\u80fd\u5e0c\u671b\u4f7f\u7528\u4e00\u4e2a\u666e\u901a\u7684 <code>Router</code> \u5b9e\u4f8b\uff0c\u800c\u4e0d\u662f\u521b\u5efa\u4e00\u4e2a <code>Starlette</code> \u5e94\u7528\u3002\u8fd9\u5c06\u4e3a\u4f60\u63d0\u4f9b\u4e00\u4e2a\u8f7b\u91cf\u7ea7\u7684 ASGI \u5e94\u7528\uff0c\u53ea\u63d0\u4f9b\u5e94\u7528\u8def\u7531\uff0c\u800c\u4e0d\u5305\u542b\u4efb\u4f55\u4e2d\u95f4\u4ef6\u3002</p> <pre><code>app = Router(routes=[\n    Route('/', homepage),\n    Mount('/users', routes=[\n        Route('/', users, methods=['GET', 'POST']),\n        Route('/{username}', user),\n    ])\n])\n</code></pre>"},{"location":"routing/#websocket","title":"WebSocket \u8def\u7531","text":"<p>\u5728\u5904\u7406 WebSocket \u7aef\u70b9\u65f6\uff0c\u5e94\u8be5\u4f7f\u7528 <code>WebSocketRoute</code>\uff0c\u800c\u4e0d\u662f\u901a\u5e38\u7684 <code>Route</code>\u3002</p> <p>\u8def\u5f84\u53c2\u6570\u548c <code>WebSocketRoute</code> \u7684\u53cd\u5411 URL \u67e5\u627e\u4e0e HTTP <code>Route</code> \u76f8\u540c\uff0c\u53ef\u4ee5\u5728 HTTP \u8def\u7531\u90e8\u5206\u627e\u5230\u76f8\u5173\u8bf4\u660e\u3002</p> <pre><code>from starlette.applications import Starlette\nfrom starlette.routing import WebSocketRoute\n\n\nasync def websocket_index(websocket):\n    await websocket.accept()\n    await websocket.send_text(\"Hello, websocket!\")\n    await websocket.close()\n\n\nasync def websocket_user(websocket):\n    name = websocket.path_params[\"name\"]\n    await websocket.accept()\n    await websocket.send_text(f\"Hello, {name}\")\n    await websocket.close()\n\n\nroutes = [\n    WebSocketRoute(\"/\", endpoint=websocket_index),\n    WebSocketRoute(\"/{name}\", endpoint=websocket_user),\n]\n\napp = Starlette(routes=routes)\n</code></pre> <p><code>endpoint</code> \u53c2\u6570\u53ef\u4ee5\u662f\u4ee5\u4e0b\u4e4b\u4e00\uff1a</p> <ul> <li>\u4e00\u4e2a\u5f02\u6b65\u51fd\u6570\uff0c\u63a5\u53d7\u4e00\u4e2a <code>websocket</code> \u53c2\u6570\u3002</li> <li>\u4e00\u4e2a\u5b9e\u73b0 ASGI \u63a5\u53e3\u7684\u7c7b\uff0c\u4f8b\u5982 Starlette \u7684 WebSocketEndpoint\u3002</li> </ul>"},{"location":"schemas/","title":"API Schemas","text":"<p>Starlette \u652f\u6301\u751f\u6210 API \u6a21\u5f0f\uff0c\u5982\u5e7f\u6cdb\u4f7f\u7528\u7684 OpenAPI \u89c4\u8303\uff08\u524d\u8eab\u4e3a \"Swagger\"\uff09\u3002</p> <p>\u6a21\u5f0f\u751f\u6210\u901a\u8fc7\u68c0\u67e5\u5e94\u7528\u7a0b\u5e8f\u4e2d\u7684\u8def\u7531\uff08\u901a\u8fc7 <code>app.routes</code>\uff09\u4ee5\u53ca\u4f7f\u7528\u7aef\u70b9\u4e0a\u7684\u6587\u6863\u5b57\u7b26\u4e32\u6216\u5176\u4ed6\u5c5e\u6027\u6765\u786e\u5b9a\u5b8c\u6574\u7684 API \u6a21\u5f0f\u3002</p> <p>Starlette \u5e76\u4e0d\u4f9d\u8d56\u4e8e\u4efb\u4f55\u7279\u5b9a\u7684\u6a21\u5f0f\u751f\u6210\u6216\u9a8c\u8bc1\u5de5\u5177\uff0c\u4f46\u5305\u542b\u4e86\u4e00\u4e2a\u7b80\u5355\u7684\u5b9e\u73b0\uff0c\u57fa\u4e8e\u6587\u6863\u5b57\u7b26\u4e32\u751f\u6210 OpenAPI \u6a21\u5f0f\u3002</p> <pre><code>from starlette.applications import Starlette\nfrom starlette.routing import Route\nfrom starlette.schemas import SchemaGenerator\n\n\nschemas = SchemaGenerator(\n    {\"openapi\": \"3.0.0\", \"info\": {\"title\": \"Example API\", \"version\": \"1.0\"}}\n)\n\ndef list_users(request):\n    \"\"\"\n    responses:\n      200:\n        description: A list of users.\n        examples:\n          [{\"username\": \"tom\"}, {\"username\": \"lucy\"}]\n    \"\"\"\n    raise NotImplementedError()\n\n\ndef create_user(request):\n    \"\"\"\n    responses:\n      200:\n        description: A user.\n        examples:\n          {\"username\": \"tom\"}\n    \"\"\"\n    raise NotImplementedError()\n\n\ndef openapi_schema(request):\n    return schemas.OpenAPIResponse(request=request)\n\n\nroutes = [\n    Route(\"/users\", endpoint=list_users, methods=[\"GET\"]),\n    Route(\"/users\", endpoint=create_user, methods=[\"POST\"]),\n    Route(\"/schema\", endpoint=openapi_schema, include_in_schema=False)\n]\n\napp = Starlette(routes=routes)\n</code></pre> <p>\u73b0\u5728\uff0c\u6211\u4eec\u53ef\u4ee5\u5728 \"/schema\" \u7aef\u70b9\u8bbf\u95ee OpenAPI \u6a21\u5f0f\u3002</p> <p>\u60a8\u8fd8\u53ef\u4ee5\u76f4\u63a5\u901a\u8fc7 <code>.get_schema(routes)</code> \u751f\u6210 API \u6a21\u5f0f\uff1a</p> <pre><code>schema = schemas.get_schema(routes=app.routes)\nassert schema == {\n    \"openapi\": \"3.0.0\",\n    \"info\": {\"title\": \"Example API\", \"version\": \"1.0\"},\n    \"paths\": {\n        \"/users\": {\n            \"get\": {\n                \"responses\": {\n                    200: {\n                        \"description\": \"A list of users.\",\n                        \"examples\": [{\"username\": \"tom\"}, {\"username\": \"lucy\"}],\n                    }\n                }\n            },\n            \"post\": {\n                \"responses\": {\n                    200: {\"description\": \"A user.\", \"examples\": {\"username\": \"tom\"}}\n                }\n            },\n        },\n    },\n}\n</code></pre> <p>\u60a8\u53ef\u80fd\u8fd8\u5e0c\u671b\u80fd\u591f\u6253\u5370\u51fa API \u6a21\u5f0f\uff0c\u4ee5\u4fbf\u4f7f\u7528\u5de5\u5177\u751f\u6210 API \u6587\u6863\u3002</p> <pre><code>if __name__ == '__main__':\n    assert sys.argv[-1] in (\"run\", \"schema\"), \"Usage: example.py [run|schema]\"\n\n    if sys.argv[-1] == \"run\":\n        uvicorn.run(\"example:app\", host='0.0.0.0', port=8000)\n    elif sys.argv[-1] == \"schema\":\n        schema = schemas.get_schema(routes=app.routes)\n        print(yaml.dump(schema, default_flow_style=False))\n</code></pre>"},{"location":"schemas/#_1","title":"\u7b2c\u4e09\u65b9\u5305","text":""},{"location":"schemas/#starlette-apispec","title":"starlette-apispec","text":"<p>Starlette \u7684\u7b80\u5355 APISpec \u96c6\u6210\uff0c\u652f\u6301\u4e00\u4e9b\u5bf9\u8c61\u5e8f\u5217\u5316\u5e93\u3002</p>"},{"location":"server-push/","title":"\u670d\u52a1\u63a8\u9001","text":"<p>Starlette \u652f\u6301 HTTP/2 \u548c HTTP/3 \u670d\u52a1\u5668\u63a8\u9001\uff0c\u4f7f\u5f97\u53ef\u4ee5\u5c06\u8d44\u6e90\u63a8\u9001\u5230\u5ba2\u6237\u7aef\uff0c\u4ece\u800c\u52a0\u5feb\u9875\u9762\u52a0\u8f7d\u65f6\u95f4\u3002</p>"},{"location":"server-push/#requestsend_push_promise","title":"<code>Request.send_push_promise</code>","text":"<p>\u7528\u4e8e\u542f\u52a8\u8d44\u6e90\u7684\u670d\u52a1\u5668\u63a8\u9001\u3002\u5982\u679c\u670d\u52a1\u5668\u63a8\u9001\u4e0d\u53ef\u7528\uff0c\u5219\u6b64\u65b9\u6cd5\u4e0d\u6267\u884c\u4efb\u4f55\u64cd\u4f5c\u3002</p> <p>\u7b7e\u540d\uff1a<code>send_push_promise(path)</code></p> <ul> <li><code>path</code> - \u8868\u793a\u8d44\u6e90\u8def\u5f84\u7684\u5b57\u7b26\u4e32\u3002</li> </ul> <pre><code>from starlette.applications import Starlette\nfrom starlette.responses import HTMLResponse\nfrom starlette.routing import Route, Mount\nfrom starlette.staticfiles import StaticFiles\n\n\nasync def homepage(request):\n    \"\"\"\n    \u4e3b\u9875\u4f7f\u7528\u670d\u52a1\u5668\u63a8\u9001\u6765\u4f20\u9001\u6837\u5f0f\u8868\u3002\n    \"\"\"\n    await request.send_push_promise(\"/static/style.css\")\n    return HTMLResponse(\n        '&lt;html&gt;&lt;head&gt;&lt;link rel=\"stylesheet\" href=\"/static/style.css\"/&gt;&lt;/head&gt;&lt;/html&gt;'\n    )\n\nroutes = [\n    Route(\"/\", endpoint=homepage),\n    Mount(\"/static\", StaticFiles(directory=\"static\"), name=\"static\")\n]\n\napp = Starlette(routes=routes)\n</code></pre>"},{"location":"staticfiles/","title":"\u9759\u6001\u6587\u4ef6","text":"<p>Starlette \u8fd8\u5305\u62ec\u4e00\u4e2a <code>StaticFiles</code> \u7c7b\uff0c\u7528\u4e8e\u63d0\u4f9b\u7ed9\u5b9a\u76ee\u5f55\u4e2d\u7684\u6587\u4ef6\u670d\u52a1\uff1a</p>"},{"location":"staticfiles/#staticfiles","title":"StaticFiles","text":"<p>\u7b7e\u540d\uff1a<code>StaticFiles(directory=None, packages=None, html=False, check_dir=True, follow_symlink=False)</code></p> <ul> <li><code>directory</code> - \u4e00\u4e2a\u5b57\u7b26\u4e32\u6216 os.PathLike\uff0c\u8868\u793a\u76ee\u5f55\u8def\u5f84\u3002</li> <li><code>packages</code> - \u4e00\u4e2a\u5b57\u7b26\u4e32\u5217\u8868\u6216\u5305\u542b\u5b57\u7b26\u4e32\u5143\u7ec4\u7684\u5217\u8868\uff0c\u8868\u793a Python \u5305\u3002</li> <li><code>html</code> - \u4ee5 HTML \u6a21\u5f0f\u8fd0\u884c\u3002\u5982\u679c\u76ee\u5f55\u4e2d\u5b58\u5728 <code>index.html</code> \u6587\u4ef6\uff0c\u5219\u81ea\u52a8\u52a0\u8f7d\u8be5\u6587\u4ef6\u3002</li> <li><code>check_dir</code> - \u786e\u4fdd\u5728\u5b9e\u4f8b\u5316\u65f6\u76ee\u5f55\u5b58\u5728\u3002\u9ed8\u8ba4\u4e3a <code>True</code>\u3002</li> <li><code>follow_symlink</code> - \u4e00\u4e2a\u5e03\u5c14\u503c\uff0c\u6307\u793a\u662f\u5426\u5e94\u8ddf\u968f\u6587\u4ef6\u548c\u76ee\u5f55\u7684\u7b26\u53f7\u94fe\u63a5\u3002\u9ed8\u8ba4\u4e3a <code>False</code>\u3002</li> </ul> <p>\u60a8\u53ef\u4ee5\u5c06\u6b64 ASGI \u5e94\u7528\u7a0b\u5e8f\u4e0e Starlette \u7684\u8def\u7531\u7ed3\u5408\u4f7f\u7528\uff0c\u4ee5\u63d0\u4f9b\u5168\u9762\u7684\u9759\u6001\u6587\u4ef6\u670d\u52a1\u3002</p> <pre><code>from starlette.applications import Starlette\nfrom starlette.routing import Mount\nfrom starlette.staticfiles import StaticFiles\n\n\nroutes = [\n    ...\n    Mount('/static', app=StaticFiles(directory='static'), name=\"static\"),\n]\n\napp = Starlette(routes=routes)\n</code></pre> <p>\u5bf9\u4e8e\u4e0d\u5339\u914d\u7684\u8bf7\u6c42\uff0c\u9759\u6001\u6587\u4ef6\u5c06\u8fd4\u56de \"404 Not found\" \u6216 \"405 Method not allowed\" \u54cd\u5e94\u3002\u5982\u679c\u5728 HTML \u6a21\u5f0f\u4e0b\u5b58\u5728 <code>404.html</code> \u6587\u4ef6\uff0c\u5b83\u5c06\u4f5c\u4e3a 404 \u54cd\u5e94\u663e\u793a\u3002</p> <p><code>packages</code> \u9009\u9879\u53ef\u7528\u4e8e\u5305\u542b Python \u5305\u5185\u7684 \"static\" \u76ee\u5f55\u3002Python \u7684 \"bootstrap4\" \u5305\u5c31\u662f\u4e00\u4e2a\u4f8b\u5b50\u3002</p> <pre><code>from starlette.applications import Starlette\nfrom starlette.routing import Mount\nfrom starlette.staticfiles import StaticFiles\n\n\nroutes=[\n    ...\n    Mount('/static', app=StaticFiles(directory='static', packages=['bootstrap4']), name=\"static\"),\n]\n\napp = Starlette(routes=routes)\n</code></pre> <p>\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c<code>StaticFiles</code> \u4f1a\u5728\u6bcf\u4e2a\u5305\u4e2d\u67e5\u627e <code>statics</code> \u76ee\u5f55\uff0c\u60a8\u53ef\u4ee5\u901a\u8fc7\u6307\u5b9a\u5b57\u7b26\u4e32\u5143\u7ec4\u6765\u66f4\u6539\u9ed8\u8ba4\u76ee\u5f55\u3002</p> <pre><code>routes=[\n    ...\n    Mount('/static', app=StaticFiles(packages=[('bootstrap4', 'static')]), name=\"static\"),\n]\n</code></pre> <p>\u60a8\u53ef\u80fd\u66f4\u559c\u6b22\u5c06\u9759\u6001\u6587\u4ef6\u76f4\u63a5\u5305\u542b\u5728 \"static\" \u76ee\u5f55\u4e2d\uff0c\u800c\u4e0d\u662f\u4f7f\u7528 Python \u6253\u5305\u6765\u5305\u542b\u9759\u6001\u6587\u4ef6\uff0c\u4f46\u5b83\u5bf9\u4e8e\u6253\u5305\u53ef\u91cd\u7528\u7ec4\u4ef6\u53ef\u80fd\u662f\u6709\u7528\u7684\u3002</p>"},{"location":"templates/","title":"\u6a21\u677f","text":"<p>Starlette \u5e76\u6ca1\u6709\u4e0e\u4efb\u4f55\u7279\u5b9a\u7684\u6a21\u677f\u5f15\u64ce \u4e25\u683c \u7ed1\u5b9a\uff0c\u4f46 Jinja2 \u662f\u4e00\u4e2a\u975e\u5e38\u597d\u7684\u9009\u62e9\u3002</p>"},{"location":"templates/#jinja2templates","title":"Jinja2Templates","text":"<p>\u7b7e\u540d\uff1a<code>Jinja2Templates(directory, context_processors=None, **env_options)</code></p> <ul> <li><code>directory</code> - \u4e00\u4e2a\u5b57\u7b26\u4e32\u3001os.Pathlike \u6216\u4e00\u4e2a\u8868\u793a\u76ee\u5f55\u8def\u5f84\u7684\u5b57\u7b26\u4e32\u5217\u8868\u6216 os.Pathlike\u3002</li> <li><code>context_processors</code> - \u4e00\u4e2a\u51fd\u6570\u5217\u8868\uff0c\u8fd9\u4e9b\u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u5b57\u5178\uff0c\u7528\u4e8e\u6dfb\u52a0\u5230\u6a21\u677f\u4e0a\u4e0b\u6587\u4e2d\u3002</li> <li><code>**env_options</code> - \u4f20\u9012\u7ed9 Jinja2 \u73af\u5883\u7684\u9644\u52a0\u5173\u952e\u5b57\u53c2\u6570\u3002</li> </ul> <p>Starlette \u63d0\u4f9b\u4e86\u4e00\u79cd\u7b80\u5355\u7684\u65b9\u5f0f\u6765\u914d\u7f6e <code>jinja2</code>\u3002\u8fd9\u901a\u5e38\u662f\u60a8\u9ed8\u8ba4\u5e0c\u671b\u4f7f\u7528\u7684\u65b9\u5f0f\u3002</p> <pre><code>from starlette.applications import Starlette\nfrom starlette.routing import Route, Mount\nfrom starlette.templating import Jinja2Templates\nfrom starlette.staticfiles import StaticFiles\n\n\ntemplates = Jinja2Templates(directory='templates')\n\nasync def homepage(request):\n    return templates.TemplateResponse(request, 'index.html')\n\nroutes = [\n    Route('/', endpoint=homepage),\n    Mount('/static', StaticFiles(directory='static'), name='static')\n]\n\napp = Starlette(debug=True, routes=routes)\n</code></pre> <p>\u8bf7\u6ce8\u610f\uff0c\u4f20\u5165\u7684 <code>request</code> \u5b9e\u4f8b\u5fc5\u987b\u4f5c\u4e3a\u6a21\u677f\u4e0a\u4e0b\u6587\u7684\u4e00\u90e8\u5206\u5305\u542b\u5728\u5185\u3002</p> <p>Jinja2 \u6a21\u677f\u4e0a\u4e0b\u6587\u5c06\u81ea\u52a8\u5305\u542b\u4e00\u4e2a <code>url_for</code> \u51fd\u6570\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u6b63\u786e\u5730\u5728\u5e94\u7528\u7a0b\u5e8f\u5185\u8fdb\u884c\u9875\u9762\u95f4\u7684\u8d85\u94fe\u63a5\u3002</p> <p>\u4f8b\u5982\uff0c\u6211\u4eec\u53ef\u4ee5\u5728 HTML \u6a21\u677f\u4e2d\u94fe\u63a5\u9759\u6001\u6587\u4ef6\uff1a</p> <pre><code>&lt;link href=\"{{ url_for('static', path='/css/bootstrap.min.css') }}\" rel=\"stylesheet\" /&gt;\n</code></pre> <p>\u5982\u679c\u60a8\u60f3\u4f7f\u7528 \u81ea\u5b9a\u4e49\u8fc7\u6ee4\u5668\uff0c\u60a8\u9700\u8981\u66f4\u65b0 <code>Jinja2Templates</code> \u7684 <code>env</code> \u5c5e\u6027\uff1a</p> <pre><code>from commonmark import commonmark\nfrom starlette.templating import Jinja2Templates\n\ndef marked_filter(text):\n    return commonmark(text)\n\ntemplates = Jinja2Templates(directory='templates')\ntemplates.env.filters['marked'] = marked_filter\n</code></pre>"},{"location":"templates/#jinja2environment","title":"\u4f7f\u7528\u81ea\u5b9a\u4e49 jinja2.Environment \u5b9e\u4f8b","text":"<p>Starlette \u8fd8\u63a5\u53d7\u4e00\u4e2a\u9884\u914d\u7f6e\u7684 <code>jinja2.Environment</code> \u5b9e\u4f8b\u3002</p> <pre><code>import jinja2\nfrom starlette.templating import Jinja2Templates\n\nenv = jinja2.Environment(...)\ntemplates = Jinja2Templates(env=env)\n</code></pre>"},{"location":"templates/#_1","title":"\u4e0a\u4e0b\u6587\u5904\u7406\u5668","text":"<p>\u4e0a\u4e0b\u6587\u5904\u7406\u5668\u662f\u4e00\u4e2a\u51fd\u6570\uff0c\u8fd4\u56de\u4e00\u4e2a\u5b57\u5178\uff0c\u8be5\u5b57\u5178\u5c06\u5408\u5e76\u5230\u6a21\u677f\u4e0a\u4e0b\u6587\u4e2d\u3002\u6bcf\u4e2a\u51fd\u6570\u53ea\u63a5\u53d7\u4e00\u4e2a\u53c2\u6570 <code>request</code>\uff0c\u5e76\u4e14\u5fc5\u987b\u8fd4\u56de\u4e00\u4e2a\u5b57\u5178\uff0c\u6dfb\u52a0\u5230\u4e0a\u4e0b\u6587\u4e2d\u3002</p> <p>\u6a21\u677f\u5904\u7406\u5668\u7684\u4e00\u4e2a\u5e38\u89c1\u7528\u4f8b\u662f\u5c06\u5171\u4eab\u53d8\u91cf\u6269\u5c55\u5230\u6a21\u677f\u4e0a\u4e0b\u6587\u4e2d\u3002</p> <pre><code>import typing\nfrom starlette.requests import Request\n\ndef app_context(request: Request) -&gt; typing.Dict[str, typing.Any]:\n    return {'app': request.app}\n</code></pre>"},{"location":"templates/#_2","title":"\u6ce8\u518c\u4e0a\u4e0b\u6587\u6a21\u677f","text":"<p>\u5c06\u4e0a\u4e0b\u6587\u5904\u7406\u5668\u4f20\u9012\u7ed9 <code>Jinja2Templates</code> \u7c7b\u7684 <code>context_processors</code> \u53c2\u6570\u3002</p> <pre><code>import typing\n\nfrom starlette.requests import Request\nfrom starlette.templating import Jinja2Templates\n\ndef app_context(request: Request) -&gt; typing.Dict[str, typing.Any]:\n    return {'app': request.app}\n\ntemplates = Jinja2Templates(\n    directory='templates', context_processors=[app_context]\n)\n</code></pre> <p>Info</p> <p>\u4e0d\u652f\u6301\u5c06\u5f02\u6b65\u51fd\u6570\u4f5c\u4e3a\u4e0a\u4e0b\u6587\u5904\u7406\u5668\u3002</p>"},{"location":"templates/#_3","title":"\u6d4b\u8bd5\u6a21\u677f\u54cd\u5e94","text":"<p>\u5728\u4f7f\u7528\u6d4b\u8bd5\u5ba2\u6237\u7aef\u65f6\uff0c\u6a21\u677f\u54cd\u5e94\u5305\u62ec <code>.template</code> \u548c <code>.context</code> \u5c5e\u6027\u3002</p> <pre><code>from starlette.testclient import TestClient\n\n\ndef test_homepage():\n    client = TestClient(app)\n    response = client.get(\"/\")\n    assert response.status_code == 200\n    assert response.template.name == 'index.html'\n    assert \"request\" in response.context\n</code></pre>"},{"location":"templates/#jinja2","title":"\u81ea\u5b9a\u4e49 Jinja2 \u73af\u5883","text":"<p><code>Jinja2Templates</code> \u63a5\u53d7 Jinja2 <code>Environment</code> \u652f\u6301\u7684\u6240\u6709\u9009\u9879\u3002\u8fd9\u5c06\u5141\u8bb8\u60a8\u66f4\u597d\u5730\u63a7\u5236 Starlette \u521b\u5efa\u7684 <code>Environment</code> \u5b9e\u4f8b\u3002</p> <p>\u6709\u5173 <code>Environment</code> \u53ef\u7528\u9009\u9879\u7684\u5217\u8868\uff0c\u60a8\u53ef\u4ee5\u67e5\u770b Jinja2 \u6587\u6863 \u8fd9\u91cc\u3002</p> <pre><code>from starlette.templating import Jinja2Templates\n\n\ntemplates = Jinja2Templates(directory='templates', autoescape=False, auto_reload=True)\n</code></pre>"},{"location":"templates/#_4","title":"\u5f02\u6b65\u6a21\u677f\u6e32\u67d3","text":"<p>Jinja2 \u652f\u6301\u5f02\u6b65\u6a21\u677f\u6e32\u67d3\uff0c\u4f46\u901a\u5e38\u6211\u4eec\u5efa\u8bae\u60a8\u907f\u514d\u5728\u6a21\u677f\u4e2d\u6267\u884c\u4f1a\u8c03\u7528\u6570\u636e\u5e93\u67e5\u8be2\u6216\u5176\u4ed6 I/O \u64cd\u4f5c\u7684\u903b\u8f91\u3002</p> <p>\u76f8\u53cd\uff0c\u6211\u4eec\u5efa\u8bae\u60a8\u786e\u4fdd\u7aef\u70b9\u6267\u884c\u6240\u6709 I/O \u64cd\u4f5c\uff0c\u4f8b\u5982\uff0c\u5728\u89c6\u56fe\u4e2d\u4e25\u683c\u8bc4\u4f30\u6570\u636e\u5e93\u67e5\u8be2\uff0c\u5e76\u5c06\u6700\u7ec8\u7ed3\u679c\u5305\u542b\u5728\u4e0a\u4e0b\u6587\u4e2d\u3002</p>"},{"location":"testclient/","title":"\u6d4b\u8bd5","text":"<p>\u6d4b\u8bd5\u5ba2\u6237\u7aef\u5141\u8bb8\u60a8\u4f7f\u7528 <code>httpx</code> \u5e93\u5411 ASGI \u5e94\u7528\u7a0b\u5e8f\u53d1\u51fa\u8bf7\u6c42\u3002</p> <pre><code>from starlette.responses import HTMLResponse\nfrom starlette.testclient import TestClient\n\n\nasync def app(scope, receive, send):\n    assert scope['type'] == 'http'\n    response = HTMLResponse('&lt;html&gt;&lt;body&gt;Hello, world!&lt;/body&gt;&lt;/html&gt;')\n    await response(scope, receive, send)\n\n\ndef test_app():\n    client = TestClient(app)\n    response = client.get('/')\n    assert response.status_code == 200\n</code></pre> <p>\u6d4b\u8bd5\u5ba2\u6237\u7aef\u66b4\u9732\u4e86\u4e0e\u5176\u4ed6 <code>httpx</code> \u4f1a\u8bdd\u76f8\u540c\u7684\u63a5\u53e3\u3002 \u7279\u522b\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8bf7\u6c42\u8c03\u7528\u53ea\u662f\u6807\u51c6\u7684\u51fd\u6570\u8c03\u7528\uff0c\u800c\u4e0d\u662f\u53ef\u7b49\u5f85\u5bf9\u8c61\u3002</p> <p>\u60a8\u53ef\u4ee5\u4f7f\u7528 <code>httpx</code> \u6807\u51c6 API \u4e2d\u7684\u4efb\u4f55\u529f\u80fd\uff0c\u4f8b\u5982\u8eab\u4efd\u9a8c\u8bc1\u3001\u4f1a\u8bdd cookie \u5904\u7406\u6216\u6587\u4ef6\u4e0a\u4f20\u3002</p> <p>\u4f8b\u5982\uff0c\u8981\u5728 <code>TestClient</code> \u4e0a\u8bbe\u7f6e\u5934\u90e8\uff0c\u60a8\u53ef\u4ee5\u8fd9\u6837\u505a\uff1a</p> <pre><code>client = TestClient(app)\n\n# \u4e3a\u672a\u6765\u7684\u8bf7\u6c42\u8bbe\u7f6e\u5934\u90e8\nclient.headers = {\"Authorization\": \"...\"}\nresponse = client.get(\"/\")\n\n# \u4e3a\u6bcf\u4e2a\u8bf7\u6c42\u5355\u72ec\u8bbe\u7f6e\u5934\u90e8\nresponse = client.get(\"/\", headers={\"Authorization\": \"...\"})\n</code></pre> <p>\u4f8b\u5982\uff0c\u5411 <code>TestClient</code> \u53d1\u9001\u6587\u4ef6\uff1a</p> <pre><code>client = TestClient(app)\n\n# \u53d1\u9001\u5355\u4e2a\u6587\u4ef6\nwith open(\"example.txt\", \"rb\") as f:\n    response = client.post(\"/form\", files={\"file\": f})\n\n# \u53d1\u9001\u591a\u4e2a\u6587\u4ef6\nwith open(\"example.txt\", \"rb\") as f1:\n    with open(\"example.png\", \"rb\") as f2:\n        files = {\"file1\": f1, \"file2\": (\"filename\", f2, \"image/png\")}\n        response = client.post(\"/form\", files=files)\n</code></pre> <p>\u6709\u5173\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u67e5\u770b <code>httpx</code> \u6587\u6863\u3002</p> <p>\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c<code>TestClient</code> \u4f1a\u5f15\u53d1\u5e94\u7528\u7a0b\u5e8f\u4e2d\u53d1\u751f\u7684\u4efb\u4f55\u5f02\u5e38\u3002\u5076\u5c14\uff0c\u60a8\u53ef\u80fd\u5e0c\u671b\u6d4b\u8bd5 500 \u9519\u8bef\u54cd\u5e94\u7684\u5185\u5bb9\uff0c\u800c\u4e0d\u662f\u5141\u8bb8\u5ba2\u6237\u7aef\u5f15\u53d1\u670d\u52a1\u5668\u5f02\u5e38\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u60a8\u5e94\u8be5\u4f7f\u7528 <code>client = TestClient(app, raise_server_exceptions=False)</code>\u3002</p> <p>Note</p> <p>\u5982\u679c\u60a8\u5e0c\u671b <code>TestClient</code> \u8fd0\u884c <code>lifespan</code> \u5904\u7406\u7a0b\u5e8f\uff0c \u60a8\u9700\u8981\u5c06 <code>TestClient</code> \u4f5c\u4e3a\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u4f7f\u7528\u3002\u5b83\u4e0d\u4f1a\u5728 <code>TestClient</code> \u5b9e\u4f8b\u5316\u65f6\u89e6\u53d1\u3002\u60a8\u53ef\u4ee5\u5728 \u8fd9\u91cc \u4e86\u89e3\u66f4\u591a\u3002</p>"},{"location":"testclient/#_1","title":"\u9009\u62e9\u5f02\u6b65\u540e\u7aef","text":"<p><code>TestClient</code> \u63a5\u53d7 <code>backend</code>\uff08\u5b57\u7b26\u4e32\u7c7b\u578b\uff09\u548c <code>backend_options</code>\uff08\u5b57\u5178\u7c7b\u578b\uff09\u53c2\u6570\u3002\u8fd9\u4e9b\u9009\u9879\u4f1a\u4f20\u9012\u7ed9 <code>anyio.start_blocking_portal()</code>\u3002\u6709\u5173\u63a5\u53d7\u7684\u540e\u7aef\u9009\u9879\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605 anyio \u6587\u6863\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c<code>asyncio</code> \u88ab\u4f7f\u7528\uff0c\u5e76\u4e14\u4f7f\u7528\u9ed8\u8ba4\u9009\u9879\u3002</p> <p>\u8981\u4f7f\u7528 <code>Trio</code> \u540e\u7aef\uff0c\u4f20\u9012 <code>backend=\"trio\"</code>\u3002\u4f8b\u5982\uff1a</p> <pre><code>def test_app():\n    with TestClient(app, backend=\"trio\") as client:\n       ...\n</code></pre> <p>\u8981\u4f7f\u7528 <code>asyncio</code> \u548c <code>uvloop</code>\uff0c\u4f20\u9012 <code>backend_options={\"use_uvloop\": True}</code>\u3002\u4f8b\u5982\uff1a</p> <pre><code>def test_app():\n    with TestClient(app, backend_options={\"use_uvloop\": True}) as client:\n       ...\n</code></pre>"},{"location":"testclient/#websocket","title":"\u6d4b\u8bd5 WebSocket \u4f1a\u8bdd","text":"<p>\u60a8\u8fd8\u53ef\u4ee5\u4f7f\u7528\u6d4b\u8bd5\u5ba2\u6237\u7aef\u6d4b\u8bd5 WebSocket \u4f1a\u8bdd\u3002</p> <p><code>httpx</code> \u5e93\u5c06\u7528\u4e8e\u6784\u5efa\u521d\u59cb\u63e1\u624b\uff0c\u8fd9\u610f\u5473\u7740\u60a8\u53ef\u4ee5\u5728 http \u548c WebSocket \u6d4b\u8bd5\u4e4b\u95f4\u4f7f\u7528\u76f8\u540c\u7684\u8eab\u4efd\u9a8c\u8bc1\u9009\u9879\u548c\u5176\u4ed6\u5934\u90e8\u3002</p> <pre><code>from starlette.testclient import TestClient\nfrom starlette.websockets import WebSocket\n\n\nasync def app(scope, receive, send):\n    assert scope['type'] == 'websocket'\n    websocket = WebSocket(scope, receive=receive, send=send)\n    await websocket.accept()\n    await websocket.send_text('Hello, world!')\n    await websocket.close()\n\n\ndef test_app():\n    client = TestClient(app)\n    with client.websocket_connect('/') as websocket:\n        data = websocket.receive_text()\n        assert data == 'Hello, world!'\n</code></pre> <p>\u4f1a\u8bdd\u4e0a\u7684\u64cd\u4f5c\u662f\u6807\u51c6\u7684\u51fd\u6570\u8c03\u7528\uff0c\u800c\u4e0d\u662f\u53ef\u7b49\u5f85\u5bf9\u8c61\u3002</p> <p>\u4f7f\u7528 <code>with</code> \u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u5757\u5185\u7684\u4f1a\u8bdd\u975e\u5e38\u91cd\u8981\u3002\u8fd9\u786e\u4fdd\u4e86 ASGI \u5e94\u7528\u7a0b\u5e8f\u6240\u5728\u7684\u540e\u53f0\u7ebf\u7a0b\u88ab\u6b63\u786e\u7ec8\u6b62\uff0c\u5e76\u4e14\u5e94\u7528\u7a0b\u5e8f\u4e2d\u53d1\u751f\u7684\u4efb\u4f55\u5f02\u5e38\u90fd\u59cb\u7ec8\u7531\u6d4b\u8bd5\u5ba2\u6237\u7aef\u5f15\u53d1\u3002</p>"},{"location":"testclient/#_2","title":"\u5efa\u7acb\u6d4b\u8bd5\u4f1a\u8bdd","text":"<ul> <li><code>.websocket_connect(url, subprotocols=None, **options)</code> - \u63a5\u53d7\u4e0e <code>httpx.get()</code> \u76f8\u540c\u7684\u53c2\u6570\u96c6\u3002</li> </ul> <p>\u5982\u679c\u5e94\u7528\u7a0b\u5e8f\u6ca1\u6709\u63a5\u53d7 WebSocket \u8fde\u63a5\uff0c\u5219\u53ef\u80fd\u5f15\u53d1 <code>starlette.websockets.WebSocketDisconnect</code> \u5f02\u5e38\u3002</p> <p><code>websocket_connect()</code> \u5fc5\u987b\u4f5c\u4e3a\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u4f7f\u7528\uff08\u5728 <code>with</code> \u5757\u4e2d\uff09\u3002</p> <p>\u6ce8\u610f</p> <p><code>websocket_connect</code> \u4e0d\u652f\u6301 <code>params</code> \u53c2\u6570\u3002\u5982\u679c\u60a8\u9700\u8981\u4f20\u9012\u67e5\u8be2\u53c2\u6570\uff0c\u8bf7\u76f4\u63a5\u5c06\u5176\u786c\u7f16\u7801\u5230 URL \u4e2d\u3002</p> <pre><code>with client.websocket_connect('/path?foo=bar') as websocket:\n    ...\n</code></pre>"},{"location":"testclient/#_3","title":"\u53d1\u9001\u6570\u636e","text":"<ul> <li><code>.send_text(data)</code> - \u5411\u5e94\u7528\u7a0b\u5e8f\u53d1\u9001\u7ed9\u5b9a\u7684\u6587\u672c\u3002</li> <li><code>.send_bytes(data)</code> - \u5411\u5e94\u7528\u7a0b\u5e8f\u53d1\u9001\u7ed9\u5b9a\u7684\u5b57\u8282\u6570\u636e\u3002</li> <li><code>.send_json(data, mode=\"text\")</code> - \u5411\u5e94\u7528\u7a0b\u5e8f\u53d1\u9001\u7ed9\u5b9a\u7684\u6570\u636e\u3002\u4f7f\u7528 <code>mode=\"binary\"</code> \u4ee5\u4e8c\u8fdb\u5236\u6570\u636e\u5e27\u53d1\u9001 JSON \u6570\u636e\u3002</li> </ul>"},{"location":"testclient/#_4","title":"\u63a5\u6536\u6570\u636e","text":"<ul> <li><code>.receive_text()</code> - \u7b49\u5f85\u5e94\u7528\u7a0b\u5e8f\u53d1\u9001\u7684\u6587\u672c\uff0c\u5e76\u8fd4\u56de\u5b83\u3002</li> <li><code>.receive_bytes()</code> - \u7b49\u5f85\u5e94\u7528\u7a0b\u5e8f\u53d1\u9001\u7684\u5b57\u8282\u4e32\uff0c\u5e76\u8fd4\u56de\u5b83\u3002</li> <li><code>.receive_json(mode=\"text\")</code> - \u7b49\u5f85\u5e94\u7528\u7a0b\u5e8f\u53d1\u9001\u7684 JSON \u6570\u636e\uff0c\u5e76\u8fd4\u56de\u5b83\u3002\u4f7f\u7528 <code>mode=\"binary\"</code> \u4ee5\u4e8c\u8fdb\u5236\u6570\u636e\u5e27\u63a5\u6536 JSON \u6570\u636e\u3002</li> </ul> <p>\u53ef\u80fd\u4f1a\u5f15\u53d1 <code>starlette.websockets.WebSocketDisconnect</code> \u5f02\u5e38\u3002</p>"},{"location":"testclient/#_5","title":"\u5173\u95ed\u8fde\u63a5","text":"<ul> <li><code>.close(code=1000)</code> - \u6267\u884c\u5ba2\u6237\u7aef\u5173\u95ed WebSocket \u8fde\u63a5\u3002</li> </ul>"},{"location":"testclient/#_6","title":"\u5f02\u6b65\u6d4b\u8bd5","text":"<p>\u6709\u65f6\uff0c\u60a8\u53ef\u80fd\u9700\u8981\u5728\u5e94\u7528\u7a0b\u5e8f\u5916\u6267\u884c\u5f02\u6b65\u64cd\u4f5c\u3002\u4f8b\u5982\uff0c\u60a8\u53ef\u80fd\u5e0c\u671b\u5728\u4f7f\u7528\u73b0\u6709\u7684\u5f02\u6b65\u6570\u636e\u5e93\u5ba2\u6237\u7aef/\u57fa\u7840\u8bbe\u65bd\u8c03\u7528\u5e94\u7528\u7a0b\u5e8f\u540e\u68c0\u67e5\u6570\u636e\u5e93\u7684\u72b6\u6001\u3002</p> <p>\u5bf9\u4e8e\u8fd9\u4e9b\u60c5\u51b5\uff0c\u4f7f\u7528 <code>TestClient</code> \u53ef\u80fd\u4f1a\u5f88\u56f0\u96be\uff0c\u56e0\u4e3a\u5b83\u521b\u5efa\u4e86\u81ea\u5df1\u7684\u4e8b\u4ef6\u5faa\u73af\uff0c\u800c\u5f02\u6b65\u8d44\u6e90\uff08\u5982\u6570\u636e\u5e93\u8fde\u63a5\uff09\u901a\u5e38\u65e0\u6cd5\u8de8\u4e8b\u4ef6\u5faa\u73af\u5171\u4eab\u3002 \u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u7684\u6700\u7b80\u5355\u65b9\u6cd5\u662f\u4f7f\u6574\u4e2a\u6d4b\u8bd5\u5f02\u6b65\uff0c\u5e76\u4f7f\u7528\u5f02\u6b65\u5ba2\u6237\u7aef\uff0c\u5982 httpx.AsyncClient\u3002</p> <p>\u4ee5\u4e0b\u662f\u4e00\u4e2a\u6b64\u7c7b\u6d4b\u8bd5\u7684\u793a\u4f8b\uff1a</p> <pre><code>from httpx import AsyncClient\nfrom starlette.applications import Starlette\nfrom starlette.routing import Route\nfrom starlette.requests import Request\nfrom starlette.responses import PlainTextResponse\n\n\ndef hello(request: Request) -&gt; PlainTextResponse:\n    return PlainTextResponse(\"Hello World!\")\n\n\napp = Starlette(routes=[Route(\"/\", hello)])\n\n\n# \u5982\u679c\u4f7f\u7528 pytest\uff0c\u60a8\u9700\u8981\u6dfb\u52a0\u4e00\u4e2a\u5f02\u6b65\u6807\u8bb0\uff0c\u4f8b\u5982\uff1a\n# @pytest.mark.anyio  # \u4f7f\u7528 https://github.com/agronholm/anyio\n# \u6216\u5b89\u88c5\u5e76\u914d\u7f6e pytest-asyncio (https://github.com/pytest-dev/pytest-asyncio)\nasync def test_app() -&gt; None:\n    # \u6ce8\u610f\uff1a\u60a8\u5fc5\u987b\u4e3a\u76f8\u5bf9 URL\uff08\u5982 \"/\"\uff09\u8bbe\u7f6e `base_url` \u624d\u80fd\u6b63\u5e38\u5de5\u4f5c\n    async with AsyncClient(app=app, base_url=\"http://testserver\") as client:\n        r = await client.get(\"/\")\n        assert r.status_code == 200\n        assert r.text == \"Hello World!\"\n</code></pre>"},{"location":"third-party-packages/","title":"\u7b2c\u4e09\u65b9\u5305","text":"<p>Starlette \u62e5\u6709\u4e00\u4e2a\u5feb\u901f\u589e\u957f\u7684\u5f00\u53d1\u8005\u793e\u533a\uff0c\u4ed6\u4eec\u6b63\u5728\u6784\u5efa\u4e0e Starlette \u96c6\u6210\u7684\u5de5\u5177\u3001\u4f9d\u8d56\u4e8e Starlette \u7684\u5de5\u5177\u7b49\u3002</p> <p>\u4ee5\u4e0b\u662f\u4e00\u4e9b\u7b2c\u4e09\u65b9\u63d2\u4ef6\uff1a</p>"},{"location":"third-party-packages/#_1","title":"\u63d2\u4ef6","text":""},{"location":"third-party-packages/#apitally","title":"Apitally","text":"<p>GitHub |  \u6587\u6863</p> <p>\u4e3a Starlette\uff08\u4ee5\u53ca\u5176\u4ed6\u6846\u67b6\uff09\u63d0\u4f9b\u7b80\u5355\u7684\u6d41\u91cf\u3001\u9519\u8bef\u548c\u54cd\u5e94\u65f6\u95f4\u76d1\u63a7\uff0c\u5916\u52a0 API \u5bc6\u94a5\u548c\u6743\u9650\u7ba1\u7406\u3002</p>"},{"location":"third-party-packages/#authlib","title":"Authlib","text":"<p>GitHub |  \u6587\u6863</p> <p>\u4e00\u4e2a\u6784\u5efa OAuth \u548c OpenID Connect \u5ba2\u6237\u7aef\u4e0e\u670d\u52a1\u5668\u7684\u7ec8\u6781 Python \u5e93\u3002\u67e5\u770b\u5982\u4f55\u4e0e Starlette \u96c6\u6210\u3002</p>"},{"location":"third-party-packages/#channelbox","title":"ChannelBox","text":"<p>GitHub</p> <p>\u4e00\u4e2a websocket \u5e7f\u64ad\u89e3\u51b3\u65b9\u6848\u3002\u53ef\u4ee5\u4ece\u4ee3\u7801\u4e2d\u7684\u4efb\u4f55\u90e8\u5206\u5411\u901a\u9053\u7ec4\u53d1\u9001\u6d88\u606f\u3002 \u67e5\u770b MySimpleChat\uff0c\u8fd9\u662f\u4e00\u4e2a\u4f7f\u7528 <code>channel-box</code> \u548c <code>starlette</code> \u6784\u5efa\u7684\u7b80\u5355\u804a\u5929\u5e94\u7528\u3002</p>"},{"location":"third-party-packages/#imia","title":"Imia","text":"<p>GitHub</p> <p>\u4e3a Starlette \u63d0\u4f9b\u7684\u8ba4\u8bc1\u6846\u67b6\uff0c\u652f\u6301\u53ef\u63d2\u62d4\u7684\u8ba4\u8bc1\u5668\u548c\u767b\u5f55/\u767b\u51fa\u6d41\u7a0b\u3002</p>"},{"location":"third-party-packages/#mangum","title":"Mangum","text":"<p>GitHub</p> <p>\u7528\u4e8e AWS Lambda \u548c API Gateway \u7684\u65e0\u670d\u52a1\u5668 ASGI \u9002\u914d\u5668\u3002</p>"},{"location":"third-party-packages/#nejma","title":"Nejma","text":"<p>GitHub</p> <p>\u4f7f\u7528 websockets \u7ba1\u7406\u548c\u53d1\u9001\u6d88\u606f\u5230\u901a\u9053\u7ec4\u3002 \u67e5\u770b nejma-chat\uff0c\u8fd9\u662f\u4e00\u4e2a\u4f7f\u7528 <code>nejma</code> \u548c <code>starlette</code> \u6784\u5efa\u7684\u7b80\u5355\u804a\u5929\u5e94\u7528\u3002</p>"},{"location":"third-party-packages/#scout-apm","title":"Scout APM","text":"<p>GitHub</p> <p>\u4e00\u4e2a APM\uff08\u5e94\u7528\u6027\u80fd\u76d1\u63a7\uff09\u89e3\u51b3\u65b9\u6848\uff0c\u53ef\u4ee5\u5bf9\u60a8\u7684\u5e94\u7528\u8fdb\u884c\u68c0\u6d4b\u4ee5\u53d1\u73b0\u6027\u80fd\u74f6\u9888\u3002</p>"},{"location":"third-party-packages/#spectree","title":"SpecTree","text":"<p>GitHub</p> <p>\u4f7f\u7528 Python \u6ce8\u89e3\u751f\u6210 OpenAPI \u89c4\u8303\u6587\u6863\u5e76\u9a8c\u8bc1\u8bf7\u6c42\u548c\u54cd\u5e94\u3002\u51cf\u5c11\u6837\u677f\u4ee3\u7801\uff08\u65e0\u9700 YAML\uff09\u3002</p>"},{"location":"third-party-packages/#starlette-apispec","title":"Starlette APISpec","text":"<p>GitHub</p> <p>\u4e3a Starlette \u63d0\u4f9b\u7b80\u5355\u7684 APISpec \u96c6\u6210\u3002 \u901a\u8fc7\u5728\u7aef\u70b9\u7684\u6587\u6863\u5b57\u7b26\u4e32\u4e2d\u4ee5 YAML \u683c\u5f0f\u58f0\u660e OpenAPI (Swagger) \u6a21\u5f0f\uff0c\u4e3a\u4f7f\u7528 Starlette \u6784\u5efa\u7684 REST API \u6dfb\u52a0\u6587\u6863\u652f\u6301\u3002</p>"},{"location":"third-party-packages/#starlette-compress","title":"Starlette Compress","text":"<p>GitHub</p> <p>Starlette-Compress \u662f\u4e00\u4e2a\u5feb\u901f\u7b80\u5355\u7684\u4e2d\u95f4\u4ef6\uff0c\u7528\u4e8e\u538b\u7f29 Starlette \u7684\u54cd\u5e94\u3002 \u5b83\u652f\u6301 ZStd\u3001Brotli \u548c GZip \u538b\u7f29\u7b97\u6cd5\uff0c\u5e76\u63d0\u4f9b\u5408\u7406\u7684\u9ed8\u8ba4\u914d\u7f6e\u3002</p>"},{"location":"third-party-packages/#starlette-context","title":"Starlette Context","text":"<p>GitHub</p> <p>\u7528\u4e8e Starlette \u7684\u4e2d\u95f4\u4ef6\uff0c\u5141\u8bb8\u60a8\u5b58\u50a8\u548c\u8bbf\u95ee\u8bf7\u6c42\u7684\u4e0a\u4e0b\u6587\u6570\u636e\u3002 \u53ef\u4e0e\u65e5\u5fd7\u8bb0\u5f55\u7ed3\u5408\u4f7f\u7528\uff0c\u4ee5\u4fbf\u65e5\u5fd7\u80fd\u591f\u81ea\u52a8\u5305\u542b\u8bf7\u6c42\u5934\u4e2d\u7684\u4fe1\u606f\uff0c\u5982 <code>x-request-id</code> \u6216 <code>x-correlation-id</code>\u3002</p>"},{"location":"third-party-packages/#starlette-cramjam","title":"Starlette Cramjam","text":"<p>GitHub</p> <p>\u4e3a Starlette \u63d0\u4f9b\u7684\u4e2d\u95f4\u4ef6\uff0c\u652f\u6301 brotli\u3001gzip \u548c deflate \u538b\u7f29\u7b97\u6cd5\uff0c\u4e14\u5bf9\u4f9d\u8d56\u8981\u6c42\u6700\u4f4e\u3002</p>"},{"location":"third-party-packages/#starlette-oauth2-api","title":"Starlette OAuth2 API","text":"<p>GitLab</p> <p>\u4e00\u4e2a Starlette \u4e2d\u95f4\u4ef6\uff0c\u901a\u8fc7 JWT \u6dfb\u52a0\u8eab\u4efd\u9a8c\u8bc1\u548c\u6388\u6743\u529f\u80fd\u3002 \u5b8c\u5168\u4f9d\u8d56\u4e8e\u8ba4\u8bc1\u63d0\u4f9b\u8005\u4e3a\u5ba2\u6237\u7aef\u9881\u53d1\u8bbf\u95ee\u4ee4\u724c\u6216\u8eab\u4efd\u4ee4\u724c\u3002</p>"},{"location":"third-party-packages/#starlette-prometheus","title":"Starlette Prometheus","text":"<p>GitHub</p> <p>\u4e00\u4e2a\u63d2\u4ef6\uff0c\u7528\u4e8e\u63d0\u4f9b\u66b4\u9732 Prometheus \u6307\u6807\u7684\u7aef\u70b9\uff0c\u57fa\u4e8e\u5176\u5b98\u65b9 Python \u5ba2\u6237\u7aef\u3002</p>"},{"location":"third-party-packages/#starlette-wtf","title":"Starlette WTF","text":"<p>GitHub</p> <p>\u4e00\u4e2a\u7528\u4e8e\u5c06 Starlette \u548c WTForms \u96c6\u6210\u7684\u7b80\u5355\u5de5\u5177\uff0c\u5176\u8bbe\u8ba1\u7406\u5ff5\u53c2\u8003\u4e86\u4f18\u79c0\u7684 Flask-WTF \u5e93\u3002</p>"},{"location":"third-party-packages/#starlette-login","title":"Starlette-Login","text":"<p>GitHub |  \u6587\u6863</p> <p>\u4e3a Starlette \u63d0\u4f9b\u7528\u6237\u4f1a\u8bdd\u7ba1\u7406\u529f\u80fd\u3002 \u5904\u7406\u5e38\u89c1\u4efb\u52a1\uff0c\u4f8b\u5982\u7528\u6237\u767b\u5f55\u3001\u767b\u51fa\uff0c\u4ee5\u53ca\u957f\u65f6\u95f4\u4fdd\u6301\u7528\u6237\u4f1a\u8bdd\u72b6\u6001\u3002</p>"},{"location":"third-party-packages/#starsessions","title":"Starsessions","text":"<p>GitHub</p> <p>\u4e00\u4e2a\u66ff\u4ee3\u7684\u4f1a\u8bdd\u652f\u6301\u5b9e\u73b0\uff0c\u5177\u6709\u53ef\u81ea\u5b9a\u4e49\u7684\u5b58\u50a8\u540e\u7aef\u3002</p>"},{"location":"third-party-packages/#webargs-starlette","title":"webargs-starlette","text":"<p>GitHub</p> <p>\u57fa\u4e8e webargs \u6784\u5efa\u7684 Starlette \u58f0\u660e\u5f0f\u8bf7\u6c42\u89e3\u6790\u4e0e\u9a8c\u8bc1\u5de5\u5177\u3002 \u652f\u6301\u4f7f\u7528\u7c7b\u578b\u6ce8\u89e3\u89e3\u6790\u67e5\u8be2\u5b57\u7b26\u4e32\u3001JSON\u3001\u8868\u5355\u3001\u5934\u4fe1\u606f\u548c Cookie\u3002</p>"},{"location":"third-party-packages/#decorouter","title":"DecoRouter","text":"<p>GitHub</p> <p>\u4e3a Starlette \u63d0\u4f9b FastAPI \u98ce\u683c\u7684\u8def\u7531\u529f\u80fd\u3002 \u652f\u6301\u4f7f\u7528\u88c5\u9970\u5668\u751f\u6210\u8def\u7531\u8868\u3002</p>"},{"location":"third-party-packages/#starception","title":"Starception","text":"<p>GitHub</p> <p>\u4e3a Starlette \u5e94\u7528\u63d0\u4f9b\u7f8e\u89c2\u7684\u5f02\u5e38\u9875\u9762\u3002</p>"},{"location":"third-party-packages/#starlette-admin","title":"Starlette-Admin","text":"<p>GitHub |  \u6587\u6863</p> <p>\u4e00\u4e2a\u7b80\u5355\u4e14\u53ef\u6269\u5c55\u7684\u7ba1\u7406\u754c\u9762\u6846\u67b6\u3002 \u57fa\u4e8e Tabler \u548c Datatables \u6784\u5efa\uff0c\u80fd\u591f\u5feb\u901f\u4e3a\u60a8\u7684\u6a21\u578b\u751f\u6210\u5b8c\u5168\u53ef\u5b9a\u5236\u7684\u7ba1\u7406\u754c\u9762\u3002 \u652f\u6301\u5c06\u6570\u636e\u5bfc\u51fa\u4e3a\u591a\u79cd\u683c\u5f0f\uff08CSV\u3001PDF\u3001Excel \u7b49\uff09\uff0c\u901a\u8fc7\u590d\u6742\u67e5\u8be2\uff08\u5305\u62ec <code>AND</code> \u548c <code>OR</code> \u6761\u4ef6\uff09\u7b5b\u9009\u6570\u636e\uff0c\u4ee5\u53ca\u4e0a\u4f20\u6587\u4ef6\u7b49\u529f\u80fd\u3002</p>"},{"location":"third-party-packages/#vellox","title":"Vellox","text":"<p>GitHub</p> <p>\u9002\u7528\u4e8e GCP Cloud Functions \u7684\u65e0\u670d\u52a1\u5668 ASGI \u9002\u914d\u5668\u3002</p>"},{"location":"third-party-packages/#starlette-bridge","title":"Starlette Bridge","text":"<p>GitHub |  \u6587\u6863</p> <p>\u968f\u7740 <code>on_startup</code> \u548c <code>on_shutdown</code> \u7684\u5f03\u7528\uff0cStarlette Bridge \u786e\u4fdd\u60a8\u4ecd\u7136\u53ef\u4ee5\u4f7f\u7528\u65e7\u7684\u4e8b\u4ef6\u58f0\u660e\u65b9\u5f0f\uff0c\u540c\u65f6\u5728\u5185\u90e8\u4e3a\u60a8\u81ea\u52a8\u521b\u5efa <code>lifespan</code>\u3002 \u8fd9\u6837\u53ef\u4ee5\u4e3a\u73b0\u6709\u7684\u5305\u63d0\u4f9b\u5411\u540e\u517c\u5bb9\u6027\uff0c\u540c\u65f6\u4fdd\u6301 Starlette \u65b0 <code>lifespan</code> \u4e8b\u4ef6\u7684\u5b8c\u6574\u6027\u3002</p>"},{"location":"third-party-packages/#_2","title":"\u6846\u67b6","text":""},{"location":"third-party-packages/#fastapi","title":"FastAPI","text":"<p>GitHub |  \u6587\u6863</p> <p>\u9ad8\u6027\u80fd\u3001\u6613\u4e8e\u5b66\u4e60\u3001\u5feb\u901f\u5f00\u53d1\u3001\u9002\u5408\u751f\u4ea7\u73af\u5883\u7684 Web API \u6846\u67b6\u3002 \u53d7 APIStar \u65e9\u671f\u670d\u52a1\u5668\u7cfb\u7edf\u7684\u542f\u53d1\uff0c\u652f\u6301\u8def\u7531\u53c2\u6570\u7684\u7c7b\u578b\u58f0\u660e\uff0c\u57fa\u4e8e OpenAPI 3.0.0+ \u89c4\u8303\uff08\u7ed3\u5408 JSON Schema\uff09\uff0c\u5e76\u7531 Pydantic \u63d0\u4f9b\u6570\u636e\u5904\u7406\u652f\u6301\u3002</p>"},{"location":"third-party-packages/#flama","title":"Flama","text":"<p>GitHub |  \u6587\u6863</p> <p>Flama \u662f\u4e00\u4e2a\u9762\u5411\u6570\u636e\u79d1\u5b66\u7684\u6846\u67b6\uff0c\u65e8\u5728\u5feb\u901f\u6784\u5efa\u73b0\u4ee3\u5316\u548c\u53ef\u9760\u7684\u673a\u5668\u5b66\u4e60\uff08ML\uff09API\u3002 \u8be5\u6846\u67b6\u7684\u4e3b\u8981\u76ee\u6807\u662f\u4f7f\u90e8\u7f72 ML API \u53d8\u5f97\u6781\u4e3a\u7b80\u5355\u3002\u901a\u8fc7 Flama\uff0c\u6570\u636e\u79d1\u5b66\u5bb6\u53ef\u4ee5\u7528\u4e00\u884c\u4ee3\u7801\u5c06 ML \u6a21\u578b\u5feb\u901f\u8f6c\u5316\u4e3a\u5f02\u6b65\u3001\u81ea\u52a8\u751f\u6210\u6587\u6863\u7684 API\uff0c\u4ec5\u9700\u51e0\u79d2\u949f\uff01</p> <p>Flama \u63d0\u4f9b\u76f4\u89c2\u7684 CLI \u548c\u6613\u5b66\u7684\u5f00\u53d1\u7406\u5ff5\uff0c\u80fd\u591f\u5feb\u901f\u6784\u5efa\u9ad8\u6027\u80fd\u7684 GraphQL\u3001REST \u548c ML API\u3002\u5b83\u662f\u5f00\u53d1\u5f02\u6b65\u3001\u751f\u4ea7\u7ea7\u670d\u52a1\u7684\u7406\u60f3\u89e3\u51b3\u65b9\u6848\uff0c\u5e76\u652f\u6301 ML \u6a21\u578b\u7684\u81ea\u52a8\u90e8\u7f72\u3002</p>"},{"location":"third-party-packages/#greppo","title":"Greppo","text":"<p>GitHub |  \u6587\u6863</p> <p>\u4e00\u4e2a\u7528\u4e8e\u6784\u5efa\u5730\u7406\u7a7a\u95f4\u4eea\u8868\u677f\u548c Web \u5e94\u7528\u7684 Python \u6846\u67b6\u3002 Greppo \u662f\u5f00\u6e90\u7684 Python \u6846\u67b6\uff0c\u80fd\u591f\u5feb\u901f\u96c6\u6210\u6570\u636e\u3001\u7b97\u6cd5\u3001\u53ef\u89c6\u5316\u548c\u4ea4\u4e92\u5f0f UI\u3002\u5b83\u63d0\u4f9b API \u66f4\u65b0\u540e\u7aef\u53d8\u91cf\u3001\u91cd\u65b0\u8ba1\u7b97\u903b\u8f91\uff0c\u5e76\u5c06\u66f4\u6539\u53cd\u6620\u5230\u524d\u7aef\uff08\u6570\u636e\u53d8\u66f4\u94a9\u5b50\uff09\u3002</p>"},{"location":"third-party-packages/#responder","title":"Responder","text":"<p>GitHub |  \u6587\u6863</p> <p>\u5f02\u6b65 Web \u670d\u52a1\u6846\u67b6\u3002\u529f\u80fd\u5305\u62ec Flask \u98ce\u683c\u8def\u7531\u8868\u8fbe\u3001YAML \u652f\u6301\u3001OpenAPI \u67b6\u6784\u751f\u6210\u3001\u540e\u53f0\u4efb\u52a1\u3001GraphQL \u7b49\u3002</p>"},{"location":"third-party-packages/#starlette-apps","title":"Starlette-apps","text":"<p>GitHub</p> <p>\u4f7f\u7528\u7b80\u5355\u7684\u5e94\u7528\u7cfb\u7edf\u6784\u5efa\u5c5e\u4e8e\u81ea\u5df1\u7684\u6846\u67b6\uff0c\u4f8b\u5982 Django-GDAPS \u6216 CakePHP\u3002</p>"},{"location":"third-party-packages/#dark-star","title":"Dark Star","text":"<p>\u6587\u6863 |  GitHub</p> <p>\u4e00\u4e2a\u7b80\u5355\u7684\u6846\u67b6\uff0c\u65e8\u5728\u6700\u5c0f\u5316\u83b7\u53d6 HTML \u5230\u6d4f\u89c8\u5668\u6240\u9700\u7684\u4ee3\u7801\u3002 \u5c06\u6587\u4ef6\u8def\u5f84\u8f6c\u6362\u4e3a Starlette \u8def\u7531\uff0c\u5e76\u5c06\u89c6\u56fe\u4ee3\u7801\u4e0e\u6a21\u677f\u653e\u5728\u4e00\u8d77\u3002\u652f\u6301 htmx \u6765\u589e\u5f3a\u524d\u7aef\u3002</p>"},{"location":"third-party-packages/#xpresso","title":"Xpresso","text":"<p>GitHub |  \u6587\u6863</p> <p>\u57fa\u4e8e Starlette\u3001Pydantic \u548c di \u6784\u5efa\u7684\u7075\u6d3b\u4e14\u53ef\u6269\u5c55\u7684 Web \u6846\u67b6\u3002</p>"},{"location":"third-party-packages/#ellar","title":"Ellar","text":"<p>GitHub |  \u6587\u6863</p> <p>Ellar \u662f\u4e00\u4e2a\u7528\u4e8e\u6784\u5efa\u5feb\u901f\u3001\u9ad8\u6548\u3001\u53ef\u6269\u5c55\u7684 RESTAPI \u548c\u670d\u52a1\u5668\u7aef\u5e94\u7528\u7684 ASGI Web \u6846\u67b6\u3002 \u63d0\u4f9b\u9ad8\u62bd\u8c61\u7ea7\u522b\u7684\u670d\u52a1\u5668\u7aef\u5f00\u53d1\uff0c\u7ed3\u5408\u4e86\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\uff08OOP\uff09\u548c\u51fd\u6570\u5f0f\u7f16\u7a0b\uff08FP\uff09\u7684\u5143\u7d20\uff0c\u53d7 Nestjs \u542f\u53d1\u3002 \u57fa\u4e8e Starlette\u3001Pydantic \u548c Injector \u4e09\u4e2a\u6838\u5fc3\u5e93\u6784\u5efa\u3002</p>"},{"location":"third-party-packages/#apiman","title":"Apiman","text":"<p>\u4e00\u4e2a\u6269\u5c55\u5de5\u5177\uff0c\u4fbf\u4e8e\u5728 Starlette \u9879\u76ee\u4e2d\u8f7b\u677e\u96c6\u6210 Swagger/OpenAPI \u6587\u6863\uff0c\u5e76\u63d0\u4f9b SwaggerUI \u548c RedocUI\u3002</p> <p>GitHub</p>"},{"location":"third-party-packages/#starlette-babel","title":"Starlette-Babel","text":"<p>\u901a\u8fc7 Babel \u96c6\u6210\uff0c\u63d0\u4f9b\u7ffb\u8bd1\u3001\u672c\u5730\u5316\u548c\u65f6\u533a\u652f\u6301\u3002</p> <p>GitHub</p>"},{"location":"third-party-packages/#starlette-staticresources","title":"Starlette-StaticResources","text":"<p>GitHub</p> <p>\u652f\u6301\u4e3a\u9759\u6001\u6570\u636e\u6302\u8f7d package resources\uff0c\u7c7b\u4f3c\u4e8e StaticFiles\u3002</p>"},{"location":"third-party-packages/#sentry","title":"Sentry","text":"<p>GitHub |  \u6587\u6863</p> <p>Sentry \u662f\u4e00\u4e2a\u8f6f\u4ef6\u9519\u8bef\u68c0\u6d4b\u5de5\u5177\uff0c\u53ef\u63d0\u4f9b\u89e3\u51b3\u6027\u80fd\u95ee\u9898\u548c\u9519\u8bef\u7684\u53ef\u64cd\u4f5c\u6d1e\u5bdf\u3002 \u5b83\u5e2e\u52a9\u7528\u6237\u8bca\u65ad\u3001\u4fee\u590d\u5e76\u4f18\u5316 Python \u8c03\u8bd5\uff0c\u5e76\u4e0e Starlette \u65e0\u7f1d\u96c6\u6210\u3002Sentry \u7684\u529f\u80fd\u5305\u62ec\u9519\u8bef\u8ddf\u8e2a\u3001\u6027\u80fd\u5206\u6790\u3001\u4e0a\u4e0b\u6587\u4fe1\u606f\u4ee5\u53ca\u8b66\u62a5/\u901a\u77e5\u3002</p>"},{"location":"third-party-packages/#shiny","title":"Shiny","text":"<p>GitHub |  \u6587\u6863</p> <p>\u57fa\u4e8e Starlette \u548c asyncio\uff0cShiny \u901a\u8fc7\u53cd\u5e94\u5f0f\u7f16\u7a0b\u8ba9\u5f00\u53d1\u8005\u80fd\u591f\u8f7b\u677e\u521b\u5efa Python Web \u5e94\u7528\u3002 Shiny \u6d88\u9664\u4e86\u624b\u52a8\u72b6\u6001\u7ba1\u7406\u7684\u7e41\u7410\u5de5\u4f5c\uff0c\u80fd\u591f\u5728\u8fd0\u884c\u65f6\u81ea\u52a8\u786e\u5b9a\u5e94\u7528\u7684\u6700\u4f73\u6267\u884c\u8def\u5f84\uff0c\u540c\u65f6\u6700\u5c0f\u5316\u91cd\u65b0\u6e32\u67d3\u3002\u8fd9\u610f\u5473\u7740 Shiny \u65e2\u9002\u7528\u4e8e\u7b80\u5355\u4eea\u8868\u677f\uff0c\u4e5f\u652f\u6301\u5168\u529f\u80fd\u7684 Web \u5e94\u7528\u3002 </p>"},{"location":"websockets/","title":"WebSockets","text":"<p>Starlette \u63d0\u4f9b\u4e86\u4e00\u4e2a <code>WebSocket</code> \u7c7b\uff0c\u5176\u529f\u80fd\u7c7b\u4f3c\u4e8e HTTP \u8bf7\u6c42\uff0c\u4f46\u5141\u8bb8\u901a\u8fc7 WebSocket \u8fdb\u884c\u6570\u636e\u7684\u53d1\u9001\u548c\u63a5\u6536\u3002</p>"},{"location":"websockets/#websocket","title":"WebSocket","text":"<p>\u7b7e\u540d\uff1a<code>WebSocket(scope, receive=None, send=None)</code></p> <pre><code>from starlette.websockets import WebSocket\n\n\nasync def app(scope, receive, send):\n    websocket = WebSocket(scope=scope, receive=receive, send=send)\n    await websocket.accept()\n    await websocket.send_text('Hello, world!')\n    await websocket.close()\n</code></pre> <p>WebSocket \u63d0\u4f9b\u4e86\u4e00\u4e2a\u6620\u5c04\u63a5\u53e3\uff0c\u56e0\u6b64\u53ef\u4ee5\u50cf\u4f7f\u7528 <code>scope</code> \u4e00\u6837\u4f7f\u7528\u5b83\u3002</p> <p>\u4f8b\u5982\uff1a<code>websocket['path']</code> \u5c06\u8fd4\u56de ASGI \u8def\u5f84\u3002</p>"},{"location":"websockets/#url","title":"URL","text":"<p>WebSocket \u7684 URL \u53ef\u4ee5\u901a\u8fc7 <code>websocket.url</code> \u8bbf\u95ee\u3002</p> <p>\u8be5\u5c5e\u6027\u5b9e\u9645\u4e0a\u662f <code>str</code> \u7684\u5b50\u7c7b\uff0c\u5e76\u4e14\u8fd8\u63d0\u4f9b\u4e86\u53ef\u4ee5\u4ece URL \u4e2d\u89e3\u6790\u51fa\u7684\u6240\u6709\u7ec4\u4ef6\u3002</p> <p>\u4f8b\u5982\uff1a<code>websocket.url.path</code>\u3001<code>websocket.url.port</code>\u3001<code>websocket.url.scheme</code>\u3002</p>"},{"location":"websockets/#headers","title":"Headers","text":"<p>\u8bf7\u6c42\u5934\u4ee5\u4e0d\u53ef\u53d8\u7684\u5927\u5c0f\u5199\u4e0d\u654f\u611f\u591a\u91cd\u5b57\u5178\u5f62\u5f0f\u66b4\u9732\u3002</p> <p>\u4f8b\u5982\uff1a<code>websocket.headers['sec-websocket-version']</code></p>"},{"location":"websockets/#query-parameters","title":"\u67e5\u8be2\u53c2\u6570\uff08Query Parameters\uff09","text":"<p>\u67e5\u8be2\u53c2\u6570\u4ee5\u4e0d\u53ef\u53d8\u7684\u591a\u91cd\u5b57\u5178\u5f62\u5f0f\u66b4\u9732\u3002</p> <p>\u4f8b\u5982\uff1a<code>websocket.query_params['search']</code></p>"},{"location":"websockets/#path-parameters","title":"\u8def\u5f84\u53c2\u6570\uff08Path Parameters\uff09","text":"<p>\u8def\u7531\u5668\u8def\u5f84\u53c2\u6570\u4ee5\u5b57\u5178\u63a5\u53e3\u7684\u5f62\u5f0f\u66b4\u9732\u3002</p> <p>\u4f8b\u5982\uff1a<code>websocket.path_params['username']</code></p>"},{"location":"websockets/#_1","title":"\u63a5\u53d7\u8fde\u63a5","text":"<ul> <li><code>await websocket.accept(subprotocol=None, headers=None)</code> </li> </ul> <p>\u8be5\u65b9\u6cd5\u7528\u4e8e\u63a5\u53d7 WebSocket \u8fde\u63a5\uff0c\u53ef\u9009\u53c2\u6570\u5305\u62ec\uff1a</p> <ul> <li><code>subprotocol</code>\uff1a\u6307\u5b9a\u5b50\u534f\u8bae\u7684\u540d\u79f0\u3002</li> <li><code>headers</code>\uff1a\u9644\u52a0\u81ea\u5b9a\u4e49\u5934\u4fe1\u606f\u4f5c\u4e3a\u5b57\u5178\u4f20\u5165\u3002</li> </ul>"},{"location":"websockets/#_2","title":"\u53d1\u9001\u6570\u636e","text":"<ul> <li><code>await websocket.send_text(data)</code></li> <li><code>await websocket.send_bytes(data)</code></li> <li><code>await websocket.send_json(data)</code></li> </ul> <p>\u4ece\u7248\u672c 0.10.0 \u5f00\u59cb\uff0cJSON \u6d88\u606f\u9ed8\u8ba4\u901a\u8fc7\u6587\u672c\u6570\u636e\u5e27\u53d1\u9001\u3002 \u8981\u901a\u8fc7\u4e8c\u8fdb\u5236\u6570\u636e\u5e27\u53d1\u9001 JSON\uff0c\u53ef\u4ee5\u4f7f\u7528 <code>websocket.send_json(data, mode=\"binary\")</code>\u3002</p>"},{"location":"websockets/#_3","title":"\u63a5\u6536\u6570\u636e","text":"<ul> <li><code>await websocket.receive_text()</code></li> <li><code>await websocket.receive_bytes()</code></li> <li><code>await websocket.receive_json()</code></li> </ul> <p>\u53ef\u80fd\u4f1a\u5f15\u53d1 <code>starlette.websockets.WebSocketDisconnect()</code> \u5f02\u5e38\u3002</p> <p>\u4ece\u7248\u672c 0.10.0 \u5f00\u59cb\uff0cJSON \u6d88\u606f\u9ed8\u8ba4\u901a\u8fc7\u6587\u672c\u6570\u636e\u5e27\u63a5\u6536\u3002 \u8981\u901a\u8fc7\u4e8c\u8fdb\u5236\u6570\u636e\u5e27\u63a5\u6536 JSON\uff0c\u53ef\u4ee5\u4f7f\u7528 <code>websocket.receive_json(data, mode=\"binary\")</code>\u3002</p>"},{"location":"websockets/#_4","title":"\u6570\u636e\u8fed\u4ee3","text":"<ul> <li><code>websocket.iter_text()</code></li> <li><code>websocket.iter_bytes()</code></li> <li><code>websocket.iter_json()</code></li> </ul> <p>\u8fd9\u4e9b\u65b9\u6cd5\u4e0e <code>receive_text</code>\u3001<code>receive_bytes</code> \u548c <code>receive_json</code> \u7c7b\u4f3c\uff0c\u4f46\u8fd4\u56de\u7684\u662f\u5f02\u6b65\u8fed\u4ee3\u5668\u3002</p> <pre><code>from starlette.websockets import WebSocket\n\n\nasync def app(scope, receive, send):\n    websocket = WebSocket(scope=scope, receive=receive, send=send)\n    await websocket.accept()\n    async for message in websocket.iter_text():\n        await websocket.send_text(f\"Message text was: {message}\")\n    await websocket.close()\n</code></pre> <p>\u5f53\u5f15\u53d1 <code>starlette.websockets.WebSocketDisconnect</code> \u5f02\u5e38\u65f6\uff0c\u8fed\u4ee3\u5668\u5c06\u9000\u51fa\u3002</p>"},{"location":"websockets/#_5","title":"\u5173\u95ed\u8fde\u63a5","text":"<ul> <li><code>await websocket.close(code=1000, reason=None)</code></li> </ul>"},{"location":"websockets/#_6","title":"\u53d1\u9001\u548c\u63a5\u6536\u6d88\u606f","text":"<p>\u5982\u679c\u4f60\u9700\u8981\u53d1\u9001\u6216\u63a5\u6536\u539f\u59cb\u7684 ASGI \u6d88\u606f\uff0c\u5e94\u8be5\u4f7f\u7528 <code>websocket.send()</code> \u548c <code>websocket.receive()</code>\uff0c\u800c\u4e0d\u662f\u4f7f\u7528\u539f\u59cb\u7684 <code>send</code> \u548c <code>receive</code> \u53ef\u8c03\u7528\u5bf9\u8c61\u3002\u8fd9\u6837\u53ef\u4ee5\u786e\u4fdd WebSocket \u7684\u72b6\u6001\u4fdd\u6301\u6b63\u786e\u66f4\u65b0\u3002</p> <ul> <li><code>await websocket.send(message)</code></li> <li><code>await websocket.receive()</code></li> </ul>"},{"location":"websockets/#_7","title":"\u53d1\u9001\u62d2\u7edd\u54cd\u5e94","text":"<p>\u5982\u679c\u5728\u8c03\u7528 <code>websocket.accept()</code> \u4e4b\u524d\u8c03\u7528 <code>websocket.close()</code>\uff0c\u5219\u670d\u52a1\u5668\u4f1a\u81ea\u52a8\u5411\u5ba2\u6237\u7aef\u53d1\u9001 HTTP 403 \u9519\u8bef\u3002</p> <p>\u5982\u679c\u4f60\u60f3\u53d1\u9001\u5176\u4ed6\u9519\u8bef\u54cd\u5e94\uff0c\u53ef\u4ee5\u4f7f\u7528 <code>websocket.send_denial_response()</code> \u65b9\u6cd5\u3002\u8be5\u65b9\u6cd5\u4f1a\u53d1\u9001\u54cd\u5e94\u5e76\u5173\u95ed\u8fde\u63a5\u3002</p> <ul> <li><code>await websocket.send_denial_response(response)</code></li> </ul> <p>\u8fd9\u8981\u6c42 ASGI \u670d\u52a1\u5668\u652f\u6301 WebSocket \u62d2\u7edd\u54cd\u5e94\u6269\u5c55\u3002\u5982\u679c\u4e0d\u652f\u6301\uff0c\u5c06\u5f15\u53d1 <code>RuntimeError</code> \u5f02\u5e38\u3002</p>"}]}